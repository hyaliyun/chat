import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function O(s,e,h,m,a,r){return n(),i("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(k,[["render",O],["__scopeId","data-v-56204abf"]]),Y=JSON.parse('[{"question":"In this problem, you are given a sequence of n integers representing the heights of n buildings in a row. You need to determine the maximum area of a rectangle that can be formed by choosing consecutive buildings. The area of a rectangle is determined by the height of the shortest building in the chosen sequence and the number of buildings in that sequence. The first line contains a single integer n (1 ≤ n ≤ 500,000), representing the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100,000), representing the heights of the buildings. Output a single integer — the maximum area of a rectangle that can be formed by choosing consecutive buildings. Example: Input: 5 2 1 5 6 2 Output: 10 In this example, the maximum rectangular area is obtained by choosing the third and fourth buildings with heights 5 and 6, resulting in an area of 5 * 2 = 10.","solution":"def largest_rectangle_area(heights): Return the maximum area of a rectangle that can be formed by choosing consecutive buildings. Args: heights (list of int): List of building heights. Returns: int: Maximum area of rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Maurice is participating in a game where he is required to collect specific items in a particular order to progress. Each item is represented by a unique integer. Maurice has a backpack with a limited capacity and each item has a specific weight. Given a list of items Maurice is required to collect, their weights, and the maximum capacity of the backpack, determine if it is possible for Maurice to carry all required items in the backpack at once. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains two space-separated integers n (1 ≤ n ≤ 100) — the number of items Maurice needs to collect, and W (1 ≤ W ≤ 10^9) — the maximum capacity of the backpack. The second line contains n space-separated integers wi (1 ≤ wi ≤ 10^8) — the weights of the items Maurice needs to collect. Print a single line with \\"YES\\" if Maurice can carry all items in his backpack, otherwise print \\"NO\\". For example: In the first sample, the sum of weights 1 + 2 + 3 = 6 is less than the maximum capacity 10, so the output is \\"YES\\". In the second sample, the sum of weights 5 + 5 + 5 = 15 exceeds the maximum capacity 12, so the output is \\"NO\\".","solution":"def can_carry_all_items(n, W, weights): Determines if Maurice can carry all required items in his backpack given the weights and capacity. Parameters: n (int): Number of items. W (int): Maximum capacity of the backpack. weights (list of int): Weights of the items. Returns: str: \\"YES\\" if Maurice can carry all items, otherwise \\"NO\\". if sum(weights) <= W: return \\"YES\\" else: return \\"NO\\""},{"question":"A convoy of trucks has to deliver resources to a remote base and there is a single road which can be traversed once. Each truck can carry a different amount of resources but the road cannot handle too much load at once. To optimize the delivery, you need to maximize the total resources delivered without exceeding the road\'s capacity limit. You are given the maximum capacity of the road, the number of trucks, and the resource capacity of each truck. Your task is to determine the maximum amount of resources that can be delivered using any combination of trucks such that their combined resource capacity does not exceed the maximum capacity of the road. # Input - The first line contains two integers `C` and `n` (1 ≤ C ≤ 10^5, 1 ≤ n ≤ 100), where `C` is the maximum capacity of the road and `n` is the number of trucks. - The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^4), where `ai` is the resource capacity of the i-th truck. # Output - Print a single integer, the maximum total resources that can be delivered without exceeding the road\'s capacity. # Example Input ``` 50 5 10 20 30 40 50 ``` Output ``` 50 ``` Input ``` 60 5 15 25 35 45 55 ``` Output ``` 60 ```","solution":"def max_resources(C, n, capacities): dp = [0] * (C + 1) for cap in capacities: for i in range(C, cap - 1, -1): dp[i] = max(dp[i], dp[i - cap] + cap) return dp[C] if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() C = int(data[0]) n = int(data[1]) capacities = list(map(int, data[2:2+n])) print(max_resources(C, n, capacities))"},{"question":"Given a string `s` consisting of lowercase alphabets, you need to determine the lexicographically smallest string that can be obtained by removing any one character from the string. The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100). For each test case, print a single line containing the lexicographically smallest string obtainable after removing exactly one character from `s`. # Example Input ``` 3 abc acb cba ``` Output ``` ab ab ba ``` # Explanation - For the first test case, removing \'c\' results in \\"ab\\", \'b\' results in \\"ac\\", and \'a\' results in \\"bc\\". Among them, \\"ab\\" is the smallest lexicographically. - For the second test case, removing \'b\' or \'c\' both result in \\"ac\\", which is the smallest. - For the third test case, removing \'c\' results in \\"ba\\" which is the smallest.","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by removing one character from s. smallest_string = s[1:] # Initial smallest string by removing the first character for i in range(1, len(s)): new_string = s[:i] + s[i+1:] # Remove one character at position i if new_string < smallest_string: smallest_string = new_string return smallest_string def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for s in test_cases: result = lexicographically_smallest_string(s) results.append(result) return results"},{"question":"Given an array of integers and a set of queries, each of which asks you to find the sum of the minimum and maximum values in a subarray, provide answers for all the queries efficiently. You are given an array a consisting of n integers a1, a2, ..., an. You are also given q queries, each defining a subarray by its start and end indices l and r (1 ≤ l ≤ r ≤ n). For each query, find the sum of the minimum and maximum numbers in the subarray a[l], a[l+1], ..., a[r]. Write a program that efficiently answers all the queries. # Input - The first line contains two integers n and q (1 ≤ n, q ≤ 200,000), the number of elements in the array and the number of queries. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. - Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the start and end indices of a query. # Output For each query, output a single line containing the sum of the minimum and maximum values in the corresponding subarray. # Example Input: ``` 5 3 1 3 2 4 5 1 3 2 4 1 5 ``` Output: ``` 4 6 6 ``` Explanation: - For the first query (1, 3), the subarray is [1, 3, 2]. The minimum is 1, and the maximum is 3, so their sum is 4. - For the second query (2, 4), the subarray is [3, 2, 4]. The minimum is 2, and the maximum is 4, so their sum is 6. - For the third query (1, 5), the subarray is [1, 3, 2, 4, 5]. The minimum is 1, and the maximum is 5, so their sum is 6. # Note You need to design an efficient algorithm that can handle the upper bounds of the input sizes.","solution":"def solve(n, q, array, queries): Returns an array of results for each query of finding the sum of the minimum and maximum values in a subarray defined by the given queries. results = [] for l, r in queries: subarray = array[l-1:r] # Subarray is 0-indexed in Python, so adjust indices min_val = min(subarray) max_val = max(subarray) results.append(min_val + max_val) return results"},{"question":"In the magical land of Codeville, there are portals connecting different cities. Each portal allows travel in both directions between two cities. There is also a wizard who often closes some portals to challenge the citizens. The land has `n` cities and `m` portals, but due to the wizard\'s interference, some portals might be closed. When that happens, not all cities may remain connected. Cities can only communicate if there is a path of open portals between them. Your task is to determine how well connected Codeville is after the wizard closes certain portals. Specifically, if you are given a list of portals that the wizard intends to close, you need to figure out the size of the largest connected component in the resulting graph. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `m` (0 ≤ m ≤ 200,000) — the number of cities and portals, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a portal between city `u` and city `v`. - The next line contains a single integer `k` (0 ≤ k ≤ m) — the number of portals the wizard will close. - The next `k` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n, a ≠ b) — indicating that the portal between city `a` and city `b` will be closed. # Output Output a single integer — the size of the largest connected component after the specified portals are closed. # Example Input ``` 6 5 1 2 2 3 3 4 4 5 5 6 2 2 3 5 6 ``` Output ``` 3 ``` # Explanation Initially, the cities are connected as follows: ``` 1 - 2 - 3 - 4 - 5 - 6 ``` After closing the portals between cities (2, 3) and (5, 6), the largest connected component includes cities 1, 2, and 3, which forms the largest connected group with a size of 3.","solution":"import collections def largest_connected_component(n, m, edges, k, close_list): Given n cities, m portals and a list of portals to be closed, find the size of the largest connected component. def dfs(node, visited, graph): stack = [node] size = 0 while stack: current = stack.pop() if current not in visited: visited.add(current) size += 1 for neighbor in graph[current]: if neighbor not in visited: stack.append(neighbor) return size graph = collections.defaultdict(list) # Add all portals to the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # Remove the portals that will be closed for a, b in close_list: graph[a].remove(b) graph[b].remove(a) visited = set() largest_component = 0 # Traverse each node to find the largest connected component for node in range(1, n + 1): if node not in visited: component_size = dfs(node, visited, graph) largest_component = max(largest_component, component_size) return largest_component"},{"question":"You are given an array of positive integers, where each integer represents the width of a book. You have a bookshelf that can hold up to `W` units of width. Your task is to arrange the books on the shelf such that the total width of the books on the shelf is maximized, but does not exceed `W`. You are allowed to rotate the books and place them either horizontally or vertically, which means that the width of each book can be either its original width or 1, but each book\'s height will not affect the shelf capacity. Write a program to find the maximum total width of books that can fit on the bookshelf. The first input line contains two integers, `n` and `W` (1 ≤ n ≤ 1000, 1 ≤ W ≤ 100000), where `n` is the number of books and `W` is the maximum width of the bookshelf. The second input line contains `n` positive integers, each representing the width of a book. Output a single integer - the maximum total width of books that can fit on the bookshelf without exceeding the capacity `W`. # Example Input ``` 5 10 1 2 3 4 5 ``` Output ``` 10 ``` Explanation One possible way to achieve the maximum total width is by using the books of widths 1, 2, 3, and 4. Their total width is 10 which is the maximum possible with given constraints. Rotation is not needed in this case.","solution":"def max_width_on_shelf(n, W, widths): Returns the maximum width of books that can fit on a bookshelf with capacity W. # Sort the books in descending order widths.sort(reverse=True) # Initialize total width total_width = 0 for width in widths: if total_width + width <= W: total_width += width elif total_width + 1 <= W: total_width += 1 return total_width # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) W = int(data[1]) widths = list(map(int, data[2:])) print(max_width_on_shelf(n, W, widths))"},{"question":"The XYZ software company is holding a coding competition where participants are required to solve various algorithmic problems. One of the interesting problems in the competition is related to analyzing a stock price trend over a period of days and determining the best buying and selling points to maximize profit. Here\'s the problem statement: You are given an integer array `prices` where each element represents the price of a given stock on that particular day. Your task is to determine the maximum profit that can be obtained by making at most one transaction (i.e., you can buy one and sell one share of the stock). Note that you cannot sell a stock before you buy one. Write a function `maxProfit` to solve the problem. The function should take a list of integers `prices` and return an integer representing the maximum profit. If no profit can be achieved, return 0. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of days. - The second line contains `n` integers, where the ith integer (0 ≤ `prices[i]` ≤ 10^5) represents the stock price on day i. # Output - Print a single integer — the maximum profit you can achieve from this transaction. If no profit can be achieved, print 0. # Example Input ``` 6 7 1 5 3 6 4 ``` Output ``` 5 ``` Explanation - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input ``` 5 7 6 4 3 1 ``` Output ``` 0 ``` Explanation - In this case, no transactions are done and the max profit = 0.","solution":"def maxProfit(prices): This function takes a list of integers representing the prices of a stock over days and returns the maximum profit that can be made by buying and then selling the stock once. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"The kingdom of ByteLand has a network of cities connected by roads. Each road connects exactly two cities and has a certain length. The king of ByteLand wants to ensure that his kingdom has a fast transportation system, so he decided to build a high-speed rail between some pairs of cities. However, he wants to build the rail network in a way that minimizes the total length of the rail network while still connecting all the cities. Formally, given a list of roads where each road connects two cities and has a certain length, your task is to determine the minimum length of rail that needs to be built to ensure there is a path between any pair of cities in ByteLand. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100000) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000, u ≠ v) — the two cities connected by this road and the length of the road, respectively. It is guaranteed that the given road network is connected. Output Print a single integer — the minimum total length of the rail network that connects all the cities in ByteLand. Example Input: 4 5 1 2 3 2 3 4 3 4 2 1 3 5 1 4 7 Output: 9 Explanation: One possible rail network with minimum total length could be: - Connect city 1 to city 2 (length 3) - Connect city 3 to city 4 (length 2) - Connect city 2 to city 3 (length 4) The total length of the rail network is 3 + 2 + 4 = 9.","solution":"def find_minimum_rail_length(n, m, roads): Returns the minimum length of the rail network that connects all the cities in ByteLand. # Helper function to find the root of the set in the disjoint set (Union-Find) structure def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to perform the union of two sets in the disjoint set (Union-Find) structure def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) roads.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_length = 0 edge_count = 0 for road in roads: u, v, w = road u -= 1 # Convert to zero-based index for easier handling in the Union-Find structure v -= 1 # Check if including this edge forms a cycle root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_length += w edge_count += 1 union(parent, rank, root_u, root_v) # If we have included n-1 edges, the MST is complete if edge_count == n - 1: break return mst_length"},{"question":"You are provided with `n` positive integers representing the lengths of `n` ropes. You are to perform operations to combine these ropes until only one rope is left. During an operation, you select the two shortest ropes and combine them; the cost of this operation is the sum of the lengths of the two ropes. Write a program to calculate the minimum possible cost to combine all the ropes into one. The first line contains one integer `n` (1 leq n leq 10^5), the number of ropes. The second line contains `n` integers `l_1, l_2, dots, l_n` (1 leq l_i leq 10^9), the lengths of the ropes. Print the minimum total cost to combine all the ropes. # Example **Input:** ``` 4 4 3 2 6 ``` **Output:** ``` 29 ``` **Explanation:** 1. Combine ropes of length 2 and 3 costs 5. 2. Combine ropes of length 4 and 5 costs 9. 3. Combine ropes of length 6 and 9 costs 15. Total cost is `5 + 9 + 15 = 29`.","solution":"import heapq def min_cost_to_combine_ropes(n, lengths): Returns the minimum cost to combine all ropes into one. heapq.heapify(lengths) total_cost = 0 while len(lengths) > 1: first = heapq.heappop(lengths) second = heapq.heappop(lengths) combined = first + second heapq.heappush(lengths, combined) total_cost += combined return total_cost"},{"question":"Jack is very keen on social networks and currently he uses an app called \\"FriendLinker\\". In this app, Jack has n friends. Each friend can be represented as a node and each friendship can be represented as an undirected edge between two nodes. Jack wants to know how many unique friend circles (or connected components) exist in his friend network. A friend circle is a group of friends such that there is a path between any two friends in the group. Given the number of friends n and a list of undirected edges representing the friendships, help Jack determine the number of unique friend circles in his friend network. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000), where n is the number of friends and m is the number of friendships. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a friendship between friends u and v. Print a single integer — the number of unique friend circles in Jack\'s friend network. Examples: Input: 5 3 1 2 2 3 4 5 Output: 2 Explanation: There are 2 friend circles in the given network. One consists of friends {1, 2, 3}, and the other consists of friends {4, 5}.","solution":"def find_unique_friend_circles(n, friendships): Determine the number of unique friend circles in the given friend network. Parameters: n (int): The number of friends. friendships (list of tuples): List of undirected edges representing the friendships. Returns: int: The number of unique friend circles. def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Create an adjacency list to represent the graph adj_list = [[] for _ in range(n + 1)] for u, v in friendships: adj_list[u].append(v) adj_list[v].append(u) # Initialize visited list visited = [False] * (n + 1) # Count the number of connected components friend_circles = 0 for friend in range(1, n + 1): if not visited[friend]: visited[friend] = True dfs(friend, visited, adj_list) friend_circles += 1 return friend_circles"},{"question":"Mike is working on a text editor that allows him to manipulate text through a series of basic operations. One of the operations he finds himself needing frequently is the ability to reverse the words in a sentence. Can you help Mike implement this feature? You\'re given a string `s` which represents a sentence consisting of words separated by spaces. Your task is to reverse the order of the words in the sentence while preserving the whitespace distribution of the original sentence as much as possible. Note that the whitespace should be reduced to a single space between the words in the reversed sentence, and there should be no leading or trailing spaces in the output. For example, consider the sentence \\" Hello world! This is a test \\". The reversed sentence should be \\"test a is This world! Hello\\". Write a function `reverseWords` that takes a string `s` and returns a new string with the words in reverse order. **Function Signature:** ```python def reverseWords(s: str) -> str: pass ``` **Input:** - A single string `s`, where `1 <= len(s) <= 10^5`. **Output:** - A string which is the original sentence with the words in reversed order. **Examples:** 1. Input: `\\" Hello world! This is a test \\"` Output: `\\"test a is This world! Hello\\"` 2. Input: `\\"Code every day\\"` Output: `\\"day every Code\\"` 3. Input: `\\" SingleWord \\"` Output: `\\"SingleWord\\"` **Constraints:** - The input string can contain leading and trailing spaces. - The input string can contain multiple spaces between words. - All words are separated by spaces consisting of one or more spaces. **Note:** - Ensure the output string contains only a single space between words and no leading or trailing spaces.","solution":"def reverseWords(s: str) -> str: Returns the sentence with the order of the words reversed. # Split the sentence into words, filtering out any empty words (caused by multiple spaces) words = [word for word in s.split(\' \') if word] # Reverse the list of words reversed_words = words[::-1] # Join the reversed list with a single space and return return \' \'.join(reversed_words)"},{"question":"You are given an RGB image represented as a 3D list of dimensions Height x Width x 3, where the innermost dimension represents the Red, Green, and Blue color values of each pixel, respectively. Your task is to write a function that finds the most common color in the image and returns it as a tuple (Red, Green, Blue). If there are multiple colors with the same highest frequency, return the one that appears first when reading the image row by row, from left to right and top to bottom. # Function Signature ```python def most_common_color(image: List[List[List[int]]]) -> Tuple[int, int, int]: ``` # Input - A 3D list `image` of integers with dimensions `Height x Width x 3` where: - `1 <= Height, Width <= 1000` - `0 <= image[i][j][k] <= 255` for all valid `i, j, k` # Output - A tuple `(Red, Green, Blue)` representing the most common color in the image. # Example ```python image = [ [[255, 0, 0], [255, 0, 0], [0, 255, 0]], [[0, 255, 0], [0, 0, 255], [0, 0, 255]], [[255, 0, 0], [0, 255, 0], [255, 0, 0]] ] assert most_common_color(image) == (255, 0, 0) ``` # Explanation In the given example image, the color `(255, 0, 0)` appears the most frequently (4 times). Hence, the function should return `(255, 0, 0)`. # Constraints - The image is guaranteed to have at least one pixel. - The return color should be a tuple of three integers representing the RGB values.","solution":"from typing import List, Tuple from collections import Counter def most_common_color(image: List[List[List[int]]]) -> Tuple[int, int, int]: # Flatten the list of pixels for counting pixels = [tuple(pixel) for row in image for pixel in row] # Use Counter to count each pixel\'s occurrences pixel_count = Counter(pixels) # Find the most common color most_common = pixel_count.most_common(1)[0][0] return most_common"},{"question":"Given a sequence of integers, you need to find the length of the longest contiguous subarray whose elements are all distinct. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Print a single integer — the length of the longest contiguous subarray with all distinct elements. In the first example, the longest subarray with all distinct elements is [2, 1, 3, 4] and its length is 4. In the second example, the longest subarray with all distinct elements is [3, 4, 5] and its length is 3. In the third example, every element is distinct, so the length of the entire array is the answer.","solution":"def length_of_longest_distinct_subarray(n, sequence): Returns the length of the longest contiguous subarray with all distinct elements. n: int - the length of the sequence. sequence: list of int - the sequence of integers. if n == 0: return 0 longest_length = 0 start = 0 seen = {} for end in range(n): if sequence[end] in seen and seen[sequence[end]] >= start: start = seen[sequence[end]] + 1 seen[sequence[end]] = end longest_length = max(longest_length, end - start + 1) return longest_length"},{"question":"A group of friends decided to go on a hiking adventure. They planned to stick together to reach their destination. They have a map with n checkpoints connected by m bidirectional trails. They want to reach the destination checkpoint from the starting checkpoint, passing through as few checkpoints as possible. Each checkpoint has a unique number from 1 to n. The friends start at checkpoint 1, and the destination is checkpoint n. As experienced hikers, they want to make sure, if possible, in the case of backup plans, the hike also includes a specific checkpoint k (1 < k < n) at least once. Write a program to plan the shortest path from the start (checkpoint 1) to the destination (checkpoint n) through the required checkpoint k. The first line contains three integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 < k < n) — the number of checkpoints, the number of trails, and the checkpoint they want to pass through. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the checkpoints connected by a trail. There can be multiple trails between the same pair of checkpoints. Output a single integer — the number of checkpoints in the shortest path from checkpoint 1 to checkpoint n passing through checkpoint k, including both ends. If there is no such path, print -1. If there are multiple shortest paths, any will suffice. If there\'s no valid path, print -1.","solution":"from collections import deque, defaultdict def shortest_path_via_k(n, m, k, trails): def bfs(start, end): queue = deque([(start, 0)]) visited = [False] * (n + 1) visited[start] = True while queue: current, dist = queue.popleft() if current == end: return dist for neighbour in graph[current]: if not visited[neighbour]: visited[neighbour] = True queue.append((neighbour, dist + 1)) return -1 # No path found # Parse the input to build the graph graph = defaultdict(list) for u, v in trails: graph[u].append(v) graph[v].append(u) # Find the shortest path from 1 to k and from k to n dist1k = bfs(1, k) distkn = bfs(k, n) if dist1k == -1 or distkn == -1: return -1 # Total distance includes both start and end, hence add 1 more to the distance. return dist1k + distkn + 1"},{"question":"After a successful career as a warrior, Bob has decided to open up a puzzle shop. Bob has a unique process for assembling his puzzles: he combines smaller puzzles into larger ones until he ends up with a single large puzzle. Bob\'s process is defined by the following rule — each puzzle has a value associated with it, and when Bob combines two puzzles, the value of the new puzzle is the sum of the values of the original puzzles. Bob always combines puzzles in a way that minimizes the total cost across all combinations. Given an array of integers where each integer represents the value of a puzzle, determine the minimum total cost to assemble all the puzzles into one single puzzle. The input consists of: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of puzzles. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), where a_i is the value of the i-th puzzle. Output the minimum total cost to assemble all the puzzles into one. **Example:** ``` Input: 4 1 2 3 4 Output: 19 ``` **Explanation:** To combine all the puzzles in a cost-optimal way: 1. Combine the 1st and 2nd puzzles (1+2=3), cost = 3 2. Combine the result with the 3rd puzzle (3+3=6), cost = 6 3. Combine the result with the 4th puzzle (6+4=10), cost = 10 Total cost is 3 + 6 + 10 = 19","solution":"import heapq def min_cost_to_assemble_puzzles(n, puzzles): Calculate the minimum cost to combine all puzzles into one. Parameters: n : int Number of puzzles puzzles : list of int List of puzzle values Returns: int The minimum total cost to assemble all the puzzles into one. # Create a min-heap from the list of puzzles heapq.heapify(puzzles) total_cost = 0 while len(puzzles) > 1: # Pop the two smallest elements first = heapq.heappop(puzzles) second = heapq.heappop(puzzles) # Combine them and add the cost cost = first + second total_cost += cost # Push the combined puzzle back into the heap heapq.heappush(puzzles, cost) return total_cost"},{"question":"You are given a rectangular grid of size N times M (1 ≤ N, M ≤ 1000) consisting of lowercase letters. A word search algorithm scans this grid to find words from a given dictionary. The algorithm can move horizontally, vertically, or diagonally to adjacent cells in eight possible directions. However, it cannot wrap around the edges of the grid. Your task is to write a program that determines if each word in the dictionary can be found in the grid according to the above movement rules. # Input - The first line contains two integers, N and M. - The next N lines contain the grid with M characters in each line. - The following line contains an integer Q (1 ≤ Q ≤ 100), the number of words in the dictionary. - The final Q lines each contain a single word from the dictionary. The length of each word is at most 10. # Output For each word in the dictionary, output \\"YES\\" if the word can be found in the grid according to the movement rules, otherwise output \\"NO\\". # Sample Input ``` 4 5 abces sfcsf adees sster 3 abc see ssss ``` # Sample Output ``` YES YES NO ``` # Explanation - \\"abc\\" can be found starting from the top-left corner moving right. - \\"see\\" can be found starting from the third row first column moving down and then diagonally. - \\"ssss\\" cannot be found in any consecutive move without wrapping around the edge. Ensure your solution handles edge cases where: - Words are located at the corners or edges of the grid. - Words include repeated adjacent characters. - The grid has many similar characters, potentially creating overlapping search paths.","solution":"def find_word_in_grid(grid, rows, cols, word): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def dfs(x, y, index): if index == len(word): return True if not (0 <= x < rows and 0 <= y < cols) or grid[x][y] != word[index] or visited[x][y]: return False visited[x][y] = True for dx, dy in directions: if dfs(x + dx, y + dy, index + 1): return True visited[x][y] = False return False for i in range(rows): for j in range(cols): visited = [[False] * cols for _ in range(rows)] if dfs(i, j, 0): return True return False def solve_word_search(N, M, grid, Q, words): results = [] for word in words: if find_word_in_grid(grid, N, M, word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Sample usage if __name__ == \\"__main__\\": # Example case N, M = 4, 5 grid = [ \\"abces\\".strip(), \\"sfcsf\\".strip(), \\"adees\\".strip(), \\"sster\\".strip(), ] Q = 3 words = [\\"abc\\", \\"see\\", \\"ssss\\"] output = solve_word_search(N, M, grid, Q, words) print(\\"n\\".join(output))"},{"question":"You are given a list of integers. You have to find all possible pairs of integers in the list such that their product is even. Recall that a product of two integers is even if at least one of the integers is even. Write a function `find_even_product_pairs(lst)` that takes in a list of integers `lst` and returns a list of tuples, where each tuple is a pair of integers whose product is even. # Input - A list of integers `lst` where `1 ≤ len(lst) ≤ 10^4` and each integer `1 ≤ lst[i] ≤ 10^6`. # Output - A list of tuples, where each tuple contains two integers `(a, b)` from the input list such that their product is even. - Each pair `(a, b)` should be listed only once, and `(a, b)` is considered the same as `(b, a)`. - If no such pairs exist, return an empty list. # Example ```python # Example 1 lst = [1, 2, 3, 4] print(find_even_product_pairs(lst)) # Output: [(1, 2), (1, 4), (2, 3), (2, 4), (3, 4)] # Example 2 lst = [2, 4, 6] print(find_even_product_pairs(lst)) # Output: [(2, 4), (2, 6), (4, 6)] # Example 3 lst = [1, 3, 5] print(find_even_product_pairs(lst)) # Output: [] ``` # Note - In the first example, the pairs (1, 2), (1, 4), (2, 3), (2, 4), and (3, 4) all have their products even. - In the second example, the pairs (2, 4), (2, 6), and (4, 6) all have their products even since all numbers are even. - In the third example, there are no pairs with an even product. # Constraints - Your solution should be efficient enough to handle the upper bounds of input sizes and number ranges.","solution":"def find_even_product_pairs(lst): even_numbers = [num for num in lst if num % 2 == 0] pairs = set() for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] % 2 == 0 or lst[j] % 2 == 0: pairs.add((min(lst[i], lst[j]), max(lst[i], lst[j]))) return list(pairs)"},{"question":"You are given a string of lowercase English letters. Your task is to transform this string into a palindrome. However, you can only perform the following operation any number of times: - Choose any two adjacent characters in the string and replace them with a single character such that the string formed by repeating this new character twice is lexicographically smallest. For example: - If you have \'ab\' as adjacent characters, you can replace \'ab\' with \'a\' because \'aa\' is lexicographically smaller than \'bb\'. - If you have \'zy\' as adjacent characters, you can replace \'zy\' with \'y\' because \'yy\' is lexicographically smaller than \'zz\'. Given the initial string, return the length of the shortest possible palindrome that can be created by performing the above operation any number of times. The input consists of a string `s` with length `n` (1 ≤ `n` ≤ 10^5). Output a single integer which is the length of the shortest possible palindrome that can be created from the given string. # Example **Input:** ``` abb abc a ``` **Output:** ``` 1 1 1 ``` # Explanation - For the input \\"abb\\", you can convert it to \\"aaa\\" which is a palindrome of length 1. - For the input \\"abc\\", you can convert it to \\"ac\\" and then to \\"aa\\" which is a palindrome of length 1. - For the input \\"a\\", it is already a palindrome of length 1.","solution":"def shortest_palindrome_length(s): Returns the length of the shortest possible palindrome that can be created from the string s. unique_characters = set(s) return 1 if unique_characters else 0"},{"question":"A group of n farmers are growing k different crops. Each farmer has specified their preference for growing a particular combination of crops. You need to determine if it\'s possible to assign crops to the farmers such that each farmer gets exactly one of their preferred crop combinations, without any conflicts (i.e., no two farmers get the same combination of crops). The first line of the input contains two integers n (1 le n le 100) and k (1 le k le 100) — the number of farmers and the number of different crops, respectively. Each of the next n lines describes a farmer\'s crop preferences. The i-th line starts with an integer m_i (1 le m_i le 10), the number of different combinations the i-th farmer is willing to grow, followed by m_i integers representing the indices of these combinations (each index is between 1 and 2^k - 1). Output \\"Yes\\" if it\'s possible to assign distinct crop combinations to each farmer according to their preferences, and \\"No\\" otherwise. # Input ``` 3 3 2 1 3 2 2 6 3 3 4 7 ``` # Output ``` Yes ``` # Explanation: In this example, there are 3 farmers and 3 different crops. - Farmer 1 can grow combinations 1 (001 in binary) and 3 (011 in binary). - Farmer 2 can grow combinations 2 (010 in binary) and 6 (110 in binary). - Farmer 3 can grow combinations 3 (011 in binary), 4 (100 in binary), and 7 (111 in binary). We can assign: - Farmer 1 to grow combination 1 (001), - Farmer 2 to grow combination 2 (010), - Farmer 3 to grow combination 3 (011). Each farmer gets exactly one of their preferred combinations, and no two farmers get the same combination. Hence, the answer is \\"Yes\\".","solution":"def can_assign_crops(n, k, preferences): from itertools import combinations def create_graph(pref): graph = {} for i in range(len(pref)): graph[i] = set(pref[i]) return graph def bi_matching(graph): match = {} visited = set() def bpm(u): for v in graph[u]: if v not in visited: visited.add(v) if v not in match or bpm(match[v]): match[v] = u return True return False for u in graph: visited = set() if not bpm(u): return False return True graph = create_graph(preferences) return \\"Yes\\" if bi_matching(graph) else \\"No\\""},{"question":"You are given two sequences of integers, sequence A and sequence B, both of size n. You are also given q queries, each query is of the form (l, r), asking you to calculate the sum of the products of corresponding elements of subarrays A[l..r] and B[l..r], that is, the sum of A[l] * B[l] + A[l+1] * B[l+1] + ... + A[r] * B[r]. Can you handle these queries efficiently? Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of sequences A and B. - The second line contains n integers A1, A2, ..., An (1 ≤ Ai ≤ 10^6), the elements of sequence A. - The third line contains n integers B1, B2, ..., Bn (1 ≤ Bi ≤ 10^6), the elements of sequence B. - The fourth line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), the indices defining the subarray for the query (1-based indexing). Output: - For each query, output the sum of the products of the corresponding elements of the subarrays A[l..r] and B[l..r]. Example: Input: ``` 5 1 2 3 4 5 5 4 3 2 1 3 1 3 2 5 1 5 ``` Output: ``` 22 40 35 ``` Explanation: - For the first query (1, 3), we have (1*5) + (2*4) + (3*3) = 5 + 8 + 9 = 22. - For the second query (2, 5), we have (2*4) + (3*3) + (4*2) + (5*1) = 8 + 9 + 8 + 5 = 30. - For the third query (1, 5), we have (1*5) + (2*4) + (3*3) + (4*2) + (5*1) = 5 + 8 + 9 + 8 + 5 = 35.","solution":"def preprocess_product_sums(A, B): Preprocess sequences A and B to create a prefix sum array of their products. n = len(A) product_prefix_sums = [0] * (n + 1) for i in range(1, n + 1): product_prefix_sums[i] = product_prefix_sums[i - 1] + A[i - 1] * B[i - 1] return product_prefix_sums def query_sum(product_prefix_sums, l, r): Calculate the sum of products of subarray A[l..r] and B[l..r] using prefix sums. return product_prefix_sums[r] - product_prefix_sums[l - 1]"},{"question":"You are given an array of integers. Your task is to find the maximum possible product of any two distinct indices in the array and return the pair of these indices (1-based) that give this maximum product. The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Print two integers — the 1-based indices of the elements that together have the largest product. In case of multiple pairs with the same product, print the pair with the smallest indices. Input: 7 10 20 30 40 50 60 70 Output: 6 7","solution":"def find_max_product_indices(arr): Given an array of integers, find the pair of 1-based indices that give the maximum possible product. n = len(arr) max_product = float(\'-inf\') index1 = -1 index2 = -1 for i in range(n): for j in range(i + 1, n): product = arr[i] * arr[j] if product > max_product: max_product = product index1 = i + 1 index2 = j + 1 return index1, index2"},{"question":"A delivery service company needs to assign delivery routes to their couriers. Each courier can deliver multiple packages, but any courier can deliver to a maximum of k different locations in a day. The goal is to find the total number of unique routes from the given set of starting points to the destinations. You are given an integer n (1 ≤ n ≤ 10^5) representing the number of delivery requests. Each request is described by a starting point ai and a destination point bi. You also have an integer k (1 ≤ k ≤ 500), which is the maximum number of different locations a courier can cover in a day. The starting and destination points are given as pairs of integers (ai, bi) where 1 ≤ ai, bi ≤ 10^9. No two requests have the same starting and destination points. You need to calculate the number of unique routes based on the given constraints. Input: - The first line contains two space-separated integers n and k. - The next n lines each contain two space-separated integers ai and bi. Output: - Output a single integer representing the total number of unique routes that can be assigned to the couriers. Example: Input: 5 2 1 3 2 5 3 6 1 2 4 7 Output: 4 Explanation: Here, we have 5 delivery requests and each courier can handle up to 2 routes. The unique routes are: 1 -> 3 2 -> 5 3 -> 6 1 -> 2 4 -> 7 The couriers can cover them without exceeding the limit of k routes per day. Note: In the provided example, although there are 5 requests, only 4 unique routes can be assigned, because 1 -> 3 and 1 -> 2 share the same starting point.","solution":"def unique_routes(n, k, requests): Calculate the number of unique delivery routes given the requests and constraints. :param n: int, number of delivery requests :param k: int, maximum number of locations a courier can cover in a day :param requests: List[Tuple[int, int]], list of delivery requests (ai, bi) :return: int, number of unique routes unique_routes_set = set(requests) return len(unique_routes_set)"},{"question":"[Dinosaur Game]: Imagine a simple 2D dinosaur game where a dinosaur needs to jump over obstacles while running forward. Given a list of obstacles and the positions where they appear, determine the minimum number of jumps the dinosaur needs to successfully avoid all obstacles and finish the game. Each jump can be of length 1, 2, or 3 positions forward. You are given the total length of the game track and the positions of the obstacles. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 100) — the total length of the game track and the number of obstacles, respectively. The second line contains m distinct integers a_i (1 ≤ a_i < n) — the positions of the obstacles in sorted order. Output a single integer — the minimum number of jumps needed for the dinosaur to reach the end of the track without hitting any obstacle. If it is not possible to complete the game without hitting an obstacle, output -1. # Example Input ``` 10 3 2 5 7 ``` Output ``` 4 ``` Explanation Start at position 0: - Jump 1 position to 1 - Jump 1 position to 2 (obstacle at 2, so cannot jump 1) - Jump 2 positions to 3 - Jump 2 positions to 5 (obstacle at 5, so cannot jump 2 nor 1) - Jump 3 positions to 6 - Jump 3 positions to 9 (end of the track at 10) Total jumps = 4","solution":"def minimum_jumps_to_avoid_obstacles(n, m, obstacles): Function to calculate the minimum number of jumps the dinosaur needs to avoid all obstacles and finish the game. :param n: Total length of the game track :param m: Number of obstacles :param obstacles: List of positions of obstacles :return: Minimum number of jumps needed or -1 if not possible obstacle_set = set(obstacles) # Dynamic programming array to store minimum jumps needed to reach each step dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(n): if i in obstacle_set: continue # Skip this position since it contains an obstacle for j in range(1, 4): if i + j <= n and (i + j not in obstacle_set): dp[i + j] = min(dp[i + j], dp[i] + 1) return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"You are given a rooted tree with n nodes (numbered 1 through n). Each node has an integer value associated with it. The root of the tree is node 1. You are tasked with finding the length of the longest path in the tree such that the path only visits nodes with distinct values (i.e., no value is repeated along the path). The first line contains an integer n (2 ≤ n ≤ 3000), the number of nodes in the tree. The second line contains n integers, where the i-th integer is the value of the i-th node (1 ≤ value ≤ 10^9). Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Print a single integer — the length of the longest path with distinct values. # Example: Input: 5 3 3 5 6 5 1 2 1 3 3 4 3 5 Output: 3 Explanation: One of the longest paths with distinct values is 1 -> 3 -> 4 or 1 -> 3 -> 5, with a length of 3.","solution":"def longest_path_with_distinct_values(nums, edges): from collections import defaultdict # Create adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent, visited): visited.add(nums[node - 1]) max_length = 0 for neighbor in tree[node]: if neighbor != parent and nums[neighbor - 1] not in visited: length = 1 + dfs(neighbor, node, visited) max_length = max(max_length, length) visited.remove(nums[node - 1]) return max_length # Start DFS from the root node return 1 + dfs(1, -1, set()) # Define the main function to read input and call the solution function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) edges = [] for i in range(n-1): u = int(data[n+1+2*i]) v = int(data[n+1+2*i+1]) edges.append((u, v)) print(longest_path_with_distinct_values(nums, edges))"},{"question":"Given a set of integers, determine the maximum sum of any subarray (contiguous subsequence) of these integers, considering you may change at most one element within the subarray to any other integer value you wish. The first line contains an integer n (1 leq n leq 10^5) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Print a single integer — the maximum sum of any subarray with at most one element change. **Example:** ``` Input: 5 1 -2 0 3 -1 Output: 4 Input: 3 -2 -3 -1 Output: 0 ``` In the first example, one optimal subarray is [1, -2, 0, 3], and changing -2 to 2 results in the maximum sum 1 + 2 + 0 + 3 = 6. In the second example, replacing any of the negative values would yield a subarray with the highest possible sum of 0.","solution":"def max_sum_with_one_change(arr): Given an array of integers, returns the maximum sum of any subarray with at most one element change. n = len(arr) # Base case: if array contains just one element if n == 1: return max(arr[0], 0) # Kadane\'s algorithm to find the max subarray sum without any change current_max = arr[0] global_max = arr[0] for i in range(1, n): current_max = max(arr[i], current_max + arr[i]) global_max = max(global_max, current_max) # Store max subarray sum ending at each index from the left max_end_here = [0] * n current_max = arr[0] max_end_here[0] = arr[0] for i in range(1, n): current_max = max(arr[i], current_max + arr[i]) max_end_here[i] = current_max # Store max subarray sum starting at each index from the right max_start_here = [0] * n current_max = arr[-1] max_start_here[-1] = arr[-1] for i in range(n-2, -1, -1): current_max = max(arr[i], current_max + arr[i]) max_start_here[i] = current_max # Calculate the maximum sum of subarray with at most one change result = global_max for i in range(n): # Maximum sum if we change arr[i] to any value (considering 0 as a potential optimal change) if i > 0: result = max(result, max_end_here[i-1]) if i < n - 1: result = max(result, max_start_here[i+1]) if i > 0 and i < n - 1: result = max(result, max_end_here[i-1] + max_start_here[i+1]) return max(result, 0)"},{"question":"Eve and Adam are learning about binary trees. They are particularly interested in identifying the \\"kth smallest element\\" in a binary search tree (BST). They came up with a challenge: given a BST, find the kth smallest element within it. In a binary search tree, the \\"kth smallest element\\" is defined as the kth element in the sorted order of all elements in the tree. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n), representing the number of nodes in the tree and the position of the element to find. The next n lines each contain a pair of integers x and y (0 ≤ x < y ≤ 10^9), where x is the node\'s value and y is its unique identifier, representing a node in the binary search tree. The root of the tree is guaranteed to be the first node (i.e., the first (x, y) pair given). Aim: Write a function that constructs the BST from the given nodes and finds the kth smallest element. Your function should output a single integer: the value of the kth smallest node in the BST. Example input: 5 3 4 1 2 2 6 3 1 4 3 5 Example output: 3 Explanation: The BST formed is: 4 / 2 6 / 1 3 The 3rd smallest element is 3.","solution":"class TreeNode: def __init__(self, val=0, id=0, left=None, right=None): self.val = val self.id = id self.left = left self.right = right def insert_into_BST(root, val, id): if not root: return TreeNode(val, id) if val < root.val or (val == root.val and id < root.id): root.left = insert_into_BST(root.left, val, id) else: root.right = insert_into_BST(root.right, val, id) return root def kth_smallest_element(root, k): stack = [] current = root while stack or current: while current: stack.append(current) current = current.left current = stack.pop() k -= 1 if k == 0: return current.val current = current.right def find_kth_smallest(n, k, nodes): root = None for val, id in nodes: root = insert_into_BST(root, val, id) return kth_smallest_element(root, k)"},{"question":"In a distant kingdom, there is a famous festival that lasts for n days. Each day, the citizens celebrate by wearing colorful costumes and taking part in various activities. For each day, the level of excitement is measured by an integer value between -100 and 100. Positive values indicate days full of fun and joy, while negative values indicate days marred by troubles and conflicts. A day with a zero value is considered neutral. The kingdom’s ruler wants to maintain a high level of excitement throughout the festival. To incentivize positive behavior, they have decided to reward citizens with a precious gem if there are three or more consecutive positive days during the festival. The citizens are eager to receive as many gems as possible. Given the sequence of daily excitement levels, determine how many gems the citizens can earn during the entire festival. The first line of input contains a single integer n (1 ≤ n ≤ 200,000) — the number of days in the festival. The second line contains n integers e1, e2, ..., en (-100 ≤ ei ≤ 100) — the excitement levels for each day. Output a single integer — the number of gems the citizens can earn. **Explanation:** In the first example, the excitement levels are [1, 2, 3, -1, 4, 5, 6]. There are two sequences of three or more consecutive positive days: [1, 2, 3] and [4, 5, 6], so the citizens earn 2 gems. In the second example, the excitement levels are [1, -1, 2, -2, 3, -3, 4]. There are no sequences of three or more consecutive positive days, so the citizens earn 0 gems. **Input:** ``` 7 1 2 3 -1 4 5 6 ``` **Output:** ``` 2 ``` **Input:** ``` 7 1 -1 2 -2 3 -3 4 ``` **Output:** ``` 0 ```","solution":"def count_gems(n, excitement_levels): Returns the number of gems earned based on the sequences of excitement levels. Parameters: n (int): Number of days in the festival. excitement_levels (list of int): List of excitement levels for each day. Returns: int: Number of gems earned. gem_count = 0 consecutive_count = 0 for level in excitement_levels: if level > 0: consecutive_count += 1 else: if consecutive_count >= 3: gem_count += 1 consecutive_count = 0 if consecutive_count >= 3: gem_count += 1 return gem_count"},{"question":"Let\'s consider a special type of binary string called a \\"flip-flop string\\". A binary string is defined as a flip-flop string if no two adjacent characters in the string are the same. You are given a binary string s of length n. In one operation, you can flip one character of the string (change a \'0\' to a \'1\' or vice versa). Your task is to find the minimum number of operations required to convert the given string into a flip-flop string. # Input The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a binary string s of length n (1 ≤ n ≤ 105). # Output For each test case, print a single integer, the minimum number of operations needed to convert the given string into a flip-flop string. # Example Input ``` 3 010101 111011 000 ``` Output ``` 0 2 1 ``` # Explanation 1. In the first case, the string \\"010101\\" is already a flip-flop string, so no operations are needed. 2. In the second case, the string \\"111011\\" can be converted to \\"101010\\" with 2 operations. 3. In the third case, the minimum number of operations to convert \\"000\\" to a flip-flop string can be one of \\"010\\", \\"101\\", etc., requiring 1 operation.","solution":"def min_operations_to_flip_flop(t, test_cases): results = [] for s in test_cases: n = len(s) pattern1 = \'\'.join([\'0\' if i % 2 == 0 else \'1\' for i in range(n)]) pattern2 = \'\'.join([\'1\' if i % 2 == 0 else \'0\' for i in range(n)]) mismatch1 = sum(1 for i in range(n) if s[i] != pattern1[i]) mismatch2 = sum(1 for i in range(n) if s[i] != pattern2[i]) results.append(min(mismatch1, mismatch2)) return results"},{"question":"You are given a tree with n nodes where each node corresponds to an integer from 1 to n. The tree is rooted at node 1. Each node except the root has a parent node. Your task is to find the longest path in the tree such that every node in the path has a strictly increasing value compared to its parent. You only need to output the length of the path, not the path itself. A tree is an undirected graph that is connected and acyclic. Each of the n-1 edges uniquely connects two nodes, and these edges provide a valid tree structure. The first line contains an integer n (2 le n le 10^5) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) — an edge connecting node u and node v. Output a single integer — the length of the longest path in the tree where each node in the path has a strictly increasing value compared to its parent. # Example Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` 3 ``` # Explanation In this example, the longest strictly increasing path is 1 -> 3 -> 4 or 1 -> 3 -> 5 with a length of 3.","solution":"def longest_increasing_path(n, edges): from collections import defaultdict, deque def bfs(node): visited = [False] * (n + 1) queue = deque([(node, 1)]) # (current node, current path length) visited[node] = True max_length = 1 while queue: cur_node, path_length = queue.popleft() for neighbor in tree[cur_node]: if not visited[neighbor] and neighbor > cur_node: visited[neighbor] = True queue.append((neighbor, path_length + 1)) max_length = max(max_length, path_length + 1) return max_length tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return bfs(1)"},{"question":"You are given an array of integers `arr` of length `n` and an integer `m`. Your task is to partition the array into exactly `m` non-overlapping subarrays such that the maximum sum of the values in any of the `m` subarrays is minimized. Formally, you need to select `m-1` partition points, divide the array into `m` sections and return the minimum possible value of the maximum array sum among these sections. # Input The first line of input contains two integers `n` and `m` (`1 ≤ m ≤ n ≤ 300`). The second line contains `n` integers, elements of the array `arr` (`1 ≤ arr[i] ≤ 1000`). # Output Output a single integer — the minimized maximum sum among the `m` subarrays. # Example Input ``` 5 2 7 2 5 10 8 ``` Output ``` 18 ``` Explanation One possible partition of the array is `[7, 2, 5]` and `[10, 8]`. The sums of these subarrays are `14` and `18`, respectively. The minimized maximum sum is `18`. Note: You may use a binary search algorithm combined with a greedy check to find the answer efficiently within given constraints.","solution":"def can_partition(arr, n, m, mid): count, current_sum = 1, 0 for num in arr: if current_sum + num > mid: count += 1 current_sum = num if count > m: return False else: current_sum += num return True def minimize_maximum_sum(arr, n, m): left, right = max(arr), sum(arr) result = right while left <= right: mid = (left + right) // 2 if can_partition(arr, n, m, mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Given an integer matrix `matrix` of size `m x n` and an integer `k`, your task is to find the sum of the largest `k` elements in the matrix. The first line contains three integers `m`, `n`, and `k` (`1 ≤ m, n ≤ 100` and `1 ≤ k ≤ m * n`) — the dimensions of the matrix and the number of largest elements to sum. The following `m` lines contain `n` integers each, representing the elements of the matrix. All elements of the matrix are between `−10^4` and `10^4`. Print a single integer, the sum of the largest `k` elements in the matrix. # Example Input ``` 3 3 2 1 5 3 7 2 6 4 8 9 ``` Output ``` 17 ``` # Explanation The largest `k = 2` elements in the matrix are `9` and `8`, and their sum is `17`. Ensure your code can handle edge cases, such as when `k` is equal to the total number of elements in the matrix or when all elements are negative.","solution":"def sum_of_largest_k_elements(matrix, k): Returns the sum of the largest k elements in the matrix. :param matrix: List of Lists, a 2D list representing the matrix. :param k: Integer, the number of largest elements to sum. :return: Integer, the sum of the largest k elements. # Flatten the matrix to a single list flattened_matrix = [elem for row in matrix for elem in row] # Sort the flattened matrix in descending order flattened_matrix.sort(reverse=True) # Take the sum of the first k elements return sum(flattened_matrix[:k]) # Example Usage: # m, n, k = 3, 3, 2 # matrix = [ # [1, 5, 3], # [7, 2, 6], # [4, 8, 9] # ] # print(sum_of_largest_k_elements(matrix, k)) # Output: 17"},{"question":"You are given an n x m grid of lowercase English letters. You need to answer q queries, each asking whether or not a distinct pattern can be found in the grid. A pattern can be found if you can start at some cell (x, y) and then move straight in one of the four directions (up, down, left, right) multiple times to form the pattern without changing direction. For example, if the starting cell is (2, 3) and the direction is right, you would consider the cells (2, 3), (2, 4), (2, 5), and so on. The first line contains three integers n, m, and q (1 ≤ n, m ≤ 100, 1 ≤ q ≤ 100) — the dimensions of the grid and the number of patterns to process. Each of the next n lines contains m characters — the grid itself. Then the following q lines each contains a distinct pattern string consisting only of lowercase English letters. For each query, output \\"YES\\" if the pattern can be found in the grid and \\"NO\\" otherwise. Example: Input: ``` 3 4 4 abcd efgh ijkl abc abd efg aaaa ``` Output: ``` YES NO YES NO ``` Explanation: - For pattern \\"abc\\", it can be found in the first row (cells (1, 1), (1, 2), (1, 3)). - For pattern \\"abd\\", no such sequence exists in any row, column or continuous 1-direction path. - For pattern \\"efg\\", it can be found in the second row (cells (2, 1), (2, 2), (2, 3)). - For pattern \\"aaaa\\", no such sequence exists in any row or column.","solution":"def find_pattern_in_grid(n, m, q, grid, patterns): def is_pattern_found(start_x, start_y, dx, dy, pattern): for k in range(len(pattern)): if not (0 <= start_x + dx * k < n and 0 <= start_y + dy * k < m): return False if grid[start_x + dx * k][start_y + dy * k] != pattern[k]: return False return True def pattern_exists(pattern): for i in range(n): for j in range(m): if (is_pattern_found(i, j, 0, 1, pattern) or # check right is_pattern_found(i, j, 1, 0, pattern) or # check down is_pattern_found(i, j, 0, -1, pattern) or # check left is_pattern_found(i, j, -1, 0, pattern)): # check up return \\"YES\\" return \\"NO\\" results = [] for pattern in patterns: results.append(pattern_exists(pattern)) return results"},{"question":"Alex is organizing a running event in a park. The park has a circular track with a circumference of c meters. There is a water station positioned at a specific point on the track, and Alex wants to ensure that runners get refreshed at regular intervals. In this event, n runners are participating, and each runner has a different constant speed (in meters per second). Given the starting time, speed, and position of each runner on the track, you need to determine where each runner will be at a given moment after the event starts. Write a function that takes the circumference c of the track and a list of tuples representing the runners. Each tuple contains three elements: - start_time: the time in seconds when the runner starts (0 ≤ start_time ≤ 10^6) - speed: the constant speed of the runner in meters per second (1 ≤ speed ≤ 10^3) - initial_position: the initial position on the track in meters (0 ≤ initial_position < c) Your function should return a list of positions (in meters) for each runner, represented by their distance from the starting point, after t seconds from the event start. The single line of input contains: - an integer c (1 ≤ c ≤ 10^6), representing the circumference of the track, - an integer t (0 ≤ t ≤ 10^6), representing the time in seconds after the event start, - an integer n (1 ≤ n ≤ 1000), representing the number of runners, - a list of n tuples. Each tuple contains: - an integer start_time, - an integer speed, - an integer initial_position. Print a list of n integers, where each integer represents the final position of the corresponding runner after t seconds from the event start. Example input: 1000 10 2 [(0, 10, 0), (5, 5, 500)] Example output: [100, 525] Explanation: - The first runner starts at position 0 with a speed of 10 m/s. After 10 seconds, this runner will be at position 100 meters. - The second runner starts at position 500 with a speed of 5 m/s, but only after 5 seconds. Therefore, after 10 seconds, they will have run for 5 seconds, reaching position 525 meters.","solution":"def runners_positions(c, t, n, runners): Calculate the final positions of each runner after t seconds from the event start. Parameters: c (int): circumference of the track t (int): time in seconds after the event start n (int): number of runners runners (list of tuples): each tuple contains (start_time, speed, initial_position) Returns: list of int: final positions of each runner positions = [] for start_time, speed, initial_position in runners: if t >= start_time: running_time = t - start_time final_position = (initial_position + running_time * speed) % c else: final_position = initial_position positions.append(final_position) return positions"},{"question":"A factory produces widgets that are stored in multiple warehouses. Each widget is associated with a unique serial number and each warehouse is identified by its warehouse ID. The demand for widgets is rapidly increasing, so the management needs to optimize the shipping routes. To optimize, they first want to find out which warehouses store each widget. You are given a list of shipments. Each shipment record contains the warehouse ID where the widget is stored and the widget\'s serial number. You need to write a program that, given the shipments data, returns a list of warehouses (sorted in ascending order of warehouse IDs) along with the list of widgets\' serial numbers they store (sorted in ascending order of serial numbers). The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of shipment records. Each of the next n lines contains two integers: warehouse_id (1 ≤ warehouse_id ≤ 10^6) and widget_serial_number (1 ≤ widget_serial_number ≤ 10^9). Print the warehouse ID followed by a sorted list of widget serial numbers each warehouse stores, one line per warehouse. Warehouses should be listed in ascending order of warehouse IDs and within each warehouse, serial numbers should also be listed in ascending order. # Sample Input ``` 5 1 202 2 101 1 203 2 100 3 300 ``` # Sample Output ``` 1 202 203 2 100 101 3 300 ``` In the given example, warehouse 1 stores widgets with serial numbers 202 and 203, warehouse 2 stores widgets with serial numbers 100 and 101, and warehouse 3 stores a widget with serial number 300.","solution":"def organize_shipments(n, shipments): from collections import defaultdict # Dictionary to store warehouse\'s widgets warehouse_dict = defaultdict(list) # Populate the dictionary for record in shipments: warehouse_id, widget_serial_number = record warehouse_dict[warehouse_id].append(widget_serial_number) # Sort the dictionary by warehouse ID sorted_warehouses = sorted(warehouse_dict.items()) # Prepare and sort the output result = [] for warehouse_id, widgets in sorted_warehouses: widgets.sort() result.append((warehouse_id, widgets)) return result # Function to format the result as requested def format_output(organized_shipments): output = [] for warehouse_id, widgets in organized_shipments: output.append(f\\"{warehouse_id} \\" + \\" \\".join(map(str, widgets))) return \\"n\\".join(output)"},{"question":"Alice needs to organize a new bookshelf that can only have books in pairs. Each pair must contain books of the same height to maximize the use of shelf space. Initially, Alice has a collection of books, each with a specific height. She needs to pair them up in such a way that the total number of remaining unpaired books is minimized. For example, if Alice has the books with heights [3, 1, 4, 3, 2, 4, 1, 5], she can pair the books as follows: (3, 3), (1, 1), (4, 4). The book with height 2 and the book with height 5 will remain unpaired. Your task is to determine the minimum number of books that will remain unpaired after Alice optimally pairs up her books. The first line of the input contains one integer n (1 ≤ n ≤ 2 * 10^5) — the number of books. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the books. Print the minimum number of books that will remain unpaired. For example, given the input: 8 3 1 4 3 2 4 1 5 The output should be: 2 In this case, Alice can pair the books as follows: (3, 3), (1, 1), (4, 4). The book with height 2 and the book with height 5 will remain unpaired, resulting in a total of 2 unpaired books.","solution":"def min_unpaired_books(n, heights): Returns the minimum number of unpaired books after pairing books of the same height. :param n: Integer, the number of books :param heights: List of integers, heights of the books :return: Integer, the number of unpaired books from collections import Counter height_counts = Counter(heights) unpaired_books = 0 for count in height_counts.values(): unpaired_books += count % 2 return unpaired_books"},{"question":"Alice and Bob are playing a game with a grid of size n x m. The grid\'s rows are numbered from 1 to n, and the columns from 1 to m. Initially, each cell of the grid contains either a 0 or a 1. The game is played according to Alice’s and Bob’s alternating turns, with Alice starting first. Alice’s move is to flip (change a 0 to a 1 or a 1 to a 0) exactly one cell in any row of the grid. Bob\'s move is to flip exactly one cell in any column of the grid. A player loses if at the beginning of their turn, they cannot flip any cell in their prescribed row or column. Assuming both players play optimally, determine the winner of the game after Alice makes the first move. Output \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines each contain m integers (0 or 1) representing the initial state of the grid. Print \\"Alice\\" if Alice is the winner, or \\"Bob\\" if Bob is the winner, assuming both play optimally.","solution":"def find_winner(n, m, grid): Determines the winner between Alice and Bob in the game. Parameters: n (int): number of rows m (int): number of columns grid (list of list of int): the initial state of the grid Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins # Count the number of rows with at least one zero, and columns with at least one zero row_with_zeros = sum(1 for row in grid if 0 in row) column_with_zeros = sum(1 for col in zip(*grid) if 0 in col) # The minimum of these counts determines the number of moves possible moves_possible = min(row_with_zeros, column_with_zeros) # If moves_possible is odd, Alice (the first player) wins if moves_possible % 2 == 1: return \\"Alice\\" else: # If moves_possible is even, Bob (the second player) wins return \\"Bob\\""},{"question":"You are given a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', representing well-balanced parentheses. Your task is to find the minimum number of moves needed to make this string valid. A string is considered valid if all brackets are matched correctly. In one move, you can remove one bracket from its current position and insert it into any other position in the string. The goal is to minimize the number of such moves. The first line of the input contains an integer ( t ) (( 1 leq t leq 100 )) — the number of test cases. Each of the next ( t ) lines contains a string ( s ) consisting of only \'(\', \')\', \'{\', \'}\', \'[\' and \']\', with length ( 1 leq |s| leq 2000 ). For each test case, output a single integer — the minimum number of moves required to make the string valid. # Example **Input:** ``` 3 (([ {}} ([{}]) ``` **Output:** ``` 2 2 0 ``` # Explanation - In the first case, the sequence `(([` can be rearranged as `([])` or `()[]` with 2 moves. - In the second case, you need to move one \'}\' two positions left to obtain `{}`. - In the third case, the sequence `([{}])` is already valid, so no moves are needed.","solution":"def min_moves_to_make_valid_parenthesis(t, test_cases): def min_moves(s): stack = [] left_count = right_count = 0 for char in s: if char in \\"({[\\": stack.append(char) else: if stack and ((char == \')\' and stack[-1] == \'(\') or (char == \'}\' and stack[-1] == \'{\') or (char == \']\' and stack[-1] == \'[\')): stack.pop() else: stack.append(char) unmatched_left = unmatched_right = 0 for char in stack: if char in \\"({[\\": unmatched_left += 1 else: unmatched_right += 1 return (unmatched_left + 1) // 2 + (unmatched_right + 1) // 2 results = [] for s in test_cases: results.append(min_moves(s)) return results"},{"question":"You are the manager of a warehouse, and you need to rearrange boxes in a specific order. The warehouse can be modeled as a one-dimensional array of boxes, each with a unique ID. Your task is to perform this rearrangement with the fewest number of moves possible in ascending order. A move is defined as taking any box and placing it in any position within the array. For example, if the array is [4, 3, 2, 1], you could take the box with ID 4 and place it after box 3 to yield the array [3, 4, 2, 1]. Given the initial order of the boxes, determine the minimum number of moves necessary to sort them in ascending order. The first line contains a single integer t (1 le t le 100) – the number of test cases. Each test case starts with an integer n (1 le n leq 1000) - the number of boxes in the warehouse. The second line of each test case contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) representing the initial order of the IDs of the boxes. For each test case, output a single integer - the minimum number of moves necessary to rearrange the boxes in ascending order. **Example:** ``` Input: 3 4 4 3 2 1 5 1 5 3 4 2 3 3 2 1 Output: 3 2 2 ``` **Explanation:** - For the first test case, [4, 3, 2, 1], you would need 3 moves to reorganize the array into [1, 2, 3, 4]. - For the second test case, [1, 5, 3, 4, 2], the minimum moves to reorganize the array would be 2. - For the third test case, [3, 2, 1], it also takes 2 moves to organize it into [1, 2, 3].","solution":"def min_moves_to_sort(t, cases): results = [] for n, a in cases: # Calculate the length of the longest increasing subsequence (LIS) in array `a`. from bisect import bisect_left def length_of_LIS(nums): dp = [] for num in nums: idx = bisect_left(dp, num) if idx == len(dp): dp.append(num) else: dp[idx] = num return len(dp) # Number of moves needed is the total number of elements minus the length of LIS lis_length = length_of_LIS(a) moves_needed = n - lis_length results.append(moves_needed) return results"},{"question":"Alice is planning to organize a grand event in her large rectangular hall. To accommodate the maximum number of guests, she needs to arrange the tables in a way that utilizes the hall space most efficiently. Alice\'s hall is represented as a grid of dimensions n x m, where each cell is either 0 (empty) or 1 (occupied by an obstacle). Each table occupies a rectangular area and should be placed so that its sides are parallel to the hall\'s walls. Moreover, Alice wants each table to be located in a contiguous block of empty cells with as large a perimeter as possible. Write a program to determine the maximum possible perimeter of a table that can be placed in the hall under these conditions. The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the hall. The next n lines each contain m characters \'0\' or \'1\', representing the hall\'s grid where \'0\' denotes an empty cell and \'1\' denotes an occupied cell. It is guaranteed that there is at least one empty cell in the hall. Output one integer — the maximum possible perimeter of a table that can be placed in Alice\'s hall. # Example Input ``` 4 5 00100 00000 11100 00010 ``` Output ``` 12 ``` Explanation In the given grid, placing a table in the area covering cells (1,2)-(2,5) results in a perimeter of 12, which is the maximum possible. The table fits into the 2x4 rectangle of empty cells and avoids all obstacles.","solution":"def max_table_perimeter(n, m, grid): def calculate_perimeter(top_left, bottom_right): if top_left[0] > bottom_right[0] or top_left[1] > bottom_right[1]: return 0 for i in range(top_left[0], bottom_right[0] + 1): for j in range(top_left[1], bottom_right[1] + 1): if grid[i][j] == \'1\': return 0 height = bottom_right[0] - top_left[0] + 1 width = bottom_right[1] - top_left[1] + 1 return 2 * (height + width) max_perimeter = 0 for row1 in range(n): for col1 in range(m): if grid[row1][col1] == \'0\': for row2 in range(row1, n): for col2 in range(col1, m): perimeter = calculate_perimeter((row1, col1), (row2, col2)) if perimeter > max_perimeter: max_perimeter = perimeter return max_perimeter # Example usage n = 4 m = 5 grid = [ \\"00100\\", \\"00000\\", \\"11100\\", \\"00010\\" ] print(max_table_perimeter(n, m, grid)) # Output: 12"},{"question":"In a distant land called Graphiville, there are n cities connected by m bidirectional roads. The Mayor of Graphiville wants to place k factories in some of the cities such that each city has at least one factory within a distance of at most d roads. A factory in city x ensures that all cities within d roads distance from x are covered by that factory. You are given n, m, k, and d, as well as a list of roads connecting pairs of cities. Determine if it is possible to place the factories according to the given conditions, and if possible, output the placement of the factories. The first line contains four integers n, m, k, and d (1 ≤ n, 1 ≤ m ≤ 10^5, 1 ≤ k ≤ n, 1 ≤ d ≤ n-1) — the number of cities, the number of roads, the number of factories to be placed, and the maximum distance from any city to a factory. The next m lines describe the roads. Each of these lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) denoting a bidirectional road between city a and city b. If it is possible to place the factories as described, output \\"YES\\" on the first line and an integer array of size n on the second line where the i-th integer is 1 if there is a factory in city i, and 0 otherwise. If it is not possible, output \\"NO\\". If there are multiple valid solutions, you can output any of them.","solution":"def place_factories(n, m, k, d, roads): from collections import deque, defaultdict graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) def bfs(start): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 queue = deque([start]) while queue: curr = queue.popleft() for neighbor in graph[curr]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[curr] + 1 queue.append(neighbor) return distances # Function to check if all cities are covered from a set of factories def all_cities_covered(factories): covered = set() for factory in factories: distances = bfs(factory) for city, distance in distances.items(): if distance <= d: covered.add(city) return len(covered) == n # Heuristics - Sort cities by the degree (number of roads connected) cities_by_degree = sorted(range(1, n+1), key=lambda x: len(graph[x]), reverse=True) for i in range(1 << n): if bin(i).count(\'1\') != k: continue factories = [cities_by_degree[j] for j in range(n) if (i >> j) & 1] if all_cities_covered(factories): placement = [0] * n for city in factories: placement[city - 1] = 1 return \\"YES\\", placement return \\"NO\\", [] # Example usage and testing n, m, k, d = 6, 6, 2, 1 roads = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)] print(place_factories(n, m, k, d, roads))"},{"question":"Chef loves cutting vegetables in a particular way. He has a stick of length n and he wants to cut it into exactly k pieces. Each piece should be an integer length, and Chef wants to maximize the length of the smallest piece. Your task is to help Chef determine the maximum possible length of the smallest piece after performing exactly k cuts on the stick. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^9). Output a single integer — the maximum possible length of the smallest piece after k cuts. Example: Input 10 3 Output 3 Explanation: In this example, one optimal way to cut the stick is to make the pieces of lengths 3, 3, and 4. The smallest piece length in this configuration is 3, which is the maximum possible.","solution":"def max_smallest_piece_length(n, k): Returns the maximum possible length of the smallest piece after performing exactly k cuts on the stick of length n. return n // k"},{"question":"You are given a binary tree with n nodes where each node is labeled from 1 to n. Each node has a value assigned to it. Your task is to convert this binary tree into a full binary tree by removing certain nodes. A full binary tree is a tree in which every node other than the leaves has two children. After converting to a full binary tree, compute the sum of the values of the remaining nodes. You are given the structure of the binary tree as follows: - The first line of input contains a single integer n (1 ≤ n ≤ 100,000), the number of nodes in the binary tree. - The second line contains n space-separated integers, the values assigned to each node from node 1 to node n. - Each of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Print the maximum sum of the values of the remaining nodes after converting the binary tree into a full binary tree. Example input: ``` 7 1 2 3 4 5 6 7 1 2 1 3 2 4 2 5 3 6 3 7 ``` Example output: ``` 28 ``` Explanation: ``` One possible full binary tree is to remove nodes 4 and 5. The resulting tree has nodes 1, 2, 3, 6, 7 which form a full binary tree with sum 1 + 2 + 3 + 6 + 7 = 19. Another possible full binary tree removal is to remove nodes 2 and 3. The remaining tree would be nodes 1, 4, 5, 6, 7 with a sum of 1 + 4 + 5 + 6 + 7 = 28. The maximum possible sum of values of the remaining nodes after removing the necessary nodes is 28. ``` Note: - In case of multiple solutions with the same maximum sum, any one of them is acceptable. - Ensure to handle large input sizes efficiently.","solution":"from collections import defaultdict def max_sum_full_binary_tree(n, values, edges): def dfs(node, parent): child_sums = [] total_sum = values[node - 1] # Convert 1-based index to 0-based for neighbor in graph[node]: if neighbor != parent: subtree_sum = dfs(neighbor, node) child_sums.append(subtree_sum) if len(child_sums) == 0: # Leaf node included[node] = True elif len(child_sums) == 1: # One child, must be removed included[node] = False total_sum += child_sums[0] else: # At least two children, can be included included[node] = True total_sum += sum(child_sums) return total_sum graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) values_sum = dfs(1, -1) included_sum = sum(values[i-1] for i in range(1, n+1) if included[i]) return max(values_sum, included_sum) # Example usage: n = 7 values = [1, 2, 3, 4, 5, 6, 7] edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] included = [False] * (n + 1) # Initialize whether the ith node is included in the full binary tree print(max_sum_full_binary_tree(n, values, edges)) # Output should be 28"},{"question":"Evelyn loves solving puzzles, and her latest challenge involves a special type of sequence called \\"palindromic permutations.\\" A palindromic permutation is a sequence that can be rearranged to form a palindrome. A palindrome reads the same backward as forward. Your task is to determine if a given string can be rearranged to form a palindrome. For example, the string \\"civic\\" is already a palindrome, but the string \\"ivicc\\" can be rearranged to form \\"civic\\". On the other hand, the string \\"hello\\" cannot be rearranged to form a palindrome. Input: - The first line contains a single integer t (1 ≤ t ≤ 10^4), the number of test cases. - Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. Output: - For each test case, print \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Example: Input: 4 civic ivicc hello aabbcc Output: YES YES NO YES Explanation: - \\"civic\\" is already a palindrome. - \\"ivicc\\" can be rearranged to \\"civic\\". - \\"hello\\" cannot be rearranged into a palindrome. - \\"aabbcc\\" can be rearranged to \\"abcabc\\" or \\"acbca\\" which are palindromes.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. :param s: The input string consisting of lowercase English letters. :return: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(t, cases): Process multiple test cases to determine if each string can be rearranged to form a palindrome. :param t: Number of test cases :param cases: List of string cases to be evaluated :return: List of results for each test case results = [] for s in cases: results.append(can_form_palindrome(s)) return results"},{"question":"Two players, Alice and Bob, are playing a game with a sequence of integers. The sequence is initially empty. They take turns appending an integer from a given set to the sequence. The game continues until they have appended exactly `n` integers in total. The given set of integers contains all integers from `1` to `k`, inclusive. Initially, Alice starts the game. The goal for Alice is to maximize the sum of all integers in the sequence at the end of the game, while Bob tries to minimize this sum. Both players are assumed to play optimally. Your task is to find the maximum possible sum of the sequence that Alice can ensure. The first input line contains two integers, `n` and `k` (1 ≤ n, k ≤ 100) — the total number of integers to be appended to the sequence and the maximum integer in the set, respectively. Print the maximum sum of the sequence that Alice can ensure at the end of the game. For example, if n = 3 and k = 3, Alice can ensure the maximum sum of 5 by making the sequence [3, 1, 1] or [1, 3, 1]. In another example, if n = 4 and k = 5, Alice can ensure the maximum sum of 11 by making the sequence [5, 2, 5, 2] or any other optimal combination.","solution":"def max_sum(n, k): Returns the maximum sum of the sequence that Alice can ensure. # No matter what Bob plays, Alice can always select the maximum number k in the next round alice_turns = (n + 1) // 2 return alice_turns * k"},{"question":"Alex is participating in a Programming Olympiad that has a variety of interesting problems. One of these problems involves analyzing stock prices over a given period of time. Alex needs your help to determine some metrics related to the stock prices. Given the daily closing prices for a stock over a period of n days, your task is to determine the maximum profit Alex can achieve if he buys the stock on one day and sells it on one of the subsequent days. The first line of the input contains a single integer n (1 leq n leq 100,000) — the number of days. The second line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq 10^9) — the closing prices of the stock on each day, where p_i is the price on the i-th day. If no profit can be made, the function should return 0. Here\'s how you should structure your solution: 1. Write a function that takes the number of days and the list of prices and returns the maximum possible profit. 2. Read the input values. 3. Use an efficient algorithm to compute the maximum profit. 4. Print the result. Below is the function signature and an example: ```python def max_profit(n: int, prices: List[int]) -> int: # Your code here # Example usage: # Input: # 6 # 7 1 5 3 6 4 # Output: # 5 ``` Explanation: The maximum profit can be achieved by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6). This results in a profit of 6 - 1 = 5. If no such days exist, the profit would be 0.","solution":"from typing import List def max_profit(n: int, prices: List[int]) -> int: if n < 2: return 0 min_price = prices[0] max_profit = 0 for i in range(1, n): min_price = min(min_price, prices[i]) max_profit = max(max_profit, prices[i] - min_price) return max_profit"},{"question":"You are given an array of integers. Your task is to determine the longest subarray where all elements are the same. For example, given the array `[1, 3, 3, 3, 2, 4, 4, 4, 4, 5]`, the longest subarray where all elements are the same is `[4, 4, 4, 4]`, which has length 4. # Input The first line contains a single integer `t` (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer `n` (1 le n le 1000) — the number of elements in the array. The next line contains `n` integers `a_1, a_2, ..., a_n` (1 le a_i le 10^4) — the elements of the array. # Output For each test case, print the length of the longest subarray where all elements are the same. # Example Input ``` 3 10 1 3 3 3 2 4 4 4 4 5 5 1 1 1 1 1 6 1 2 3 4 5 6 ``` Output ``` 4 5 1 ``` # Note In the first example, the longest subarray of the same element is `[4, 4, 4, 4]` with length 4. In the second example, the entire array consists of the same element `1`, so the length is 5. In the third example, there are no repeated elements, so the length is 1.","solution":"def longest_uniform_subarray_length(arr): Returns the length of the longest subarray with all elements the same. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = longest_uniform_subarray_length(arr) results.append(result) return results"},{"question":"An e-commerce website is organizing a special discount event. During this event, customers are given discount coupons based on the total price of their cart. The discount rule is as follows: For each product in the cart, if the price of the product is greater than a certain threshold T, the customer can apply a discount coupon of D units on that product. The website wants to maximize the total discount amount the customer can get while ensuring that the discounted price of any product remains non-negative. Given the prices of the products in the cart, the threshold T, and the discount value D, write a program to calculate the maximum total discount the customer can get. **Input:** - The first line contains two integers n and T (1 ≤ n ≤ 10^5, 0 ≤ T ≤ 10^9), where n is the number of products in the cart and T is the threshold price. - The second line contains an integer D (0 ≤ D ≤ 10^9), representing the discount value. - The third line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 10^9), which are the prices of the products in the cart. **Output:** - Print a single integer, the maximum total discount amount the customer can get. **Example:** Input: ``` 5 100 20 90 150 50 200 110 ``` Output: ``` 60 ``` Explanation: - For the product priced at 90, it is less than the threshold T, so no discount can be applied. - For the product priced at 150, the discount applied is 20, so the discount amount is 20. - For the product priced at 50, it is less than the threshold T, so no discount can be applied. - For the product priced at 200, the discount applied is 20, so the discount amount is 20. - For the product priced at 110, the discount applied is 20, so the discount amount is 20. - The total discount is 20 + 20 + 20 = 60.","solution":"def calculate_maximum_discount(n, T, D, prices): Calculate the maximum total discount. :param n: Number of products :param T: Threshold price :param D: Discount value :param prices: List of product prices :return: Maximum total discount amount total_discount = 0 for price in prices: if price > T: total_discount += min(D, price) # Ensure the discount does not exceed the price of the product return total_discount"},{"question":"Donna loves playing with blocks that have letters on them. She has a collection of blocks, each of which has a single letter from the alphabet on it. One day, she decides she wants to arrange some of her blocks to form her favorite word. Donna has multiple blocks with the same letters, but each block can only be used once. She is wondering how many times she can form her favorite word using her collection of blocks. Write a function `max_word_count(blocks, word)` that takes in two arguments: - `blocks` (a list of characters, representing the letters on each block she has) - `word` (a string, representing her favorite word) The function should return an integer representing the maximum number of times Donna can arrange her blocks to form her favorite word. # Input: - `blocks` is a list of lowercase alphabets, with 1 <= len(blocks) <= 10^5. - `word` is a string of lowercase alphabets, with 1 <= len(word) <= 100. # Output: - Return an integer, the maximum number of times she can form the word using the available blocks. # Example: ```python assert max_word_count([\'a\', \'b\', \'c\', \'a\', \'a\', \'b\', \'c\', \'a\', \'d\'], \'aba\') == 2 assert max_word_count([\'a\', \'b\', \'c\', \'b\', \'c\'], \'abc\') == 1 assert max_word_count([\'a\', \'a\', \'a\', \'a\'], \'aaaa\') == 1 assert max_word_count([\'a\', \'a\', \'b\', \'b\', \'c\'], \'aaa\') == 0 ``` # Notes: - You may assume that there are no blocks with non-alphabet letters. - Note that forming the word may require several blocks with the same letter.","solution":"from collections import Counter def max_word_count(blocks, word): Determines the maximum number of times the word can be formed using the provided blocks. blocks: list of characters word: string return: integer block_counts = Counter(blocks) word_counts = Counter(word) # Initialize the maximum count to infinity max_count = float(\'inf\') # For each character in the word, compute how many times it is available in the blocks for char, count in word_counts.items(): if block_counts[char] == 0: return 0 else: max_count = min(max_count, block_counts[char] // count) return max_count"},{"question":"You are given a city with n intersections and m bidirectional roads. Each road connects two intersections and has a certain length. There is a city council that wants to implement a new street lighting system. The goal is to install street lights on the roads such that the total length of roads with street lights is minimized while ensuring that there is a way to move between any two intersections using roads that have street lights. Write a program to determine the minimum total length of roads that need to have street lights installed to satisfy the requirement. The first line of input contains two integers n and m (1 le n, m le 10000) — the number of intersections and roads. The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — the endpoints of the road and the length of the road. Output the minimum total length of roads with street lights installed. In the first example, the optimal way is to install street lights on roads with lengths 1, 2, and 2. In the second example, the optimal way is to install street lights only on the shortest road with length 7 since it already connects both intersections.","solution":"def minimum_street_lighting(n, roads): Determine the minimum total length of roads that need to have street lights installed to ensure that there is a way to move between any two intersections. # We will use Kruskal\'s algorithm to find Minimum Spanning Tree (MST) parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x, root_y = find(x), find(y) if root_x != root_y: parent[root_y] = root_x # Sort roads by their lengths roads.sort(key=lambda x: x[2]) total_length = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) total_length += w return total_length"},{"question":"Vasya has an array of n integers. Each integer in the array is given in such a way that all integers in one occurrence of the array are composed of the same digits when rearranged. For example, the integers 123, 231, and 312 have the same digits and will be considered equivalent in this context. Vasya wants to evaluate the number of distinct such equivalence classes in the array. The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the array. Each of the following n lines contains one integer ai (1 ≤ ai ≤ 10^9). Print a single integer — the number of distinct integer groups where each group consists of integers that are equivalent by rearranging their digits. # Examples Input: ``` 3 123 231 312 ``` Output: ``` 1 ``` Input: ``` 4 123 456 231 654 ``` Output: ``` 2 ```","solution":"def count_distinct_equivalent_classes(n, nums): Returns the number of distinct groups of integers that are equivalent by rearranging their digits. Parameters: n (int): The number of integers in the list. nums (list of int): The list of integers. Returns: int: The number of distinct equivalence classes. unique_sorted_reps = set() for num in nums: # Convert number to a sorted tuple of its digits sorted_rep = tuple(sorted(str(num))) unique_sorted_reps.add(sorted_rep) return len(unique_sorted_reps)"},{"question":"Elena loves hiking and exploring nature. She always carries a notebook to write down interesting sequences of natural events she observes. Recently, she noted down some interesting patterns in a sequence of numbers during her hikes. She wants to analyze the sequence further but needs some help from you. Given a sequence of integers, Elena wants to determine the length of the longest contiguous subsequence where the difference between any two consecutive elements is at most 1. Your task is to help Elena by writing a program that, given the sequence of integers, outputs the length of this longest contiguous subsequence. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. - The first line of each test case contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the sequence. - The second line of each test case contains `n` space-separated integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 10^9) — the sequence of integers. The total length of all sequences over all test cases does not exceed 10^6. # Output For each test case, print a single integer — the length of the longest contiguous subsequence where any two consecutive elements differ by at most 1. # Example Input ``` 3 5 4 2 3 3 5 4 10 11 12 13 6 1 2 3 4 5 6 ``` Output ``` 3 4 6 ``` # Explanation In the first test case, the longest contiguous subsequence satisfying the condition is `[2, 3, 3, 4]` with length 3. In the second test case, the entire sequence `[10, 11, 12, 13]` already satisfies the condition. In the third test case, the entire sequence `[1, 2, 3, 4, 5, 6]` also satisfies the condition.","solution":"def longest_contiguous_subsequence(t, test_cases): results = [] for case in test_cases: n = case[0] arr = case[1] if n == 1: results.append(1) continue max_len = 1 current_len = 1 for i in range(1, n): if abs(arr[i] - arr[i-1]) <= 1: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 results.append(max_len) return results"},{"question":"A company is organizing a coding competition which consists of several rounds. Each round, a set of problems is to be solved. The company has a unique way of distributing problems for each round. They have a large pool of problems each with a unique difficulty level from 1 to n, where 1 is the easiest and n is the hardest. For each round, they want to distribute exactly k problems. However, they want these problems to have a well-balanced difficulty distribution. To achieve this, the company selects k problems such that the differences in difficulties of any two selected problems is minimized. Given n (total number of available problems) and k (number of problems to be selected), your task is to determine the list of k problem difficulties that ensures the most balanced difficulty distribution. **Input:** - The first line contains two integers, n and k (1 ≤ k ≤ n ≤ 10^9), the total number of problems and the number of problems to be selected respectively. **Output:** - Output k integers in non-decreasing order representing the difficulty levels of the selected problems. **Examples:** ``` Input: 10 3 Output: 4 5 6 Input: 15 5 Output: 6 7 8 9 10 ``` **Explanation:** In the first example, selecting problems with difficulties 4, 5, and 6 ensures that the differences between difficulties are minimized, providing a balanced set. In the second example, selecting problems with difficulties 6, 7, 8, 9, and 10 ensures a balanced distribution of difficulties among the selected problems.","solution":"def balanced_difficulties(n, k): Returns a list of k integers representing the difficulties of the selected problems. The difficulties are selected to ensure the most balanced distribution. # Calculate the middle point to center the selection middle = (n + 1) // 2 start = middle - (k - 1) // 2 # Ensure that we do not select difficulties beyond the range [1, n] if start < 1: start = 1 elif start + k - 1 > n: start = n - k + 1 return list(range(start, start + k))"},{"question":"In a mysterious land known as Wonderland, there are n uniquely numbered islands connected by m unidirectional bridges. Each bridge has a maximum boat load capacity. Wonderland\'s environment is challenging, and sometimes certain bridges may become impassable due to harsh weather, causing their load capacities to drop to zero. The Wonderland government needs to determine if it\'s possible to travel between two islands with a given minimum boat load. The first line of the input contains two integers n and m (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000), the number of islands and the number of bridges, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ w ≤ 1,000,000) describing a bridge from island u to island v with initial load capacity w. If w is zero, it means the bridge is temporarily impassable due to weather conditions. The next line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. Each of the following q lines contains three integers a, b, and c (1 ≤ a, b ≤ n, 1 ≤ c ≤ 1,000,000), asking whether it\'s possible to travel from island a to island b using bridges that have a current load capacity of at least c. For each query, output \\"YES\\" if it is possible to travel from island a to island b with at least the given minimum boat load. Otherwise, output \\"NO\\".","solution":"from collections import defaultdict, deque def can_travel(graph, n, start, end, min_capacity): visited = set() queue = deque([start]) while queue: current = queue.popleft() if current == end: return True if current not in visited: visited.add(current) for neighbor, capacity in graph[current]: if capacity >= min_capacity and neighbor not in visited: queue.append(neighbor) return False def process_queries(n, m, edges, q, queries): max_capacity = 1000000 graph = defaultdict(list) for u, v, w in edges: if w > 0: graph[u].append((v, w)) results = [] for a, b, c in queries: if can_travel(graph, n, a, b, c): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. You can choose up to `k` different indices and swap the characters at these indices in such a way that the resulting string is in non-decreasing order (i.e., alphabetical order). Write a function to determine if it is possible to make the string sorted in non-decreasing order by performing the allowed swaps. # Input The input consists of two lines: - The first line contains the string `s` (1 ≤ |s| ≤ 50). - The second line contains the integer `k` (0 ≤ k ≤ min(|s|, 100)). # Output Print \\"YES\\" if it is possible to sort the string in non-decreasing order by performing at most `k` swaps. Otherwise, print \\"NO\\". # Sample Input 1 ```plaintext ahbcd 2 ``` # Sample Output 1 ```plaintext YES ``` # Sample Input 2 ```plaintext zxy 1 ``` # Sample Output 2 ```plaintext NO ``` # Explanation In the first example, \\"ahbcd\\" can be sorted with 2 swaps: swap \'h\' and \'a\' and then swap \'a\' and \'b\'. Hence, the output is \\"YES\\". In the second example, no matter which single swap you perform, it\'s not possible to sort the string, thus the output is \\"NO\\".","solution":"def can_sort_with_k_swaps(s, k): Determines if it is possible to sort string `s` in non-decreasing order by performing at most `k` swaps. # Create a sorted version of the string sorted_s = sorted(s) # Count the number of characters that are out of place count_diff = sum(1 for a, b in zip(s, sorted_s) if a != b) # Each swap fixes at most 2 characters required_swaps = (count_diff + 1) // 2 # It\'s possible if the required swaps are less than or equal to k return \\"YES\\" if required_swaps <= k else \\"NO\\""},{"question":"You are working as a software engineer in a company, and your task is to organize the log data generated by the company\'s system. The log data consists of multiple events, each with a unique timestamp. Your goal is to find the longest contiguous subarray where all the timestamps are within a certain range `k`, meaning the difference between the maximum and minimum timestamps in this subarray is less than or equal to `k`. The first line of the input contains two integers `n` and `k` (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 10^9) - the number of timestamps and the maximal allowed range. The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ ti ≤ 10^9) - the list of timestamps. Output a single integer - the length of the longest contiguous subarray where the difference between the maximum and minimum timestamps is ≤ `k`. # Example Input: ``` 8 5 1 2 6 7 9 10 14 18 ``` Output: ``` 4 ``` Explanation: The longest contiguous subarray where the difference between the maximum and minimum timestamps is ≤ 5 is `[6, 7, 9, 10]`, which has a length of 4.","solution":"def longest_subarray_within_range(n, k, timestamps): Returns the length of the longest contiguous subarray where the difference between the maximum and minimum timestamps is less than or equal to k. if n == 0: return 0 left = 0 max_length = 0 min_queue = [] max_queue = [] for right in range(n): while min_queue and timestamps[min_queue[-1]] >= timestamps[right]: min_queue.pop() while max_queue and timestamps[max_queue[-1]] <= timestamps[right]: max_queue.pop() min_queue.append(right) max_queue.append(right) while timestamps[max_queue[0]] - timestamps[min_queue[0]] > k: left += 1 if min_queue[0] < left: min_queue.pop(0) if max_queue[0] < left: max_queue.pop(0) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a grid of size N x M consisting of \'0\'s (empty cells) and \'1\'s (walls), you need to determine the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1). You can move up, down, left, or right, but cannot pass through walls (\'1\'s). In addition, you have a special ability that can transform one \'1\' into a \'0\', which can be used only once during the journey. Your task is to find the minimum number of steps required to reach the bottom-right corner using this ability optimally. If it is not possible to reach the bottom-right corner, output -1. # Input - The first line contains two integers, N and M (2 ≤ N, M ≤ 20), the number of rows and columns in the grid, respectively. - The following N lines each contain M characters (\'0\' or \'1\'), representing the initial grid configuration. # Output - Print a single integer, the minimum number of steps required to reach the bottom-right corner using the special ability optimally, or -1 if it is not possible. # Example Input: ``` 5 5 01100 00010 00010 11110 00000 ``` Output: ``` 8 ``` Input: ``` 3 3 111 111 111 ``` Output: ``` -1 ``` # Explanation: In the first example, the shortest path will transform the \'1\' at position (1, 3) allowing a path from (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4) with 8 steps. In the second example, there is no way to open a path to the bottom-right corner even using the ability.","solution":"from collections import deque def shortest_path_with_ability(grid, n, m): def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0, False)]) # x, y, steps, used_ability visited = set((0, 0, False)) while queue: x, y, steps, used_ability = queue.popleft() if (x, y) == (n-1, m-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if grid[nx][ny] == \'0\' and (nx, ny, used_ability) not in visited: queue.append((nx, ny, steps + 1, used_ability)) visited.add((nx, ny, used_ability)) if grid[nx][ny] == \'1\' and not used_ability and (nx, ny, True) not in visited: queue.append((nx, ny, steps + 1, True)) visited.add((nx, ny, True)) return -1 def min_steps_to_reach_bottom_right(n, m, grid): return shortest_path_with_ability(grid, n, m)"},{"question":"You are given an integer array of length n. There are q queries, each query is a pair of integers l and r. For each query, you need to find and print the sum of all integers in the array from the index l to the index r (inclusive). Assume the array is zero-indexed. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 1000) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines contains two integers l and r (0 ≤ l ≤ r < n) — the indices for each query. Print q integers, each representing the sum of elements from index l to index r, inclusive, for each query. Example: Input: 5 1 2 3 4 5 3 0 2 1 3 0 4 Output: 6 9 15 Explanation: For the first query (0,2), the sum is 1+2+3 = 6. For the second query (1,3), the sum is 2+3+4 = 9. For the third query (0,4), the sum is 1+2+3+4+5 = 15.","solution":"def range_sum(array, queries): Returns a list of sums for each query range in the input array. Parameters: array (list): The list of integers. queries (list of tuples): Each tuple contains two integers l and r representing the range. Returns: list: A list of sums for each query range. # Compute prefix sums prefix_sums = [0] * (len(array) + 1) for i in range(len(array)): prefix_sums[i + 1] = prefix_sums[i] + array[i] results = [] for l, r in queries: results.append(prefix_sums[r + 1] - prefix_sums[l]) return results"},{"question":"Time travel technology has finally been invented and you are tasked with managing the time travel requests at the Time Travel Bureau. Each request is defined by a start year and an end year between which time travel is requested. Travel within the same year is allowed. Your task is to determine the maximum number of non-overlapping time travel requests that can be accommodated. A request [start, end] is considered to overlap with another request [start2, end2] if and only if the intervals [start, end] and [start2, end2] share one or more years. Input: The first line contains an integer n (1 ≤ n ≤ 200000) — the number of time travel requests. Each of the next n lines contains two integers start and end (1 ≤ start ≤ end ≤ 1000000) — denoting the start and end years of a time travel request. Output: Print a single integer — the maximum number of non-overlapping time travel requests that can be accommodated. Example: Input: 4 1 3 2 5 3 4 6 7 Output: 2 Explanation: The requests [1, 3] and [6, 7] are non-overlapping and can be accommodated. Another possible way would be to accommodate [3, 4] and [6, 7] for a total of 2 non-overlapping requests.","solution":"def max_non_overlapping_requests(n, requests): # Sort the requests based on the end year requests.sort(key=lambda x: x[1]) count = 0 last_end_year = -1 for start, end in requests: if start > last_end_year: count += 1 last_end_year = end return count"},{"question":"John and Jessica are playing a game with two sequences of integers. The game involves selecting numbers from each sequence to form two new sequences that highlight the differences between the two original sequences. The problem is to find two new sequences from the original sequences such that: 1. The elements in the two new sequences are the elements present in only one of the original sequences but not both. 2. Both output sequences should maintain the order of appearance as in the respective original sequence. Write a function that receives the two original sequences and outputs the two new sequences. If there are no exclusive elements in either of the sequences, the corresponding new sequence should be empty. **Input Format:** - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in the first sequence. - The second line contains `n` integers, the elements of the first sequence. - The third line contains an integer `m` (1 ≤ m ≤ 1000) — the number of elements in the second sequence. - The fourth line contains `m` integers, the elements of the second sequence. **Output Format:** - Print the elements of the first new sequence in one line, separated by spaces. - Print the elements of the second new sequence in the second line, separated by spaces. If a sequence is empty, output an empty line instead. **Sample Input:** ``` 5 1 2 3 4 5 4 4 5 6 7 ``` **Sample Output:** ``` 1 2 3 6 7 ``` **Explanation:** - The new sequence derived from the first sequence (`1 2 3 4 5`) contains `1 2 3` because `4 5` are also in the second sequence. - The new sequence derived from the second sequence (`4 5 6 7`) contains `6 7` because `4 5` are also in the first sequence.","solution":"def find_exclusive_elements(n, seq1, m, seq2): Returns two sequences that contain elements which are present in only one of the original sequences. Parameters: n (int): Number of elements in the first sequence. seq1 (list of int): First sequence of integers. m (int): Number of elements in the second sequence. seq2 (list of int): Second sequence of integers. Returns: tuple of (list of int, list of int): Two sequences with exclusive elements. set1 = set(seq1) set2 = set(seq2) exclusive_seq1 = [x for x in seq1 if x not in set2] exclusive_seq2 = [x for x in seq2 if x not in set1] return exclusive_seq1, exclusive_seq2"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: Select any two adjacent characters of the string and remove them if they are equal. Your task is to determine the resultant string after performing the operation as many times as possible. For example, if the initial string is \\"abbaca\\", you can remove \\"bb\\" to get \\"aaca\\", then remove \\"aa\\" to get \\"ca\\". The first line of the input contains a single string s (1 ≤ |s| ≤ 2·10^5) — the initial string. Print the resultant string after performing the operation as many times as possible. # Example Input ``` abbaca ``` Output ``` ca ``` Input ``` azxxzy ``` Output ``` ay ```","solution":"def remove_adjacent_duplicates(s): Removes adjacent duplicate characters from the string s as many times as possible. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"Given a rectangular grid representing a maze, where some cells are empty, and others are blocked, your task is to determine if there is a path from the top-left corner to the bottom-right corner. You can only move up, down, left, or right, and you cannot pass through blocked cells. The grid is represented as an `n x m` matrix of ones and zeros, where `1` represents an empty cell, and `0` represents a blocked cell. # Input - The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid. - The next `n` lines each contain `m` integers (either 0 or 1) separated by spaces, representing the grid. # Output - Print `YES` if there is a path from the top-left corner to the bottom-right corner. Otherwise, print `NO`. # Example Input ``` 4 4 1 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 ``` Output ``` YES ``` Explanation ``` The path from top-left to bottom-right could be: (1,1) -> (2,1) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4) ``` Input ``` 3 3 1 0 0 0 1 1 0 0 1 ``` Output ``` NO ``` Explanation ``` There is no path from the top-left to the bottom-right corner. ```","solution":"def is_path_possible(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 1 and not visited[x][y] def dfs(x, y): if x == n-1 and y == m-1: # Reached the bottom-right corner return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny): if dfs(nx, ny): return True return False if grid[0][0] == 0 or grid[n-1][m-1] == 0: return \\"NO\\" visited = [[False] * m for _ in range(n)] if dfs(0, 0): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, find the length of the longest contiguous subarray where each adjacent element has a difference of exactly 1. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the array. The next line contains n integers a_i (1 ≤ a_i ≤ 1000) — the elements of the array. Output the length of the longest contiguous subarray wherein each adjacent pair of elements has a difference of exactly 1. Example: Input: 10 1 2 3 4 5 6 7 8 9 10 Output: 10 Explanation: The entire array is a valid subarray where each adjacent element differs by exactly 1. Thus, the length of the longest subarray is 10.","solution":"def longest_subarray_with_diff_one(arr): Given an array of integers, find the length of the longest contiguous subarray where each adjacent element has a difference of exactly 1. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Adam has a construction project where he needs to build a series of walls using different types of bricks. Each type of brick has a certain height, and Adam wants to build walls of exactly a given height from a selection of bricks. Given an array of integers representing the heights of available bricks and a target height for the wall, determine if it is possible to construct a wall of the exact target height using any combination of the bricks (you can use any brick as many times as needed). Write a function to solve the problem. Function signature: ```python def can_build_wall(brick_heights: List[int], target_height: int) -> bool: ``` # Input - `brick_heights`: a list of integers representing the heights of the bricks, where 1 ≤ len(brick_heights) ≤ 100 and 1 ≤ brick_heights[i] ≤ 105. - `target_height`: an integer representing the target height of the wall, where 1 ≤ target_height ≤ 105. # Output - Return `True` if it is possible to construct the wall of the exact target height using the bricks, otherwise return `False`. # Example ```python can_build_wall([1, 2, 3], 5) # Returns: True can_build_wall([2, 4, 6], 5) # Returns: False can_build_wall([1, 3, 4], 7) # Returns: True can_build_wall([5], 5) # Returns: True can_build_wall([5], 1) # Returns: False ``` # Constraints - You may assume that there are no duplicate heights in the `brick_heights` list.","solution":"from typing import List def can_build_wall(brick_heights: List[int], target_height: int) -> bool: Determines if it\'s possible to construct a wall of the exact target height using given bricks. dp = [False] * (target_height + 1) dp[0] = True for height in range(1, target_height + 1): for brick in brick_heights: if height >= brick: dp[height] = dp[height] or dp[height - brick] return dp[target_height]"},{"question":"A robot is located in an M x N grid. The robot starts at the top-left corner (0, 0) and tries to move to the bottom-right corner (M-1, N-1). The robot can only move either down or right at any point in time. You need to find out the number of unique paths that the robot can take to reach the bottom-right corner. However, the grid has obstacles, represented by a given 2D array `obstacleGrid`. An obstacle and space are marked as `1` and `0` respectively in `obstacleGrid`. The only line contains two integers `M` (1 le M le 1000) and `N` (1 le N le 1000) representing the number of rows and columns of the grid, followed by an `M` x `N` matrix `obstacleGrid`. Output the number of unique paths from the top-left to the bottom-right corner. If there is no path, output `0`. **Example:** Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Input: ``` 3 3 0 1 0 0 1 0 0 0 0 ``` Output: ``` 1 ```","solution":"def uniquePathsWithObstacles(obstacleGrid): Given a grid with obstacles (1) and free spaces (0), returns the number of unique paths from the top-left corner to the bottom-right corner, only moving right or down. :param obstacleGrid: List[List[int]] :return: int M, N = len(obstacleGrid), len(obstacleGrid[0]) if obstacleGrid[0][0] == 1 or obstacleGrid[M-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"You are given a circular array of integers with length n (2 le n le 1000). A circular array is similar to a regular array but with the end connected back to the start. You are asked to perform a series of operations to transform the array into another array of the same length and with the same set of elements. One allowed operation is to cyclically rotate the array by one position to the right, i.e., the last element becomes the first element, and every other element shifts one position to the right. Determine the minimum number of such operations needed to transform the given array into the target array. If it is impossible, return -1. The first line of the input contains a single integer n. The second line contains n space-separated integers representing the initial array. The third line contains n space-separated integers representing the target array. Output a single integer, the minimum number of operations required, or -1 if the transformation is impossible. # Example Input ``` 5 1 2 3 4 5 3 4 5 1 2 ``` Output ``` 3 ``` In this example, rotating the initial array `[1, 2, 3, 4, 5]` three times to the right results in `[3, 4, 5, 1, 2]`. Another example: Input ``` 4 1 2 3 4 1 3 2 4 ``` Output ``` -1 ``` In this case, there is no way to transform the initial array `[1, 2, 3, 4]` into `[1, 3, 2, 4]` using only the allowed operations.","solution":"def min_operations_to_transform(n, initial_array, target_array): Returns the minimum number of cyclic rotations needed to transform initial_array into target_array. If it\'s not possible, returns -1. if sorted(initial_array) != sorted(target_array): return -1 for k in range(n): if initial_array[-k:] + initial_array[:-k] == target_array: return k return -1 # Added the main function to parse input and output the result def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) initial_array = list(map(int, data[1:n+1])) target_array = list(map(int, data[n+1:2*n+1])) result = min_operations_to_transform(n, initial_array, target_array) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game is played in turns and Alice always goes first. Each player can pick any integer from the sequence that hasn\'t been picked yet. The objective for Alice is to maximize the sum of the integers she picks, while Bob tries to minimize her sum. Both players play optimally. You are given the sequence of integers. Determine the maximum sum that Alice can collect if both play optimally. The first line of the input contains a single integer n (1 ≤ n ≤ 105) — the number of integers in the sequence. The second line contains n space-separated integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the sequence of integers. Output a single integer — the maximum sum that Alice can collect if both play optimally. In the first sample case, Alice and Bob will go as follows: - Alice picks 5, sum = 5. - Bob picks 3. - Alice picks 2, sum = 7. - Bob picks 1. - Alice picks -1, sum = 6. In the second sample case, Alice and Bob will go as follows: - Alice picks 8, sum = 8. - Bob picks 7. - Alice picks 6, sum = 14. - Bob picks 5. - Alice picks 4, sum = 18. - Bob picks 3. - Alice picks 2, sum = 20. - Bob picks 1. - Alice picks 0, sum = 20.","solution":"def max_sum_alice_can_collect(n, sequence): Returns the maximum sum Alice can collect if both play optimally. Parameters: n (int): Number of integers in the sequence. sequence (list of int): The sequence of integers. Returns: int: The maximum sum Alice can collect. # Sort the sequence in descending order sequence.sort(reverse=True) # Alice will take the first, third, fifth, etc. alice_sum = sum(sequence[i] for i in range(0, n, 2)) return alice_sum # Example usage n = 5 sequence = [5, 3, 2, 1, -1] print(max_sum_alice_can_collect(n, sequence)) # Output: 6 n = 9 sequence = [8, 7, 6, 5, 4, 3, 2, 1, 0] print(max_sum_alice_can_collect(n, sequence)) # Output: 20"},{"question":"You are given an array of positive integers representing the heights of a set of buildings, arranged from left to right. Each building has a width of 1 unit. A contiguous set of buildings can form a larger rectangular skyline. Your task is to find the largest rectangular area possible in this skyline. The first line of input contains an integer n (1 ≤ n ≤ 105), representing the number of buildings. The second line contains n integers separated by spaces, where each integer represents the height of a building and is a positive integer that does not exceed 104. Output a single integer, which is the area of the largest rectangle that can be formed by these contiguous buildings. Example: Input: 6 2 1 5 6 2 3 Output: 10 Explanation: The largest rectangle can be formed by buildings at indices 2, 3, and 4 with heights 5, 6, and 2 respectively.","solution":"def largest_rectangle_area(heights): Function to compute the largest rectangle area in a histogram. :param heights: List[int] - List of building heights. :return: int - Largest possible rectangle area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"There are `n` different types of gems and a jeweler has to craft beautiful necklaces using these gems. Each type of gem can be represented by a unique integer from `1 to n`. In the process of crafting, the jeweler must build a symmetrical necklace by stringing gems together. A symmetrical necklace is defined as one in which the sequence of gem types reads the same forwards and backwards. For example, `[1, 2, 3, 2, 1]` is a symmetrical necklace. Given an integer `n`, representing the total number of different gem types, your task is to find the number of distinct symmetrical necklaces (of any length) that can be crafted using exclusively these `n` types of gems. A necklace with gem types `a, b, ...` is considered distinct from another if the sequences of gem types are different. The length of the necklace can vary and a necklace can be as short as containing just one gem. The first line contains one integer `n` (1 le n le 10^5) — the number of different gem types. Print a single integer — the number of distinct symmetrical necklaces that can be crafted using the `n` types of gems. Examples: Input: 3 Output: 7 Input: 5 Output: 31 Note: For `n = 3`, the distinct symmetrical necklaces are: `[1], [2], [3], [1, 1], [2, 2], [3, 3], [1, 2, 1]`. For `n = 5`, the distinct symmetrical necklaces include: `[1], [2], [3], [4], [5], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [1, 2, 1], [1, 3, 1], [1, 4, 1], [1, 5, 1]`, and many more.","solution":"def count_symmetrical_necklaces(n): Returns the number of distinct symmetrical necklaces that can be crafted using n different types of gems. return (2**(n+1) - 1)"},{"question":"You are given an integer array `nums` consisting of `n` elements. Your task is to count the number of pairs `(i, j)` such that `0 <= i < j < n` and `nums[i]` is equal to `nums[j]`. The first line contains an integer `n` (1 ≤ n ≤ 3 * 10^5), which represents the number of elements in the array `nums`. The second line contains `n` integers `nums[1], nums[2], ..., nums[n]` (1 ≤ nums[i] ≤ 10^9), separated by spaces. Print a single integer — the number of pairs `(i, j)` such that `0 <= i < j < n` and `nums[i]` is equal to `nums[j]`. In the first sample test, the array `nums` has three pairs that satisfy the condition: (i=0, j=3), (i=1, j=4), and (i=3, j=5). In the second sample test, all the elements in the array are unique, thus there are no pairs satisfying the condition.","solution":"def count_pairs(nums): Count the number of pairs (i, j) such that 0 <= i < j < n and nums[i] == nums[j]. :param nums: List of integers :return: Number of pairs from collections import defaultdict count_map = defaultdict(int) pair_count = 0 for num in nums: if num in count_map: pair_count += count_map[num] count_map[num] += 1 return pair_count"},{"question":"You are given a list of n integers, and you need to find the k-th smallest sum of any two distinct integers in the list. The task is to write a function that receives the list of integers and the integer k as input and returns the k-th smallest sum of any two distinct integers in the list. The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of integers. The second line contains n integers separated by spaces, representing the elements of the list. The third line contains a single integer k (1 ≤ k ≤ n*(n-1)/2) — the position of the desired sum in the sorted list of all possible sums of two distinct integers. Output a single integer — the k-th smallest sum of any two distinct integers from the list. Example: Input: 5 1 3 5 7 9 3 Output: 8 Explanation: All the possible sums are [4, 6, 8, 10, 12, 8, 10, 12, 10, 12], sorted these sums are [4, 6, 8, 8, 10, 10, 10, 12, 12, 12], and the 3rd smallest sum is 8.","solution":"def kth_smallest_sum(n, numbers, k): import heapq # Create a list to store all possible sums sums = [] # Generate all possible sums of two distinct integers for i in range(n): for j in range(i + 1, n): sums.append(numbers[i] + numbers[j]) # Use heapq to find the k-th smallest sum heapq.heapify(sums) kth_smallest = heapq.nsmallest(k, sums)[-1] return kth_smallest"},{"question":"Evelyn is working as a software developer for a company that deals with network security. She is tasked with developing a system to detect anomalies in network traffic. One aspect of her task is to analyze packets of data being transferred over the network. She needs to find sequences of packets that are potentially malicious based on their repetition pattern. Given a string of packets represented by a lowercase Latin letters string `s` of length `n`, and an integer `p`, Evelyn needs to identify if there\'s any non-empty substring of `s` of length exactly `p` that appears more than once in the string. Write a function that determines whether such a substring exists. The first line contains an integer `n` (1 ≤ n ≤ 200000) — the length of the string `s`. The second line contains a string `s` of length `n`. The third line contains an integer `p` (1 ≤ p ≤ n). Output \\"YES\\" if there is a substring of length `p` that appears more than once; otherwise, output \\"NO\\". **Examples:** Input: ``` 10 abacabadab 3 ``` Output: ``` YES ``` Input: ``` 7 abcdefg 2 ``` Output: ``` NO ```","solution":"def find_repeated_substring(n, s, p): Determines whether there exists any non-empty substring of length exactly p that appears more than once in the string s. Args: n : int : the length of the string s s : str : the string to analyze p : int : the length of the substring to check Returns: str : \\"YES\\" if there is a substring of length p that appears more than once, otherwise \\"NO\\" seen = set() for i in range(n - p + 1): substring = s[i:i+p] if substring in seen: return \\"YES\\" seen.add(substring) return \\"NO\\""},{"question":"You\'re given an array of integers a[1 dots n]. You can perform the following operation any number of times (including zero): - Choose an integer i (1 le i < n), remove the elements a_i and a_{i+1} from the array and replace them with their sum (i.e., replace elements at indices i and i+1 by a_i + a_{i+1}). Determine if it is possible to make the array contain only one integer by using the above operation repeatedly, such that this integer is divisible by a given integer k. The first line contains two space-separated integers n (1 le n le 100,000) and k (1 le k le 10^9). The second line contains n space-separated integers a[1], a[2], dots, a[n] (1 le a[i] le 10^9). Output \\"YES\\" if it is possible to perform the operations such that the final number is divisible by k, otherwise output \\"NO\\". # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` YES ``` Input ``` 4 7 2 7 4 10 ``` Output ``` NO ```","solution":"def can_sum_to_divisible(n, k, arr): Returns \\"YES\\" if it is possible to sum the array into a single number divisible by k, otherwise returns \\"NO\\". total_sum = sum(arr) if total_sum % k == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A company maintains a list of employees and their manager relationships. Each employee has exactly one manager except for the CEO who does not have any manager. Your task is to write a function that, given the list of employee-manager pairs and a query employee, finds the number of distinct levels of managers above that employee up to the CEO. For example, consider the following employee-manager pairs: ``` [ (\\"A\\", \\"B\\"), // A is managed by B (\\"B\\", \\"C\\"), // B is managed by C (\\"C\\", \\"D\\"), // C is managed by D (\\"D\\", \\"E\\"), // D is managed by E ] ``` Query: A Output: 4 (A\'s manager is B, B\'s manager is C, C\'s manager is D, D\'s manager is E) The first input line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of employee-manager pairs. The following n lines each contain two strings — the employee and their manager. The last line contains a single string which is the name of the query employee. Output a single integer — the number of distinct levels of managers above the query employee. If the query employee is the CEO or does not exist in the employee-manager list, the output should be 0. You can assume there are no cyclic dependencies in the input data.","solution":"def count_manager_levels(employee_manager_pairs, query_employee): Returns the number of distinct levels of managers above the given query_employee up to the CEO. employee_manager_pairs: List of tuples where each tuple contains (employee, manager). query_employee: The employee for which the manager levels count is to be found. manager_dict = {} for emp, mngr in employee_manager_pairs: manager_dict[emp] = mngr levels = 0 current_employee = query_employee while current_employee in manager_dict: current_employee = manager_dict[current_employee] levels += 1 return levels"},{"question":"A mysterious old cathedral in the city has a lot of stained glass windows, which are especially beautiful during daylight. Each window can be described as a grid of cells, where each cell can either let the light pass through or block it. The monks at the cathedral are interested in knowing the largest rectangle of cells that can pass light. Given the cathedral\'s window grid that has n rows and m columns (1 ≤ n, m ≤ 1000), where \'1\' indicates a cell that lets the light pass and \'0\' indicates a cell that blocks light, calculate the area of the largest rectangle made up of only \'1\'s. The first input line contains two integers n and m, denoting the number of rows and columns. The following n lines each contain a string of m characters, where each character is either \'1\' or \'0\', indicating whether the respective cell lets light pass or blocks it. In the only output line, print a single integer — the area of the largest rectangle for which all cells can pass light. # Example **Input:** ``` 4 5 10100 10111 11111 10010 ``` **Output:** ``` 6 ``` # Explanation For the example input, the largest rectangle of cells that can pass light has an area of 6.","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(grid): if not grid: return 0 max_area = 0 histogram = [0] * len(grid[0]) for row in grid: for index in range(len(row)): if row[index] == \'0\': histogram[index] = 0 else: histogram[index] += 1 max_area = max(max_area, max_histogram_area(histogram)) return max_area"},{"question":"You are given an array of integers, and you need to find the minimum number of operations required to make the array elements equal. In one operation, you can add or subtract 1 from any element of the array. The first line contains an integer n (1 leq n leq 10^5) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. Print an integer — the minimum number of operations required to make all the elements equal. **Example**: **Input**: ``` 5 1 2 3 4 5 ``` **Output**: ``` 6 ```","solution":"def min_operations_to_equal_elements(n, array): Given an array of integers, find the minimum number of operations required to make all elements equal. Parameters: n (int): the size of the array array (list of int): the array of integers Returns: int: the minimum number of operations required array.sort() median = array[n // 2] min_operations = sum(abs(x - median) for x in array) return min_operations"},{"question":"Sophie works as a librarian and wants to organize the books in a special way. The library is set up like a grid with dimensions m x n, and each book has a unique numerical identifier that ranges from 1 to m*n. Sophie wants to arrange the books such that the identifier numbers in the grid follow a specific pattern: they must form a spiral starting from the top-left corner and winding clockwise towards the center. Given the dimensions m and n of the grid, create a function that generates and returns a 2D list representing the grid with the book identifiers arranged in the described spiral pattern. # Function Signature ```python def generate_spiral_matrix(m: int, n: int) -> List[List[int]]: ``` # Input - `m` (1 ≤ m ≤ 1000): The number of rows of the grid. - `n` (1 ≤ n ≤ 1000): The number of columns of the grid. # Output - A 2D list representing the m x n grid filled with numbers from 1 to m*n in a clockwise spiral pattern. # Example ```python assert generate_spiral_matrix(3, 3) == [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] assert generate_spiral_matrix(4, 3) == [ [1, 2, 3], [10, 11, 4], [9, 12, 5], [8, 7, 6] ] ``` # Note - The function should be efficient in both time and space complexity to handle the upper limits of the input constraints. - The grid should be filled in a spiral order starting from the top-left cell and moving in a clockwise direction.","solution":"from typing import List def generate_spiral_matrix(m: int, n: int) -> List[List[int]]: matrix = [[0] * n for _ in range(m)] top, bottom, left, right = 0, m - 1, 0, n - 1 num = 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are given a grid with dimensions M x N (1 ≤ M, N ≤ 100). Some cells in the grid are obstacles represented by \'#\', while others are empty represented by \'.\'. You start at the top-left corner of the grid (1, 1) and need to reach the bottom-right corner (M, N). You can only move right or down, and you cannot move through obstacles. You must find the number of unique paths from the top-left corner to the bottom-right corner without hitting any obstacles. Write a function to count the number of unique paths. The function prototype should be as follows: ```python def count_unique_paths(grid: List[List[str]]) -> int: # implementation here ``` # Input - `grid`: a list of M lists, each list containing N characters, where each character is either `\'.\'` or `\'#\'`. # Output - Return an integer representing the number of unique paths from the top-left corner to the bottom-right corner. # Example ```python grid = [ [\'.\', \'.\', \'.\', \'#\'], [\'#\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\', \'.\'] ] result = count_unique_paths(grid) print(result) # Output should be 2 ``` # Explanation In the provided example grid, there are 2 valid paths: 1. (1,1) -> (1,2) -> (1,3) -> (2,2) -> (3,2) -> (3,3) -> (3,4) -> (4,4) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) -> (4,4) Note: Ensure your solution handles edge cases, such as when there is no path due to obstacles or when the grid dimensions are minimum (1x1).","solution":"def count_unique_paths(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles. :param grid: List[List[str]] - The grid representation containing \'.\' for empty spaces and \'#\' for obstacles. :return: int - The number of unique paths from (1,1) to (M,N). M = len(grid) N = len(grid[0]) # If the start or end cell is an obstacle, there are no paths. if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return 0 dp = [[0 for _ in range(N)] for _ in range(M)] # Initialize the starting point. dp[0][0] = 1 # Fill the dp table for i in range(M): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"An ancient city has a series of water reservoirs connected by a network of aqueducts. Each aqueduct is a bidirectional pipe that allows water to flow between two reservoirs. The network ensures that there is a path to travel between every pair of reservoirs, but removing any single pipe would disconnect some parts of the network. The city management wants to ensure the safety of the water supply. A reservoir is deemed critical if it is connected to the rest of the network via a single aqueduct. The management plans to prioritize monitoring and maintaining these critical reservoirs. Your task is to determine the number of critical reservoirs based on the provided network description. The first line of the input contains an integer N (2 ≤ N ≤ 1000) – the number of reservoirs in the city. The next N - 1 lines describe the aqueducts between the reservoirs. Each of the N - 1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ N) indicating that there is a bidirectional aqueduct between the reservoirs u and v. It is guaranteed that every two reservoirs are connected by a path of aqueducts, and that each aqueduct connects a different pair of reservoirs. Output a single integer denoting the number of critical reservoirs. For example, in the first example, only reservoirs 2, 3, and 5 are connected by a single aqueduct. Example 1: ``` 5 1 2 1 3 1 4 4 5 ``` Output: ``` 3 ``` Example 2: ``` 4 1 2 1 3 3 4 ``` Output: ``` 2 ```","solution":"def count_critical_reservoirs(n, aqueducts): # Create an adjacency list for the graph from collections import defaultdict graph = defaultdict(list) for u, v in aqueducts: graph[u].append(v) graph[v].append(u) # Count critical reservoirs critical_count = 0 for reservoir in range(1, n + 1): if len(graph[reservoir]) == 1: critical_count += 1 return critical_count"},{"question":"The kingdom of Farland has a unique postal delivery system. Every day, the postal service must deliver exactly `n` parcels, and each worker can carry at most `k` parcels. However, there\'s a twist. All workers must deliver parcels exactly in pairs (i.e., two workers together). Help the Farland postal service determine the maximum number of pairs of workers required to deliver all `n` parcels under the given conditions. For example, if `n = 10` and `k = 3`, then each worker can carry a maximum of 3 parcels. So, the pairs can collectively carry 6 parcels (since each pair consists of 2 workers, and each worker can carry 3 parcels). Therefore, the service can deliver 10 parcels with two pairs and 2 additional workers (one pair + one solo worker). The first line of input contains an integer `t` (1 ≤ t ≤ 10000), the number of test cases. Each test case consists of two integers `n` (1 ≤ n ≤ 10^9) and `k` (1 ≤ k ≤ 10^9). For each test case, output the maximum number of pairs of workers required to deliver all the parcels. Example Input: ``` 2 10 3 15 4 ``` Example Output: ``` 2 2 ```","solution":"def max_parcel_pairs(t, test_cases): results = [] for n, k in test_cases: max_parcels_per_pair = 2 * k full_pairs = n // max_parcels_per_pair remainder = n % max_parcels_per_pair if remainder == 0: results.append(full_pairs) else: results.append(full_pairs + 1) return results"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation on the string until it becomes empty: 1. Choose a non-empty substring \\"t\\" of the current string. 2. Take another empty string \\"b\\" and append each character of \\"t\\" in reverse order to \\"b\\". 3. Remove the substring \\"t\\" from the original string. Your task is to find the lexicographically smallest string \\"b\\" that can be obtained by applying the above operation until the original string becomes empty. The first line of input contains a single integer n (1 le n le 10^5), the length of the string. The second line contains the string of length n. Output the lexicographically smallest string that can be constructed by continuously applying the above operation. # Example Input: ``` 4 bcda ``` Output: ``` adcb ``` Input: ``` 5 abcde ``` Output: ``` edcba ``` # Explanation In the first example, the string can be broken down and reversed to yield the sequence \'a\', \'d\', \'c\', \'b\', which is lexicographically smallest. In the second example, the smallest lexicographical order can be achieved by reversing and appending the entire string \'abcde\', resulting in \'edcba\'.","solution":"def lexicographically_smallest_string(n, s): Returns the lexicographically smallest string that can be obtained by reversing substrings and removing them until the original string becomes empty. # Initialize the result string result = [] # Iterate through each character in the string for char in s: # Insert each character at the beginning of result list to simulate reverse order result.insert(0, char) # Return the joined result list as a string return \'\'.join(result)"},{"question":"Given a large text consisting of lowercase English letters, determine the number of distinct palindromic substrings it contains. A substring is palindromic if it reads the same backwards as forwards. Here’s an example of how to calculate the distinct palindromic substrings in a given text. Suppose the text is \\"ababa\\", the distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". There are 5 distinct palindromic substrings in this text. The input consists of a single line containing a string s of length n (1 ≤ n ≤ 10^5). Output a single integer, the number of distinct palindromic substrings. # Example Input ababa Output 5 Input abcd Output 4","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given text. n = len(s) palindromes = set() def extend_palindrome(left, right): while left >= 0 and right < n and s[left] == s[right]: palindromes.add(s[left:right+1]) left -= 1 right += 1 for i in range(n): extend_palindrome(i, i) # Odd length palindromes extend_palindrome(i, i + 1) # Even length palindromes return len(palindromes)"},{"question":"The town of Graphville has a peculiar connectivity test system to ensure that its electrical network is robust. The town\'s power grid is represented as an undirected graph with n nodes and m edges. The objective of the test is to determine if the power grid is highly connected such that for any pair of nodes (u, v), there should exist at least two edge-disjoint paths connecting them. An edge-disjoint path means that the paths do not share any edges but may share vertices. The power grid passes the test if, for every pair of nodes, there are two or more edge-disjoint paths connecting them. If the power grid fails the test for at least one pair of nodes, it fails the entire test. Your task is to write a program that checks if the power grid passes the connectivity test. The input consists of: - The first line contains two integers n and m (2 le n le 1000, 1 le m le 5000) — the number of nodes and the number of edges, respectively. - The next m lines each contain two integers u and v (1 le u, v le n, u neq v) representing an undirected edge between nodes u and v. The output should be: - Print \\"YES\\" (without quotes) if the grid passes the connectivity test. - Print \\"NO\\" (without quotes) otherwise. Example Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Example Output: ``` YES ``` Example Input: ``` 4 3 1 2 2 3 3 4 ``` Example Output: ``` NO ``` Note: Ensure your solution is efficient to handle the given constraints.","solution":"from collections import defaultdict, deque def check_high_connectivity(n, m, edges): def bfs(source, target, adj): queue = deque([source]) visited = [False] * (n + 1) visited[source] = True parent = {source: None} while queue: node = queue.popleft() if node == target: break for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node queue.append(neighbor) if target not in parent: return None path = [] node = target while node is not None: path.append(node) node = parent[node] path.reverse() return path adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) for source in range(1, n + 1): for target in range(source + 1, n + 1): path1 = bfs(source, target, adj) if not path1: return \\"NO\\" for u, v in zip(path1[:-1], path1[1:]): adj[u].remove(v) adj[v].remove(u) path2 = bfs(source, target, adj) if not path2: return \\"NO\\" for u, v in zip(path1[:-1], path1[1:]): adj[u].append(v) adj[v].append(u) return \\"YES\\""},{"question":"You are given an array of integers representing the heights of different trees in a line. Each tree grows by exactly 1 unit per day. Your task is to determine the earliest day when no two trees have the same height. The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of trees. The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) — the initial heights of the trees. Return the earliest day when no two trees have the same height. If all tree heights are already distinct on day 0, return 0. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of trees. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) — the initial heights of the trees. # Output - Output a single integer — the earliest day when no two trees have the same height. # Example Input ``` 4 1 2 2 3 ``` Output ``` 2 ``` # Explanation On Day 0: Heights are [1, 2, 2, 3] — Not unique. On Day 1: Heights are [2, 3, 3, 4] — Not unique. On Day 2: Heights are [3, 4, 4, 5] — Not unique. On Day 3: Heights are [4, 5, 5, 6] — Not unique. On Day 4: Heights are [5, 6, 6, 7] — Not unique. On Day 5: Heights are [6, 7, 7, 8] — Not unique. On Day 6: Heights are [7, 8, 8, 9] — Not unique. On Day 7: Heights are [8, 9, 9, 10] — Not unique. On Day 8: Heights are [9, 10, 10, 11] — Not unique. On Day 9: Heights are [10, 11, 11, 12] — Not unique. On Day 10: Heights are [11, 12, 12, 13] — Not unique. On Day 11: Heights are [12, 13, 13, 14] — Not unique. On Day 12: Heights are [13, 14, 14, 15] — Not unique. On Day 13: Heights are [14, 15, 15, 16] — Not unique. On Day 14: Heights are [15, 16, 16, 17] — Not unique. On Day 15: Heights are [16, 17, 17, 18] — Not unique. On Day 16: Heights are [17, 18, 18, 19] — Not unique. On Day 17: Heights are [18, 19, 19, 20] — Not unique. On Day 18: Heights are [19, 20, 20, 21] — Not unique. On Day 19: Heights are [20, 21, 21, 22] — Not unique. On Day 20: Heights are [21, 22, 22, 23] — Not unique. On Day 21: Heights are [22, 23, 23, 24] — Not unique. On Day 22: Heights are [23, 24, 24, 25] — Not unique. On Day 23: Heights are [24, 25, 25, 26] — Not unique. On Day 24: Heights are [25, 26, 26, 27] — Not unique. On Day 25: Heights are [26, 27, 27, 28] — Not unique. On Day 26: Heights are [27, 28, 28, 29] — Not unique. On Day 27: Heights are [28, 29, 29, 30] — Not unique. On Day 28: Heights are [29, 30, 30, 31] — Not unique. On Day 29: Heights are [30, 31, 31, 32] — Not unique. On Day 30: Heights are [31, 32, 31, 33] — Not unique. On Day 31: Heights are [32, 33, 32, 34] — Not unique. On Day 32: Heights are [33, 34, 33, 35] — Not unique. On Day 33: Heights are [34, 35, 34, 36] — Not unique. On Day 34: Heights are [35, 36, 35, 37] — Not unique. On Day 35: Heights are [36, 37, 36, 38] — Not unique. On Day 36: Heights are [37, 38, 37, 39] — Not unique. On Day 37: Heights are [38, 39, 38, 40] — Not unique. Largebut游戲能款款大大將款款款將大大大有有有有大將有ылатын\\"] Hope you understand the explanation from the detailed possible stepwise calculation provided","solution":"def earliest_unique_heights_day(n, heights): sorted_heights = sorted(heights) days_needed = 0 for i in range(1, n): if sorted_heights[i] <= sorted_heights[i - 1]: days_needed += (sorted_heights[i - 1] + 1 - sorted_heights[i]) sorted_heights[i] = sorted_heights[i - 1] + 1 return days_needed"},{"question":"Aman loves solving problems related to prime numbers. He recently learned about twin primes and got curious. A twin prime is a prime number that has either a difference of 2 lower and/or 2 higher prime numbers. For example, (3, 5) and (11, 13) are twin primes. Aman wants to find all twin primes in a given range. Help Aman by providing an efficient solution. Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 10^5). Each test case contains two integers, l and r (1 le l le r le 10^6), the range within which you need to find all twin primes. Print the twin prime pairs for each test case. If there are no twin primes in the given range, print \\"No twin primes\\". Each twin prime pair should be printed in the format \\"(p1, p2)\\". It is guaranteed that the sum of all ranges in all test cases does not exceed 10^7. Example: ``` Input: 2 1 10 11 20 Output: (3, 5) (5, 7) No twin primes (11, 13) (17, 19) ``` In the first test case, (3, 5) and (5, 7) are the twin primes within the range 1 to 10. In the second test case, (11, 13) and (17, 19) are the twin primes within the range 11 to 20.","solution":"def sieve_of_eratosthenes(max_num): Generates a list of booleans representing primality of numbers from 0 to max_num is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for start in range(2, int(max_num**0.5) + 1): if is_prime[start]: for multiple in range(start*start, max_num + 1, start): is_prime[multiple] = False return is_prime def find_twin_primes(l, r, is_prime): twin_primes = [] prev_prime = -1 for num in range(l, r + 1): if is_prime[num]: if prev_prime != -1 and num - prev_prime == 2: twin_primes.append((prev_prime, num)) prev_prime = num return twin_primes def solve(t, ranges): max_num = 10**6 is_prime = sieve_of_eratosthenes(max_num) results = [] for l, r in ranges: twin_primes = find_twin_primes(l, r, is_prime) if twin_primes: results.append(twin_primes) else: results.append(\\"No twin primes\\") return results def format_results(results): formatted_results = [] for result in results: if result == \\"No twin primes\\": formatted_results.append(result) else: for pair in result: formatted_results.append(f\\"({pair[0]}, {pair[1]})\\") return formatted_results"},{"question":"Alex has a passion for competitive programming and often participates in contests. Recently, he encountered a problem involving arrays. He needs to perform several operations on an initially empty array by following a set of instructions. Each instruction is either adding an element to the array or querying for the maximum element of a certain subarray. The two types of operations are represented as follows: 1. `+x` (adding the element `x` to the end of the array) 2. `?l r` (querying for the maximum element in the subarray from index `l` to `r` inclusive, 1-indexed) Given an array of instructions, process each instruction in the order given and return the results of all queries. The input format is: - The first line contains a single integer `m` (1 ≤ `m` ≤ 100,000) — the number of instructions. - Each of the next `m` lines contains one instruction either in the form `+x` (1 ≤ `x` ≤ 1,000,000) or `?l r` (1 ≤ `l` ≤ `r` ≤ current length of the array). Output: - For each query instruction `?l r`, output the maximum element in the specified subarray on a new line. For example: Input: ``` 6 +1 +3 +5 ?1 3 +2 ?2 4 ``` Output: ``` 5 5 ``` In this example, after processing all instructions, the array transformations and queries result in the following steps: 1. Add 1 -> `[1]` 2. Add 3 -> `[1, 3]` 3. Add 5 -> `[1, 3, 5]` 4. Query max between indices 1 and 3 -> `5` 5. Add 2 -> `[1, 3, 5, 2]` 6. Query max between indices 2 and 4 -> `5`","solution":"def process_instructions(instructions): Processes a list of instructions to add elements to an array or query for the maximum element in a subarray. Parameters: instructions (list): A list of instructions, where each instruction is either \\"+x\\" for adding or \\"?l r\\" for querying. Returns: list: A list of results for each query instruction. array = [] results = [] for instruction in instructions: if instruction.startswith(\'+\'): # Add element to the end of the array _, x = instruction.split(\'+\') array.append(int(x)) elif instruction.startswith(\'?\'): # Query for maximum element in subarray _, lr = instruction.split(\'?\') l, r = map(int, lr.split()) # Convert 1-indexed to 0-indexed subarray = array[l-1:r] results.append(max(subarray)) return results"},{"question":"Molly and her friends are participating in a relay race. The race track is represented as a straight line with certain fixed start and end points. Each member of the team runs a segment of the track and hands over the baton to the next runner at specific positions on the track. However, the relay race rules state that each runner can only run distances which are multiples of a given integer \\"d\\". Molly and her friends need your help to determine if it is possible for all runners to run their respective segments of the track in such a way and complete the relay race according to the rules. The track has a length of \\"L\\" and the positions where each of the \\"n\\" runners starts and ends their segments is given as an array. Your task is to determine if it is possible for each of the segments to be a multiple of \\"d\\". You are given: - An integer \\"L\\" — the total length of the track (1 ≤ L ≤ 10^5) - An integer \\"d\\" — the allowed distance multiple (1 ≤ d ≤ 100) - An integer \\"n\\" — the number of runners (1 ≤ n ≤ 1000) - An array \\"positions\\" of length \\"n+1\\" — the starting and ending positions of each segment (0 ≤ positions[i] ≤ L) Print \\"YES\\" if the relay race can be completed according to the rules, otherwise print \\"NO\\". # Example Input: ``` L = 10 d = 2 n = 3 positions = [0, 2, 6, 10] ``` Output: ``` YES ``` Explanation: - The segments are [0, 2], [2, 6], and [6, 10]. - All segments have lengths that are multiples of 2. In the second example, Input: ``` L = 10 d = 3 n = 3 positions = [0, 3, 6, 10] ``` Output: ``` NO ``` Explanation: - The segments are [0, 3], [3, 6], and [6, 10]. - The segment [6, 10] is not a multiple of 3.","solution":"def can_complete_relay(L, d, n, positions): Determines if the relay race can be completed with segments that are multiples of d. Parameters: L (int): The total length of the track. d (int): The allowed distance multiple. n (int): The number of runners. positions (list of int): The starting and ending positions of each segment. Returns: str: \\"YES\\" if the relay race can be completed according to the rules, otherwise \\"NO\\". for i in range(n): if (positions[i+1] - positions[i]) % d != 0: return \\"NO\\" return \\"YES\\""},{"question":"Imagine you are responsible for managing a large network of servers. Each server can perform a specific task and is connected to other servers through a series of one-way communication channels. The network can be represented as a directed acyclic graph (DAG), where each node represents a server and each edge represents a communication channel. To ensure efficiency, you need to determine the longest path of communication from any server in the network. Given a DAG with n servers and m directed communication channels, your task is to write a program that finds the length of the longest path in the graph. The length of a path is defined as the number of edges in the path. Input: - The first line of the input contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) — the number of servers (nodes) and the number of communication channels (edges) respectively. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating a directed edge from server u to server v. Output: - Print a single integer — the length of the longest path in the directed acyclic graph. Example: Input: 6 6 1 2 2 3 3 4 1 5 5 6 6 4 Output: 4 In the sample, the longest path goes from server 1 -> 2 -> 3 -> 4, with a length of 3 edges, or from server 1 -> 5 -> 6 -> 4, with a length of 3 edges. Thus, the longest path length is 3.","solution":"from collections import deque, defaultdict def find_longest_path(n, m, edges): Finds the length of the longest path in a directed acyclic graph (DAG). :param n: Number of servers (nodes) :param m: Number of communication channels (edges) :param edges: List of tuples representing the directed edges (u, v) :return: Length of the longest path # Build the graph and in-degree count graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Topological sort using Kahn\'s algorithm topo_order = [] queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Find the longest path using DP dist = [0] * (n + 1) for node in topo_order: for neighbor in graph[node]: if dist[neighbor] < dist[node] + 1: dist[neighbor] = dist[node] + 1 return max(dist) # Example usage if __name__ == \\"__main__\\": n, m = 6, 6 edges = [ (1, 2), (2, 3), (3, 4), (1, 5), (5, 6), (6, 4) ] print(find_longest_path(n, m, edges)) # Output: 3"},{"question":"Twilight Sparkle loves solving puzzles, and she has found an ancient game called \\"Magic Grid\\" in a worn-out book. The game consists of an n x m grid filled with numbers. The goal of the game is to start at the top-left corner of the grid and move to the bottom-right corner. One can only move either to the right or downward at any point in time. The challenge is to find the number of different paths from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is divisible by a given integer k. Given the grid dimensions n and m, the grid itself, and the integer k, your task is to calculate the number of such valid paths. The first input line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 100). The next n lines contain m integers each, representing the numbers in the grid (0 ≤ grid[i][j] ≤ 100). Output a single integer, the number of paths from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is divisible by k. Since the number of paths can be very large, return it modulo 10^9+7. Example: Input: 3 3 3 1 2 3 4 5 6 7 8 9 Output: 2 Explanation: There are two paths where the sum is divisible by 3: - 1 → 2 → 3 → 6 → 9 (sum = 21) - 1 → 4 → 7 → 8 → 9 (sum = 29) In both paths, the sum of the numbers is divisible by 3.","solution":"MOD = 10**9 + 7 def magic_grid_paths(n, m, k, grid): # Initialize a 3D DP array dp = [[[0]*k for _ in range(m)] for _ in range(n)] # Set the starting point dp[0][0][grid[0][0] % k] = 1 for i in range(n): for j in range(m): for r in range(k): if dp[i][j][r] != 0: if i + 1 < n: new_r = (r + grid[i+1][j]) % k dp[i+1][j][new_r] = (dp[i+1][j][new_r] + dp[i][j][r]) % MOD if j + 1 < m: new_r = (r + grid[i][j+1]) % k dp[i][j+1][new_r] = (dp[i][j+1][new_r] + dp[i][j][r]) % MOD return dp[n-1][m-1][0] # Example usage: # n, m, k = 3, 3, 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(magic_grid_paths(n, m, k, grid)) # Output: 2"},{"question":"You are given a grid with m rows and n columns. Each cell in the grid is numbered from 1 to mn. Initially, all cells are unoccupied. You need to perform q queries of the following two types: 1. \\"FENCE x y\\" - place a fence at cell (x, y). If the cell is already occupied by a fence, no operation is performed. 2. \\"CHECK x y\\" - check if it is possible to reach from cell (x, y) to the boundary of the grid (i.e., any cell in the first row, last row, first column, or last column) without crossing any fence. If possible, print \\"YES\\", otherwise print \\"NO\\". The first line contains three integers m, n, and q (1 le m, n le 500, 1 le q le 100000) — the number of rows, the number of columns, and the number of queries. Each of the next q lines contains a query in one of the two formats described above. Assume the grid cells are numbered from 1 at the top-left to mn at the bottom-right row-wise. For each \\"CHECK\\" query, print the answer to it. In the first example: 1. A fence is placed at cell (2, 2). 2. Checking if cell (1, 1) can reach the boundary will return \\"YES\\". 3. Checking if cell (2, 2) can reach the boundary will return \\"NO\\". 4. Checking if cell (3, 3) can reach the boundary will return \\"YES\\".","solution":"def process_queries(m, n, queries): def dfs(x, y, visited): if not (0 <= x < m and 0 <= y < n): return False if (x, y) in fences or (x, y) in visited: return False if x == 0 or x == m - 1 or y == 0 or y == n - 1: return True visited.add((x, y)) return (dfs(x + 1, y, visited) or dfs(x - 1, y, visited) or dfs(x, y + 1, visited) or dfs(x, y - 1, visited)) fences = set() results = [] for query in queries: split_query = query.split() if split_query[0] == \\"FENCE\\": x, y = int(split_query[1]) - 1, int(split_query[2]) - 1 fences.add((x, y)) elif split_query[0] == \\"CHECK\\": x, y = int(split_query[1]) - 1, int(split_query[2]) - 1 if (x, y) in fences: results.append(\\"NO\\") else: results.append(\\"YES\\" if dfs(x, y, set()) else \\"NO\\") return results"},{"question":"Vanya is a student who loves learning about new concepts in mathematics. One day, he came across prime numbers, and he learned that a prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Vanya is very eager to write a program that can determine whether a given positive integer is a prime number or not. However, he also wants to count the number of prime numbers within a given range. Help Vanya write a program that determines whether a given number is prime and counts the number of prime numbers in a given range. # Input The input consists of: 1. An integer `x` (1 leq x leq 10^6) for the prime test. 2. Two integers `a` and `b` (1 leq a leq b leq 10^6) that will define the range [a, b] for counting prime numbers. # Output You should output: 1. A string \\"Prime\\" if `x` is a prime number, otherwise \\"Not prime\\". 2. An integer representing the count of prime numbers in the inclusive range [a, b]. # Example Input ``` 17 5 15 ``` Output ``` Prime 4 ``` In this example, 17 is a prime number and the prime numbers between 5 and 15 are 5, 7, 11, and 13, thus the count is 4. # Note In the range query, `a` and `b` can be equal, and in that case, the output is 0 if the number is not prime. Your task also involves ensuring that your program runs efficiently within the given constraints. Use appropriate algorithms to test primality and count primes within a range.","solution":"def is_prime(x): Determines if x is a prime number. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True def count_primes_in_range(a, b): Counts the number of prime numbers within the range [a, b]. def sieve_of_eratosthenes(n): primes = [True] * (n + 1) p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 return primes primes = sieve_of_eratosthenes(b) prime_count = 0 for i in range(max(2, a), b + 1): if primes[i]: prime_count += 1 return prime_count"},{"question":"Alice is a security officer in a large corporation and is responsible for monitoring access logs. Each log entry lists an employee ID and their access time. Alice wants to analyze these logs to find the maximum number of unique employees who accessed the system within any given interval of exactly k minutes. You are given a list of log entries where each entry consists of an integer representing the time (in minutes since the beginning of the day) and an integer representing the employee ID. Your task is to determine the maximum number of unique employees who accessed the system within any interval of exactly k continuous minutes during the day. # Input - The first line contains two space-separated integers, n and k, where n (1 ≤ n ≤ 10^5) is the number of log entries and k (1 ≤ k ≤ 10^5) is the duration of the time interval in minutes. - The next n lines each contain two space-separated integers, t and id, which represent the access time and the employee ID respectively. The access times t are given in non-decreasing order. # Output - Output a single integer representing the maximum number of unique employees who accessed the system within any k-minute interval. # Example Input ``` 5 10 0 1 2 2 12 1 14 3 15 4 ``` Output ``` 3 ``` In this example, the logs cover a span of 0 to 15 minutes. The maximum number of unique employees accessing the system in any 10-minute interval is 3. For instance, from minute 5 to 15, employees with IDs 1, 3, and 4 access the system.","solution":"def max_unique_employees_in_interval(logs, k): from collections import deque, defaultdict max_count = 0 current_interval = deque() employee_count = defaultdict(int) for time, emp_id in logs: current_interval.append((time, emp_id)) employee_count[emp_id] += 1 while current_interval and (current_interval[-1][0] - current_interval[0][0] + 1) > k: oldest_time, oldest_emp_id = current_interval.popleft() employee_count[oldest_emp_id] -= 1 if employee_count[oldest_emp_id] == 0: del employee_count[oldest_emp_id] current_unique_count = len(employee_count) if current_unique_count > max_count: max_count = current_unique_count return max_count # Example usage n, k = 5, 10 logs = [(0, 1), (2, 2), (12, 1), (14, 3), (15, 4)] print(max_unique_employees_in_interval(logs, k)) # Output: 3"},{"question":"Alice and Bob are playing a game with a list of integers. They alternately take turns to pick any single integer from the list. The player who cannot make a move loses the game. Alice always plays first. Both players play optimally, meaning they always make the move that maximizes their chances of winning. Your task is to determine the winner of the game. The input consists of two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 10000), followed by an array of n integers, each between 1 and k, which represent the list of integers. Write a program to determine if Alice will win or not. Input: - The first line contains two integers n and k. - The second line contains n integers representing the list of integers. Output: - Print \\"Alice\\" if Alice wins, otherwise print \\"Bob\\". Example: Input: 5 10 1 3 4 5 6 Output: Alice","solution":"def determine_winner(n, k, array): Determines the winner of the game given the list of integers. Alice wins if the number of elements in the list is odd Bob wins if the number of elements is even if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"There is a kingdom consisting of n cities connected by m bidirectional roads. The cities are uniquely numbered from 1 to n. Each road has a travel cost associated with it. The kingdom\'s highway authority plans to upgrade roads but has a strict policy: only one road can be upgraded per year, and each upgrade reduces the travel cost of the road by exactly 1 unit. Your task is to determine the minimum possible sum of all travel costs after exactly k roads have been upgraded. The first line of the input contains three integers n (2 ≤ n ≤ 100,000), m (1 ≤ m ≤ 200,000), and k (0 ≤ k ≤ m) — the number of cities, the number of roads, and the number of roads that will be upgraded. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1,000) — u and v are the cities connected by the road and c is the travel cost. Output a single integer, the minimum possible sum of all travel costs after upgrading exactly k roads. In the first example, upgrading any road reduces the total cost by exactly 1 unit. If there are multiple roads that can be upgraded, choose any of them. In the second example, no roads are upgraded, so the total cost remains unchanged.","solution":"def min_total_cost_after_upgrades(n, m, k, roads): Returns the minimum possible sum of all travel costs after upgrading exactly k roads. # Sort the roads by their cost in descending order sorted_roads = sorted(roads, key=lambda x: x[2], reverse=True) # The initial total cost is the sum of all road costs total_cost = sum(road[2] for road in roads) # Perform upgrades on the k most expensive roads for i in range(min(k, m)): total_cost -= 1 return total_cost"},{"question":"In a city, there are several buildings, numbered from 1 to N, connected by M one-way roads. Each road connects two different buildings and has a certain length. The city administration wants to establish a public transportation system with bus routes such that each building can be reached from any other building using the bus routes. However, to reduce costs, they want to select a minimum number of roads while ensuring that the condition of reachability from any building to any other building is maintained. If it’s impossible to select such roads, output -1. Otherwise, output the minimum number of roads that need to be selected. The first line of input contains two integers N and M (2 ≤ N ≤ 1000, 1 ≤ M ≤ 10000) — the number of buildings and roads, respectively. Each of the next M lines contains three integers u, v, and d (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ d ≤ 1000) — indicating there is a one-way road from building u to building v with length d. Output the minimum number of roads in a single line. If it is impossible to achieve the requirement, output -1. In the first test case, it\'s crucial to notice that just selecting the roads 1->2 and 2->3 will suffice to ensure every building is reachable from all others. In the second test case, if any building is disconnected from others due to the direction of the roads or there are cycles, output -1 as it\'s not possible to connect all buildings.","solution":"from collections import defaultdict, deque def min_roads_to_select(N, M, roads): # Function to perform BFS to check if all nodes are reachable from a given node def bfs(start, adj): visited = [False] * (N + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited # Create adjacency lists for both original and inverted graphs adj = defaultdict(list) adj_inv = defaultdict(list) for u, v, d in roads: adj[u].append(v) adj_inv[v].append(u) # Check if all nodes are reachable from node 1 in the original graph reachable_from_1 = bfs(1, adj) if not all(reachable_from_1[1:]): return -1 # Check if all nodes can reach node 1 in the inverted graph reachable_to_1 = bfs(1, adj_inv) if not all(reachable_to_1[1:]): return -1 return N - 1 # Input handling function def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) roads = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index+1]) d = int(data[index+2]) roads.append((u, v, d)) index += 3 result = min_roads_to_select(N, M, roads) print(result)"},{"question":"You are given a set of strings. Each string is composed of lowercase and uppercase letters. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. You need to determine the longest common subsequence that appears in all strings. If there are multiple ones of the same length, output the lexicographically smallest one. The first line contains a single integer n (2 ≤ n ≤ 50) — the number of strings. Each of the next n lines contains a single string si (1 ≤ |si| ≤ 100), the given strings. All strings are non-empty and consist of at least one visible character (a-z and A-Z). Output the longest common subsequence that appears in all provided strings. If there are multiple, print the lexicographically smallest one. If there is no common subsequence, print an empty string. Here are two sample inputs and outputs: **Input:** ``` 3 abcdef abdf acdbe ``` **Output:** ``` ab ``` **Input:** ``` 2 abc def ``` **Output:** ``` ``` In the first example, \\"ab\\" is the longest common subsequence appearing in all strings which is also the lexicographically smallest among the common subsequences of that length. In the second example, no common subsequence exists between the strings \\"abc\\" and \\"def\\".","solution":"from itertools import combinations def longest_common_subsequence(n, strings): def is_subsequence(x, y): it = iter(y) return all(c in it for c in x) # Find the shortest string, as the longest common subsequence cannot be longer than it shortest = min(strings, key=len) # Generate all possible subsequences of the shortest string subsequences = set() for length in range(1, len(shortest) + 1): for subsequence in combinations(shortest, length): subsequences.add(\'\'.join(subsequence)) # Sort subsequences by length descending, then by lexicographical order subsequences = sorted(subsequences, key=lambda x: (-len(x), x)) # Check each subsequence and see if it is common to all strings for subsequence in subsequences: if all(is_subsequence(subsequence, string) for string in strings): return subsequence return \\"\\" def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) strings = lines[1:n+1] return n, strings"},{"question":"Iahub is very excited about a summer vacation on his favorite island. The island has n different locations and m paths connecting these locations. Iahub wants to maximize his sightseeing experience by visiting as many locations as possible but he has a special condition: he wants to start from a specific location s (1 ≤ s ≤ n) and return back to the same location s after visiting other locations without visiting any location more than once. You need to help Iahub find the maximum number of locations he can visit (including the starting and ending location) following the given condition. The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 5000), denoting the number of locations and the number of paths respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n; ui ≠ vi) which means there is a path between locations ui and vi. The last line contains an integer s, which is the starting and ending location. Output a single integer representing the maximum number of locations Iahub can visit. Example: Input: 5 6 1 2 2 3 3 4 4 5 5 1 2 4 1 Output: 5 Explanation: Iahub can visit the locations in the following order: 1 -> 2 -> 3 -> 4 -> 5 -> 1. In this way, he visits all 5 locations, starting and ending at location 1.","solution":"def max_locations_visited(n, m, paths, s): from collections import defaultdict, deque # Create the graph graph = defaultdict(list) for u, v in paths: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() queue = deque([(start, 0)]) while queue: node, dist = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, dist + 1)) return len(visited) return bfs(s)"},{"question":"The game of Tug of War involves two teams pulling on opposite ends of a rope. The goal is to make one team cross a designated line first. This problem is a simplified version of the Tug of War game where we form two teams based on their strengths. You are given a list of integers where each integer represents the strength of a participant. Your task is to divide the participants into two teams such that the absolute difference between the sum of the strengths of the two teams is minimized. Each participant must be assigned to exactly one of the two teams. Write a program that divides the participants into two teams and outputs the minimum possible absolute difference between the sums of the strengths of the two teams. **Input:** The first line contains an integer n (1 ≤ n ≤ 100), the number of participants. The second line contains n space-separated integers representing the strengths of the participants. **Output:** Print a single integer, the minimum possible absolute difference between the sums of the strengths of the two teams. **Example:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` In this example, the optimal division is [1, 2, 4] and [3, 5], with sums 7 and 8, respectively. The absolute difference is 1.","solution":"def minimum_difference(n, strengths): total_sum = sum(strengths) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for strength in strengths: for j in range(target, strength - 1, -1): dp[j] = dp[j] or dp[j - strength] for k in range(target, -1, -1): if dp[k]: team1_sum = k team2_sum = total_sum - k return abs(team1_sum - team2_sum) return total_sum # If it is not possible to split # An example function to parse inputs (example purposes) if __name__ == \\"__main__\\": n = int(input()) strengths = list(map(int, input().split())) result = minimum_difference(n, strengths) print(result)"},{"question":"A large company needs to assign tasks to its employees in such a way that maximizes efficiency. Each task requires a certain amount of time to complete, and each employee can only work on one task at a time. The efficiency of an assignment is defined as the minimum amount of time taken to complete all tasks, assuming all employees start working at the same time. Given the number of employees and a list of task times, determine the minimum time required to complete all tasks. The first line contains two integers m and n (1 ≤ m ≤ 100, 1 ≤ n ≤ 100), representing the number of employees and the number of tasks, respectively. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000), representing the time taken to complete each task. Output a single integer, the minimum time required to complete all tasks. In the first sample case, with 3 employees and 5 tasks with times 4, 2, 8, 6, 3, one optimal assignment of tasks would result in the minimum time being 8. In the second sample case, with 2 employees and 4 tasks with times 7, 4, 5, 8, one optimal assignment of tasks would result in the minimum time being 12.","solution":"def min_time_to_complete_tasks(m, n, task_times): task_times.sort(reverse=True) # Sort tasks in descending order employee_times = [0] * m # Initialize time each employee is working to 0 for time in task_times: # Assign each task to the employee with the least amount of work min_employee = employee_times.index(min(employee_times)) employee_times[min_employee] += time # The minimum time to complete all tasks will be the maximum time any single employee worked return max(employee_times) # Example usage: # m = 3 # n = 5 # task_times = [4, 2, 8, 6, 3] # print(min_time_to_complete_tasks(m, n, task_times)) # Output should be 8"},{"question":"You are given a list of integers, and your task is to find the smallest positive integer that is missing from the list. The list may contain duplicate numbers and negative numbers, but we are only interested in positive integers. Write a function `find_missing_positive` that takes a list of integers as input and returns the smallest positive integer that is not present in the list. The first line of the input contains an integer `t` (1 leq t leq 100) — the number of test cases. Each of the next `t` lines contains an integer n (1 leq n leq 1000) followed by `n` space-separated integers. For each test case, output a single line containing the smallest positive integer not present in the list. # Example Input ``` 3 5 3 4 -1 1 2 3 1 2 3 4 3 7 6 -2 ``` Output ``` 5 4 1 ``` # Explanation - In the first test case, the list contains the integers [3, 4, -1, 1, 2]. The smallest positive integer not in the list is 5. - In the second test case, the list contains [1, 2, 3]. The smallest positive integer not in the list is 4. - In the third test case, the list contains [3, 7, 6, -2]. The smallest positive integer not in the list is 1.","solution":"def find_missing_positive(numbers): Returns the smallest positive integer that is missing from the list \'numbers\'. n = len(numbers) numbers = [num for num in numbers if num > 0] if not numbers: return 1 num_set = set(numbers) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing def process_test_cases(test_cases): Process multiple test cases and returns list of results. results = [] for numbers in test_cases: results.append(find_missing_positive(numbers)) return results"},{"question":"You are managing a fleet of drones that deliver packages. Each drone has a specific maximum weight capacity. For a given set of packages, each with a specific weight, you need to determine the minimum number of drones required to deliver all packages under the constraint that the sum of the package weights on each drone does not exceed the drone\'s maximum weight capacity. Note that each drone can deliver multiple packages. Input format: - The first line contains two integers `n` and `W` (1 ≤ n ≤ 300, 1 ≤ W ≤ 10^9): the number of packages and the weight capacity of each drone respectively. - The second line contains `n` integers w1, w2, ..., wn (1 ≤ wi ≤ W): the weights of the packages. Output format: - Print a single integer representing the minimum number of drones required to deliver all packages. Example: Input: 5 10 2 3 5 7 1 Output: 2 Explanation: One possible way to use 2 drones is: - Drone 1 carries packages with weights [2, 3, 5] (total weight = 10). - Drone 2 carries packages with weights [7, 1] (total weight = 8).","solution":"def min_drones(n, W, weights): # Sort the weights in non-increasing order weights.sort(reverse=True) # Initialize a list to store the remaining capacity of each drone drones = [] for weight in weights: placed = False # Try to place the package in an existing drone for i in range(len(drones)): if drones[i] >= weight: drones[i] -= weight placed = True break # If the package couldn\'t be placed in any existing drone, use a new drone if not placed: drones.append(W - weight) return len(drones)"},{"question":"Maria loves to play with prime numbers. Recently, she learned about the concept of prime gaps, which is the difference between consecutive prime numbers. She is curious to know what is the largest prime gap before a specified number n. Given an integer n (2 ≤ n ≤ 10^6), your task is to compute the maximum difference between two consecutive prime numbers that do not exceed n. The first line contains an integer n — the upper limit for the range of prime numbers. Print a single integer — the largest prime gap before n. If there are less than two prime numbers up to n, print 0. Examples: Input: 10 Output: 4 Input: 20 Output: 6 Input: 5 Output: 2 For the first example, the primes are 2, 3, 5, and 7. The differences are 1 (between 2 and 3), 2 (between 3 and 5), and 2 (between 5 and 7). The largest difference is 2.","solution":"def largest_prime_gap(n): Returns the largest prime gap before n. if n < 2: return 0 # Sieve of Eratosthenes is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [i for i in range(n + 1) if is_prime[i]] if len(primes) < 2: return 0 max_gap = 0 for i in range(1, len(primes)): max_gap = max(max_gap, primes[i] - primes[i - 1]) return max_gap"},{"question":"You are organizing a music festival, and you\'ve been given the task of arranging the schedule for the performances on the main stage. The performance times are given as intervals, and no two performances can overlap. However, you have the freedom to adjust the starting time of each performance. The objective is to find the maximum number of performances that can be scheduled on the main stage without any overlaps. Each performance originally starts at time a_i and ends at time b_i. You may adjust the starting time of each performance to any time between 0 and b_i - (b_i - a_i) (inclusive), preserving its duration. The input consists of multiple test cases. Each test case starts with a single integer n (1 le n le 10^5), representing the number of performances. The next n lines each contain two integers a_i and b_i (0 le a_i < b_i le 10^9), representing the original start and end times of each performance. For each test case, output a single integer – the maximum number of performances that can be scheduled without overlap. # Example Input ``` 2 5 1 4 2 6 4 8 4 5 8 9 3 3 5 7 10 2 4 ``` Output ``` 3 2 ``` Explanation - In the first test case, the maximum number of non-overlapping performances we can schedule are: (1,4), (4,5), and (8,9). - In the second test case, the maximum number of non-overlapping performances we can schedule are: (2,4) and (7,10).","solution":"def max_non_overlapping_performances(n, intervals): Returns the maximum number of non-overlapping performances. intervals = sorted(intervals, key=lambda x: x[1]) count = 0 end_time = -1 for start, end in intervals: if start >= end_time: count += 1 end_time = end return count def process_test_cases(test_cases): results = [] for n, intervals in test_cases: results.append(max_non_overlapping_performances(n, intervals)) return results"},{"question":"Maria has a collection of n unique cards, each with a numeric value written on it. Her friend asks her to create a sequence using these cards such that the absolute difference between any two consecutive cards in the sequence is less than or equal to a given integer k. Help Maria determine the number of such valid sequences she can create. A sequence is valid if it contains all n cards exactly once and satisfies the above mentioned condition. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^6). The second line contains n unique integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) - the values on the cards. Print a single integer - the number of valid sequences Maria can create. For example, consider the following situation: n = 4, k = 2, and the values on the cards are [1, 3, 5, 7]. Possible valid sequences are [1, 3, 5, 7] and [7, 5, 3, 1], so the function should return 2. In another example, with n = 3, k = 1, and the values on the cards are [2, 5, 8], there are no valid sequences, so the function should return 0.","solution":"def count_valid_sequences(n, k, card_values): Determines the number of valid sequences that can be created from the given card values such that the absolute difference between any two consecutive cards is less than or equal to k. Args: n (int): Number of unique cards. k (int): Maximum allowed difference between consecutive cards. card_values (list): List of n unique integers representing the values on the cards. Returns: int: Number of valid sequences. # Helper function to perform Depth First Search def dfs(node, visited): visited[node] = True count = 1 for neighbor in adjacency_list[node]: if not visited[neighbor]: count += dfs(neighbor, visited) return count # Step 1: Create an adjacency list based on the condition |a[i] - a[j]| <= k adjacency_list = {i: [] for i in range(n)} for i in range(n): for j in range(i + 1, n): if abs(card_values[i] - card_values[j]) <= k: adjacency_list[i].append(j) adjacency_list[j].append(i) # Step 2: Count number of connected components in the graph visited = [False] * n components = 0 for i in range(n): if not visited[i]: components += 1 dfs(i, visited) # Step 3: If there is only one component, there are 2 valid sequences (forward and backward). # Otherwise, there are no valid sequences. return 2 if components == 1 else 0"},{"question":"You are given an array a_1, a_2, dots, a_n consisting of n positive integers. Your task is to make all the elements in the array equal by performing the following operation: - Choose any non-zero integer k and replace every element a_i in the array with the result of the integer division of a_i by k, i.e., a_i = leftlfloorfrac{a_i}{k}rightrfloor. Note that you can choose the integer k independently for each element. Your goal is to determine the minimum number of operations to make all elements in the array equal. # Input - The first line contains one integer t (1 leq t leq 10) — the number of test cases. - The first line of each test case contains one integer n (1 leq n leq 10^5) — the number of elements in the array. - The second line of each test case contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9). It is guaranteed that the sum of n across all test cases does not exceed 10^5. # Output For each test case, print one integer — the minimum number of operations required to make all elements in the array equal. # Example Input ``` 2 3 3 3 3 4 1 2 3 4 ``` Output ``` 0 3 ``` Explanation In the first test case, all elements are already equal, so the number of operations is zero. In the second test case, you can perform the following operations: 1. Replace 4 by leftlfloorfrac{4}{2}rightrfloor = 2 to get the array {1, 2, 3, 2}. 2. Replace 3 by leftlfloorfrac{3}{1}rightrfloor = 3 to get {1, 2, 1, 2}. 3. Replace 2 by leftlfloorfrac{2}{2}rightrfloor = 1 to get {1, 1, 1, 1}. Thus, the number of operations is three.","solution":"def min_operations_to_equal_elements(test_cases): results = [] for n, arr in test_cases: result = n - arr.count(min(arr)) results.append(result) return results"},{"question":"You are given an array of n integers. You can perform the following operation any number of times: choose any subarray and reverse it. Determine if it is possible to sort the array in non-decreasing order by performing the above operation on one or more subarrays. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output \\"YES\\" if it\'s possible to sort the array in non-decreasing order, otherwise output \\"NO\\".","solution":"def can_sort_by_reversing_subarrays(arr): Determine if it is possible to sort the array in non-decreasing order by performing the following operation any number of times: choose any subarray and reverse it. Args: arr (List[int]): List of integers representing the array Returns: str: \\"YES\\" if it\'s possible to sort the array in non-decreasing order, otherwise \\"NO\\" # if the array is already sorted, return YES if arr == sorted(arr): return \\"YES\\" # if any sequence is already sorted after removing one invalid subarray, then return YES n = len(arr) # find first index where array is not sorted start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # find last index where array is not sorted end = n - 1 while end > 0 and arr[end - 1] <= arr[end]: end -= 1 # reverse the subarray that is not sorted arr[start:end + 1] = arr[start:end + 1][::-1] # check if the array is sorted after reversing if arr == sorted(arr): return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with n vertices and m edges. The goal is to find out whether it is possible to color the graph using two colors such that no two adjacent vertices have the same color. If this is possible, output \\"YES\\" and one possible coloring. Otherwise, output \\"NO\\". The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of vertices and edges in the graph. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is an edge between vertex u and vertex v. There are no duplicate edges. If it is possible to color the graph using two colors, on the first line print \\"YES\\". On the second line, print n integers, where the i-th integer is 1 or 2 indicating the color of the i-th vertex. If there are multiple valid colorings, you may print any of them. If it is not possible to color the graph using two colors, print \\"NO\\".","solution":"def possible_to_color_graph(n, m, edges): Determines if it is possible to color the graph using two colors such that no two adjacent vertices have the same color. :param n: Number of vertices :param m: Number of edges :param edges: List of tuple edges :return: Tuple (bool, List[int]) where bool indicates if coloring is possible, and list contains the coloring scheme from collections import defaultdict, deque # Initialize graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize color array; 0 means uncolored colors = [0] * (n + 1) # Function to perform BFS to try and color the graph def bfs(start): queue = deque([start]) colors[start] = 1 # Start coloring with 1 while queue: u = queue.popleft() current_color = colors[u] for v in graph[u]: if colors[v] == 0: # Color with alternate color colors[v] = 3 - current_color queue.append(v) elif colors[v] == current_color: # Same color on adjacent nodes means it\'s not bipartite return False return True # Check for each component in the graph for node in range(1, n + 1): if colors[node] == 0: if not bfs(node): return \\"NO\\" # If coloring is possible, return \\"YES\\" and the coloring return \\"YES\\", colors[1:] # Example Function Call # n = 4 # m = 4 # edges = [(1, 2), (1, 3), (2, 4), (3, 4)] # print(possible_to_color_graph(n, m, edges))"},{"question":"A company\'s security system stores the access logs of employees entering and exiting the building in the following way: each entry in the log is represented by a tuple (timestamp, employee_id, action), where `timestamp` is a positive integer representing the time the action occurred, `employee_id` is the unique identifier of an employee, and `action` is a string that can either be \\"enter\\" or \\"exit\\". The security system is not perfect and there might be some inconsistencies in the logs such as: - An employee might have consecutive \\"enter\\" or \\"exit\\" actions without an intervening \\"exit\\" or \\"enter\\". - The first action for an employee might be \\"exit\\". Your task is to write a function to check the logs for inconsistencies and return a list of employee IDs who have invalid entry logs. # Function Signature ```python def find_inconsistent_entries(logs: List[Tuple[int, int, str]]) -> List[int]: pass ``` # Input - `logs`: A list of tuples (timestamp, employee_id, action) representing the access logs. The list is sorted by timestamp. There is at least one log entry and no two log entries have the same timestamp. # Output - A list of integers, each representing an employee ID that has an inconsistent entry in the log. The list should be sorted in ascending order. If all logs are consistent, return an empty list. # Example ```python logs = [ (1, 101, \\"enter\\"), (2, 102, \\"exit\\"), (3, 101, \\"exit\\"), (4, 103, \\"enter\\"), (5, 102, \\"enter\\"), (6, 103, \\"exit\\"), (7, 101, \\"exit\\") ] # The logs for employee 102 are inconsistent because it starts with an \\"exit\\". # The logs for employee 101 are inconsistent because of consecutive \\"exit\\" actions at timestamps 3 and 7. # Employee 103 has a valid log (\\"enter\\" followed by \\"exit\\"). find_inconsistent_entries(logs) # Output: [101, 102] ``` # Constraints - The length of `logs` will be at most 100,000. - `employee_id` will be a positive integer. - `action` will be either \\"enter\\" or \\"exit\\".","solution":"from typing import List, Tuple def find_inconsistent_entries(logs: List[Tuple[int, int, str]]) -> List[int]: employee_status = {} inconsistent_employees = set() for timestamp, employee_id, action in logs: if employee_id not in employee_status: if action == \\"exit\\": inconsistent_employees.add(employee_id) employee_status[employee_id] = action else: if (employee_status[employee_id] == \\"enter\\" and action == \\"enter\\") or (employee_status[employee_id] == \\"exit\\" and action == \\"exit\\"): inconsistent_employees.add(employee_id) employee_status[employee_id] = action return sorted(inconsistent_employees)"},{"question":"In a galaxy far far away, there exists a unique kind of currency system consisting of coins of different denominations. You\'re given a particular value that you need to make exactly using the least number of coins. Consider that there are `m` different denominations with values `d1, d2, ..., dm`. You are given an unlimited supply of each type of coin. Your task is to determine the minimum number of coins needed to make the given value. If it is not possible to make that value with the given denominations, return -1. The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^6, 1 ≤ m ≤ 100), where `n` is the value you need to form and `m` is the number of different coin denominations. The second line contains `m` integers `d1, d2, ..., dm` (1 ≤ di ≤ 10^6) - the value of each coin denomination. Print a single integer — the minimum number of coins needed to make the value `n`. If it is not possible to form the value, print -1. Example: Input: 11 3 1 5 10 Output: 2 Explanation: To make value 11 with the fewest coins, you can use one coin of 10 and one coin of 1. Thus, the minimum number of coins needed is 2.","solution":"def min_coins(n, denominations): Given a value n and a list of denominations, returns the minimum number of coins needed to make the value n, or -1 if it is not possible to do so. # Initialize dp array with n+1 values, which are large enough to be considered infinity dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # Base case, no coins needed to make value 0 for i in range(1, n + 1): for coin in denominations: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[n] if dp[n] != float(\'inf\') else -1 def process_input(input_data): lines = input_data.split(\'n\') n, m = map(int, lines[0].split()) denominations = list(map(int, lines[1].split())) return min_coins(n, denominations)"},{"question":"Given an array of integers, determine whether it is possible to rearrange the elements of the array such that they form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains n space-separated integers ai (|ai| ≤ 10^9) which represent the elements of the array. Your task is to output \\"YES\\" if it is possible to rearrange the array elements to form an arithmetic progression, otherwise output \\"NO\\". **Example:** Input: ``` 4 3 5 1 7 ``` Output: ``` YES ``` Input: ``` 3 1 2 4 ``` Output: ``` NO ```","solution":"def can_form_arithmetic_progression(n, arr): # A single element array or an array with all elements having the same value is trivially an arithmetic progression. if n == 1: return \\"YES\\" # Sort the array to check for common differences arr.sort() # Find the common difference using the first two elements common_diff = arr[1] - arr[0] # Check if the difference between every consecutive pair of elements is the same for i in range(2, n): if arr[i] - arr[i - 1] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"Consider a chef who is trying to bake the perfect cake. The chef wants the cake to be of a certain sweetness level. The recipe specifies that the cake should contain exactly n ingredients. Each ingredient has its own sweetness value, which can be positive, negative, or zero. The chef has exactly m different ingredients to choose from and can use each ingredient at most once. The chef wants to know the maximum possible sum of sweetness values he can achieve using exactly n ingredients out of the available m ingredients. The first line of input contains two integers m and n (1 ≤ n ≤ m ≤ 200) – the number of available ingredients and the number of ingredients needed for the cake respectively. The second line contains m integers ai (-1000 ≤ ai ≤ 1000) – the sweetness values of the available ingredients. Print the maximum possible sum of sweetness values the chef can achieve using exactly n ingredients. If it is not possible to pick n ingredients, print -1. # Example: Input: ``` 5 3 1 -2 3 -4 5 ``` Output: ``` 9 ``` Explanation: The chef can use the ingredients with the sweetness values [1, 3, 5] to reach a maximum sweetness sum of 9.","solution":"def max_sweetness(m, n, sweetness_values): if n > m: return -1 # Sort the ingredients by their sweetness in descending order sweetness_values.sort(reverse=True) # Sum the top n sweetness values return sum(sweetness_values[:n]) # Example usage: # input: 5 3 # 1 -2 3 -4 5 print(max_sweetness(5, 3, [1, -2, 3, -4, 5])) # Expected output: 9"},{"question":"Andrey is an enthusiastic botanist who spends most of his time exploring various types of gardens. He recently got fascinated by the concept of Greenhouses. A greenhouse is a structure where plants can grow, and each plant can impact the growth of other plants located within the same row. Specifically, in Andrey\'s new greenhouse, there are n rows and each row has exactly m plants. The growth impact between the plants is defined by the height difference between adjacent plants within the same row. Andrey wants to measure the maximum possible absolute height difference between any two adjacent plants in a single row across all rows. This will help him understand which row has the most diverse growth pattern. The heights of the plants for each row are given, and Andrey seeks your help in finding the desired maximum height difference. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of rows and the number of plants in each row, respectively. Each of the next n lines contains m integers — the heights of the plants in the current row. The height of each plant (1 ≤ height ≤ 1000). Output a single integer — the maximum possible absolute height difference between any two adjacent plants in a single row. Example: ``` Input: 3 4 1 3 4 7 10 3 5 8 6 2 2 3 Output: 7 ``` Explanation: - For the first row, the maximum absolute height difference is |7 - 4| = 3. - For the second row, the maximum absolute height difference is |10 - 3| = 7. - For the third row, the maximum absolute height difference is |6 - 2| = 4. The maximum value among these rows is 7. Hence, the output is 7.","solution":"def max_height_difference(n, m, heights): Computes the maximum height difference between any two adjacent plants in a single row across all rows. Parameters: - n: int, number of rows - m: int, number of plants in each row - heights: list of list of ints, heights of the plants for each row Returns: - int, the maximum possible absolute height difference between any two adjacent plants in a single row max_diff = 0 for row in heights: for i in range(m - 1): max_diff = max(max_diff, abs(row[i] - row[i + 1])) return max_diff"},{"question":"You are organizing a contest with various activities, where each activity has certain prerequisites that must be satisfied before the activity can be started. Specifically, there are n activities numbered from 1 to n, and m constraints. Each constraint is described by a pair (a, b), which means that activity a must be completed before activity b can be started. Your task is to find an order to complete all the activities such that all constraints are satisfied. If multiple valid orders exist, any of them will be accepted. If it\'s impossible to complete all activities (due to circular dependencies for example), return an error message indicating the impossibility. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), the number of activities and the number of constraints. - The next m lines each contain two integers a and b (1 ≤ a, b ≤ n), representing the constraint that activity a must be completed before activity b. Output: - If it is possible to complete all activities satisfying all constraints, print a valid order of n integers where each integer represents an activity number. - If it is not possible, print \\"IMPOSSIBLE\\". Constraints: - Activities and constraints form a directed acyclic graph without cycles. Example: Input: 5 4 1 2 2 3 4 2 4 5 Output: 4 5 1 2 3 Explanation: One valid order of completing all activities is: complete activity 4 first, then 5, then 1, then 2, and finally 3. This order follows all given constraints. Other valid orders could exist as well.","solution":"from collections import defaultdict, deque def find_activity_order(n, m, constraints): adj_list = defaultdict(list) in_degree = [0] * (n + 1) for a, b in constraints: adj_list[a].append(b) in_degree[b] += 1 zero_in_degree_queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(order) == n: return order else: return \\"IMPOSSIBLE\\""},{"question":"Valera is fond of prime numbers and has decided to play a game with them. He has an integer array of size n where he wishes to calculate the sum of prime numbers in all subarrays of a given length k. Given an integer array a of size n and an integer k, determine the sum of prime numbers in each subarray of length k. Valera needs your help to solve this problem efficiently. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the size of the array and the length of the subarray, respectively. The following line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the array a. The output should contain t lines. On the i-th line print the sum of prime numbers in each subarray of length k for the i-th test case. If there are multiple subarrays of length k, print the results separated by spaces. Note that the sum for each subarray should be calculated and printed in their respective order as they appear in the array. Example: Input: 2 6 3 2 3 4 5 6 7 7 4 10 11 13 17 23 6 4 Output: 5 3 11 12 0 30 41 40 Explanation: In the first test case, the array is [2, 3, 4, 5, 6, 7], and k is 3. The subarrays of length 3 are [2, 3, 4], [3, 4, 5], [4, 5, 6], and [5, 6, 7]. The sums of prime numbers in these subarrays are: - [2, 3, 4]: 2 + 3 = 5 (4 is not prime) - [3, 4, 5]: 3 + 5 = 8 (4 is not prime) - [4, 5, 6]: 5 (4 and 6 are not prime) - [5, 6, 7]: 5 + 7 = 12 (6 is not prime) In the second test case, the array is [10, 11, 13, 17, 23, 6, 4], and k is 4. The subarrays of length 4 are [10, 11, 13, 17], [11, 13, 17, 23], [13, 17, 23, 6], and [17, 23, 6, 4]. The sums of prime numbers in these subarrays are: - [10, 11, 13, 17]: 11 + 13 + 17 = 41 (10 is not prime) - [11, 13, 17, 23]: 11 + 13 + 17 + 23 = 64 - [13, 17, 23, 6]: 13 + 17 + 23 = 53 (6 is not prime) - [17, 23, 6, 4]: 17 + 23 = 40 (6 and 4 are not prime)","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_sum_in_subarrays(t, test_cases): Function to calculate the sum of prime numbers in each subarray of length k for each test case. results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] sums = [] for j in range(n - k + 1): subarray = a[j:j + k] prime_sum = sum(x for x in subarray if is_prime(x)) sums.append(prime_sum) results.append(sums) return results"},{"question":"Alexandra, the explorer, finds herself lost in a labyrinth. The labyrinth is made up of n rows and m columns, forming a grid. Some of these cells contain walls which block Alexandra\'s path, while others are free of obstacles. She starts at the top-left corner of the grid (1,1) and wants to reach the bottom-right corner (n,m). Alexandra can move one cell up, down, left, or right in one step, but she can\'t move diagonally or pass through walls. Determine if it is possible for Alexandra to find a path from the top-left corner to the bottom-right corner of the grid. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m characters each, describing the labyrinth. A cell containing a \'.\' indicates open space, and a cell containing a \'#\' indicates a wall. Output \\"YES\\" (without the quotes) if there\'s a path for Alexandra to reach the bottom-right corner from the top-left corner; otherwise, print \\"NO\\" (without the quotes). Examples: Input: 5 5 ..... .#. ..#.. .#. ..... Output: YES Input: 3 3 ..# # #.. Output: NO","solution":"def is_path_exist(n, m, labyrinth): from collections import deque # Possible moves: right, down, left, up moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for move in moves: new_x, new_y = x + move[0], y + move[1] if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and labyrinth[new_x][new_y] != \'#\': queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"NO\\""},{"question":"Giorgi is a language enthusiast and has recently discovered an ancient manuscript filled with words scattered on multiple lines. However, due to the manuscript\'s age, some words are duplicated across lines, and Giorgi believes there\'s a hidden message if he identifies the longest sequence of unique words from the start of the manuscript. Your task is to help Giorgi determine the length of the longest subsequence of unique words starting from the beginning of the manuscript. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of lines in the manuscript. Each of the next n lines contains a single string representing a word from the manuscript. Each word consists only of lowercase English alphabets and has a length between 1 and 100 characters inclusive. Print a single integer — the length of the longest subsequence of unique words starting from the beginning of the manuscript. The first example: ``` Input: 5 apple banana apple cherry date Output: 2 ``` The second example: ``` Input: 6 pear apple banana grape pear melon Output: 4 ```","solution":"def longest_unique_subsequence_length(words): Returns the length of the longest subsequence of unique words starting from the beginning. seen = set() length = 0 for word in words: if word in seen: break seen.add(word) length += 1 return length"},{"question":"In an ancient land, there existed a kingdom with a peculiar system of commerce. The kingdom\'s currency was made up of exactly three types of coins: gold, silver, and bronze. Each coin had an integer value. The king decreed that any significant transaction must be accomplished using an integer number of each type of coin, or not at all. Despite its complexity, the system puzzled many merchants who sought ways to balance their transactions properly. You, as the royal mathematician, need to determine if it is possible to pay a given amount using any combination of these three types of coins. The first line contains an integer t (1 ≤ t ≤ 10^5), representing the number of test cases. Each of the next t lines contains four space-separated integers: g, s, b, and x (1 ≤ g, s, b, x ≤ 10^4), where g is the value of the gold coin, s is the value of the silver coin, b is the value of the bronze coin, and x is the transaction amount that needs to be achieved. For each test case, if it\'s possible to achieve the exact transaction amount x using any non-negative integer combination of the three types of coins, output \\"POSSIBLE\\"; otherwise, output \\"IMPOSSIBLE\\". Example: Input: 4 1 2 3 7 2 4 6 8 3 3 3 9 5 5 5 17 Output: POSSIBLE POSSIBLE POSSIBLE IMPOSSIBLE Explanation: In the first test case, you can use 2 bronze coins and 1 gold coin to make 7. In the second test case, you can use 2 silver coins to make 8. In the third test case, 3 bronze coins can make 9. In the fourth test case, it\'s not possible to make 17 using multiples of 5.","solution":"from math import gcd from functools import reduce def can_pay(g, s, b, x): This function checks if it is possible to pay the amount x using some combination of the coins with values g, s, and b. def gcd_multiple(*args): return reduce(gcd, args) coin_gcd = gcd_multiple(g, s, b) return x % coin_gcd == 0 def determine_transactions(test_cases): Determines if the given transactions can be completed using the coin values. :param test_cases: List of tuples where each tuple contains (g, s, b, x) :return: List of \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" for each test case results = [] for g, s, b, x in test_cases: if can_pay(g, s, b, x): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"Alice is helping her friend Bob paint his new fence, which consists of `n` vertical planks (numbered 1 through `n` from left to right). Each plank has an initial color, represented by an integer value. Bob wants the fence to look as neat as possible, so Alice decides to repaint some (possibly none) of the planks such that no two adjacent planks have the same color. Alice has a palette containing `k` different colors, represented by integers from 1 through `k`. She can repaint any plank, changing its color to any of the colors in the palette. Write a program to determine the minimum number of repaint operations required to ensure that no two adjacent planks have the same color. # Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ 100), the number of planks in the fence and the number of different colors in the palette, respectively. The second line contains `n` integers `c1, c2, ..., cn` (1 ≤ ci ≤ k) where `ci` represents the initial color of the i-th plank. # Output Print a single integer: the minimum number of repaint operations required. # Examples Example 1 # Input ``` 5 3 1 2 2 3 1 ``` # Output ``` 1 ``` Example 2 # Input ``` 4 2 1 1 1 1 ``` # Output ``` 2 ``` Example 3 # Input ``` 3 4 4 2 3 ``` # Output ``` 0 ``` In the first example, Alice can repaint the third plank from color 2 to color 1 or 3 to ensure no two adjacent planks have the same color, resulting in 1 repaint operation. In the second example, Alice needs to repaint at least two of the planks to achieve the desired condition since there are only two colors available. In the third example, no repaints are needed as no two adjacent planks have the same color.","solution":"def min_repaints(n, k, colors): Determine the minimum number of repaints required to ensure no two adjacent planks have the same color. # Initialize repaint counts repaints = 0 for i in range(1, n): if colors[i] == colors[i-1]: repaints += 1 colors[i] = (colors[i] % k) + 1 while colors[i] == colors[i-1] or (i+1 < n and colors[i] == colors[i+1]): colors[i] = (colors[i] % k) + 1 return repaints"},{"question":"A company is planning to migrate its servers and needs to allocate tasks among its employees to ensure the migration is completed within a certain time frame while maintaining balance in the number of tasks assigned to each employee. Each migration task has a specific duration, and each employee can work on at most one task at a time. The company wants to minimize the maximum amount of time an employee spends on tasks. You are given the number of employees `e`, the number of tasks `t`, and an array `durations` representing the time each task takes to complete. Your task is to write a program that distributes the tasks among the employees such that the maximum time spent by any one employee is minimized. The first line of the input contains two integers `e` and `t` (1 ≤ e, t ≤ 100,000) — the number of employees and the number of tasks. The second line contains `t` integers representing the durations of the tasks in minutes. Each duration is a positive integer not exceeding 1,000,000. Print a single integer: the minimum possible value of the maximum time spent by any employee. **Example:** Input: ``` 4 7 3 8 15 17 4 5 11 ``` Output: ``` 19 ``` Explanation: One way to distribute the tasks is as follows: - Employee 1 works on tasks with durations [3, 15] - Employee 2 works on tasks with durations [8, 11] - Employee 3 works on tasks with durations [17] - Employee 4 works on tasks with durations [4, 5] In this way, the maximum time spent by any employee is 19 minutes (Employee 2). This is the minimum possible value for the worst-case time any employee spends on tasks.","solution":"def min_max_time(e, t, durations): def can_allocate(max_time): employees_required = 1 current_time = 0 for duration in durations: if current_time + duration > max_time: employees_required += 1 current_time = duration if employees_required > e: return False else: current_time += duration return True durations.sort(reverse=True) left, right = max(durations), sum(durations) result = right while left <= right: mid = (left + right) // 2 if can_allocate(mid): result = mid right = mid - 1 else: left = mid + 1 return result # Reading input def main(): import sys input = sys.stdin.read data = input().split() e = int(data[0]) t = int(data[1]) durations = list(map(int, data[2:])) print(min_max_time(e, t, durations)) if __name__ == \\"__main__\\": main()"},{"question":"Peter loves working with numbers and is fascinated by special number sequences. Recently, he came across a unique type of sequence called a \\"Factorial Sum Sequence.\\" In this sequence, each number is the sum of the factorials of its digits. He started experimenting with these sequences and observed interesting behaviors with different starting numbers. Given a starting integer `n`, Peter wants to generate the Factorial Sum Sequence and find out how many steps it takes for the sequence to reach a repeating number. A repeating number is a number that has already appeared in the sequence. For example, if the sequence contains the numbers [145, 169, 363601, 1454, 169], the number 169 is the repeating number since it first appeared at the second position and repeats at the fifth position. Write a program to help Peter determine the number of steps it takes for the Factorial Sum Sequence to reach a repeating number. Input: - A single integer `n` (0 ≤ n ≤ 100000). Output: - An integer representing the number of steps until a repeating number is encountered in the Factorial Sum Sequence. # Example Input: ```text 145 ``` Output: ```text 5 ``` # Explanation The Factorial Sum Sequence starting from 145 is: - 145 -> 1! + 4! + 5! = 1 + 24 + 120 = 145 - 145 -> 1! + 4! + 5! = 1 + 24 + 120 = 145 Since the repetition occurs immediately, it takes 1 step to reach the repeating number, which is 145. Another Example Input: ```text 69 ``` Output: ```text 5 ``` # Explanation The Factorial Sum Sequence starting from 69 is: - 69 -> 6! + 9! = 720 + 362880 = 363600 - 363600 -> 3! + 6! + 3! + 6! + 0! + 0! = 6 + 720 + 6 + 720 + 1 + 1 = 1454 - 1454 -> 1! + 4! + 5! + 4! = 1 + 24 + 120 + 24 = 169 - 169 -> 1! + 6! + 9! = 1 + 720 + 362880 = 363601 - 363601 -> 3! + 6! + 3! + 6! + 0! + 1! = 6 + 720 + 6 + 720 + 1 + 1 = 1454 (repeats) Hence, it takes 5 steps to reach the first repeating number, which is 1454.","solution":"import math def factorial_sum(n): Calculates the sum of factorials of the digits of the given number n. return sum(math.factorial(int(digit)) for digit in str(n)) def steps_to_repeating_number(n): Generates the Factorial Sum Sequence starting from n and returns the number of steps to reach the first repeating number. sequence = [] while n not in sequence: sequence.append(n) n = factorial_sum(n) return len(sequence)"},{"question":"Alice and Bob are playing a game with a sequence of integers. They take turns removing elements from the sequence, with Alice always going first. Each player must remove exactly one integer on their turn, and the game continues until all integers have been removed. They follow a specific rule for removing integers: each player can only remove an integer if it has the highest remaining value in the sequence at the time of their turn. If there are multiple such integers, they can choose any of them. Given the initial sequence of integers, determine who will win the game assuming both play optimally. The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (−109 ≤ ai ≤ 109) — the elements of the sequence. Output \\"Alice\\" (without quotes) if Alice wins the game, and \\"Bob\\" (without quotes) otherwise. In the first sample, with the sequence [3, 1, 2], Alice wins by picking 3, then 2, and finally 1. In the second sample, with the sequence [1, 2, 1], Alice wins by picking 2 and then either 1. In the third sample, with the sequence [5, 5, 5, 5], Bob wins as each player can pick any 5 but Bob is guaranteed to pick the last one.","solution":"def determine_winner(n, sequence): Determines the winner of the game based on the rules provided. :param n: Integer, the number of integers in the sequence :param sequence: List of integers, the sequence of integers :return: String, \\"Alice\\" or \\"Bob\\" depending on the winner if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a sequence of positive integers and you need to partition this sequence into two non-empty contiguous subarrays such that the product of the sums of the two subarrays is maximized. Return the maximum product of the sums. The first line of the input contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the sequence. The second line contains n positive integers separated by spaces, representing the sequence. Each integer is at most 1000. Output a single integer - the maximum product of the sums of the two subarrays. Example: Input: 5 1 2 3 4 5 Output: 54 Explanation: The optimal partition is between the subarrays [1,2,3] and [4,5]. The sum of the first subarray is 6, and the sum of the second subarray is 9. The product of these sums is 54.","solution":"def max_product_of_sums(n, sequence): Returns the maximum product of the sums of two non-empty contiguous subarrays. Parameters: n (int): Number of elements in the sequence. sequence (list of int): The sequence of positive integers. Returns: int: Maximum product of the sums of two subarrays. # prefix_sum[i] will be the sum of sequence[:i] prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + sequence[i - 1] max_product = 0 total_sum = prefix_sum[n] for i in range(1, n): sum1 = prefix_sum[i] sum2 = total_sum - sum1 product = sum1 * sum2 if product > max_product: max_product = product return max_product"},{"question":"In a distant world, there are n ancient temples located in a vast desert. Each temple is a point in a 2D coordinate plane, and no two temples share the same location. The rulers of the land want to establish a new path that connects all the temples exactly once and forms a simple polygon (a non-intersecting closed path). The desert is known for its unexpected storms, and establishing the path requires ensuring that it is the shortest possible path that forms a simple polygon. This means the total length of the path should be minimized. Your task is to determine the order in which the temples should be connected to achieve the shortest simple polygon path. You need to write a program that takes the coordinates of the temples and finds the length of the shortest path that forms a simple polygon. The first line of the input contains a single integer n (4 ≤ n ≤ 100) — the number of temples. Each of the next n lines contains two integers xi and yi (0 ≤ xi, yi ≤ 1000) — the coordinates of the i-th temple. Output the length of the shortest path that connects all the temples in a simple polygon with an absolute or relative error not exceeding 10^-6.","solution":"import math from itertools import permutations def calculate_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def calculate_path_length(path): total_length = 0 for i in range(len(path)): total_length += calculate_distance(path[i], path[(i + 1) % len(path)]) return total_length def shortest_polygon_path(points): # Find the path with the minimum length from all permutations min_length = float(\'inf\') best_path = None for perm in permutations(points): current_length = calculate_path_length(perm) if current_length < min_length: min_length = current_length best_path = perm return min_length def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) points = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] result = shortest_polygon_path(points) print(f\\"{result:.6f}\\") if __name__ == \\"__main__\\": main()"},{"question":"# You are given a list of N integers. Your task is to partition the list into two non-empty sublists such that the absolute difference between the sums of the two sublists is minimized. Each sublist must contain at least one integer from the original list. Write a function that takes the list of integers as input and outputs the minimum absolute difference between the sums of the two sublists. Input: - A single line containing an integer N (2 ≤ N ≤ 100) — the number of integers in the list. - The next line contains N integers separated by spaces — the integers in the list. Output: - A single integer, the minimum absolute difference between the sums of the two sublists. Example: # Input: ``` 4 1 2 3 4 ``` # Output: ``` 0 ``` # Input: ``` 3 8 1 4 ``` # Output: ``` 3 ``` Explanation: In the first example, partitioning the list into [1, 4] and [2, 3] results in sums of 5 and 5 respectively, yielding an absolute difference of 0. In the second example, partitioning the list into [8] and [1, 4] results in sums of 8 and 5 respectively, yielding an absolute difference of 3.","solution":"def minimum_absolute_difference(lst): Partition the list into two sublists to minimize absolute difference between their sums. Args: lst (list of int): The list of integers Returns: int: The minimum absolute difference between the sums of the two sublists total_sum = sum(lst) n = len(lst) target_sum = int(total_sum / 2) # Initialize DP array dp = [False] * (target_sum + 1) dp[0] = True for num in lst: for j in range(target_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(target_sum, -1, -1): if dp[i]: closest_sum = i break other_half = total_sum - closest_sum return abs(other_half - closest_sum)"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation as many times as you want (including zero): choose any two adjacent characters in the string and if they are the same, remove them. Your goal is to find the length of the resulting string after applying the operation as many times as possible. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 10^5), consisting of lowercase English letters. It is guaranteed that the sum of the lengths of all strings in one test does not exceed 10^6. Output the length of the resulting string for each test case. Example: Input 3 abbac aabccb aaaaa Output 1 0 1 Explanation: In the first test case, \\"abbac\\" gets reduced to \\"c\\". In the second test case, \\"aabccb\\" gets fully reduced to an empty string. In the third test case, \\"aaaaa\\" gets reduced to one \\"a\\".","solution":"def final_string_length(s): Returns the length of the string after repeatedly removing adjacent duplicate characters. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack) def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of results. return [final_string_length(s) for s in test_cases]"},{"question":"You are given an unweighted, undirected tree with n nodes labeled from 1 to n. The tree is represented as an adjacency list. Your task is to determine whether there exists a simple path that passes through the root node (node 1) exactly once and includes all other nodes of the tree. The tree is given as a list of edges. Each edge connects two nodes and is represented as a pair of integers. # Input: - The first line contains a single integer n (2 ≤ n ≤ 200,000), the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n and u ≠ v), the nodes that an edge connects. # Output: - Output \\"YES\\" if such a path exists, otherwise output \\"NO\\". # Example: Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` YES ``` **Explanation:** In the example above, one possible path that starts and ends at node 1, includes all nodes, and only passes through the root node once is: 1 -> 2 -> 1 -> 3 -> 4 -> 3 -> 5.","solution":"def path_through_root(n, edges): Determines if there exists a simple path that passes through the root node (node 1) exactly once and includes all other nodes of the tree. Parameters: n (int): the number of nodes in the tree edges (list of tuples): list of edges representing the tree Returns: str: \\"YES\\" if such path exists, otherwise \\"NO\\" from collections import defaultdict, deque # Build the adjacency list representation of the tree adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Check the degree of the root (node 1) root_degree = len(adjacency_list[1]) # A valid path exists if and only if the root node 1 is connected to exactly 2 nodes if root_degree == 2: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice loves reading books, and she recently found a way to store excerpts from her favorite books in a special encrypted manner. The excerpts are represented by strings consisting of lowercase English letters. To encrypt these strings, Alice uses a custom encoding algorithm which ensures that the encrypted string can easily be converted back to the original string. The custom encoding works as follows: 1. For any given string `s`, split it into contiguous substrings such that each substring is a sequence of identical characters. 2. For each substring, replace it with the character followed by the count of that character. For example, the string `aaabbccccd` would be encoded as `a3b2c4d1`. Alice wants to write a program to help her encode multiple excerpts at once. Given `t` excerpts, your task is to write a program that outputs the encoded string for each excerpt. # Input The first line contains an integer `t` (1 ≤ `t` ≤ 10^3) - the number of excerpts. Each of the next `t` lines contains a single string `s` (1 ≤ |`s`| ≤ 10^5) - the excerpt from the book. It is guaranteed that the total length of the strings over all test cases does not exceed 10^6 characters. # Output Output `t` lines. The `i-th` line should contain the encoded version of the `i-th` excerpt. # Example Input ``` 3 aaabbccccd leetcode aabb ``` Output ``` a3b2c4d1 l1e2t1c1o1d1e1 a2b2 ``` # Note 1. In the first example, the string `aaabbccccd` is split into `aaa`, `bb`, `cccc`, and `d` and encoded into `a3b2c4d1`. 2. In the second example, the string `leetcode` is split into `l`, `ee`, `t`, `c`, `o`, `d`, and `e` and encoded into `l1e2t1c1o1d1e1`. 3. In the third example, the string `aabb` is split into `aa` and `bb` and encoded into `a2b2`.","solution":"def encode_string(s): Encodes the string s based on the custom encoding algorithm. :param s: input string :return: encoded string if not s: return \\"\\" encoded_string = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: encoded_string.append(f\\"{s[i-1]}{count}\\") count = 1 encoded_string.append(f\\"{s[-1]}{count}\\") return \\"\\".join(encoded_string) def encode_multiple_excerpts(t, excerpts): Encodes multiple excerpts based on the custom encoding algorithm. :param t: the number of excerpts :param excerpts: list of excerpts :return: list of encoded excerpts return [encode_string(excerpt) for excerpt in excerpts]"},{"question":"Ian is an anthropologist studying the social networks of a community. He models the community as a graph with n members (numbered from 1 to n) and m friendships (undirected edges) between them. Ian is particularly interested in clique structures within this community. A clique is defined as a subset of vertices of the graph such that every two distinct vertices in the clique are adjacent. In other words, every member of a clique is friends with every other member in the clique. Ian wants to find the largest clique within the community. Help Ian determine the size of the largest clique in the friendship graph. # Input The first line of the input contains two integers n and m (1 leq n leq 1,000, 0 leq m leq dfrac{n(n-1)}{2}) — the number of members and the number of friendships. The next m lines each contain two integers u and v (1 leq u, v leq n, u neq v) meaning that the members u and v are friends. # Output Print a single integer — the size of the largest clique in the friendship graph. # Example Input ``` 5 6 1 2 1 3 1 4 2 3 2 4 3 4 ``` Output ``` 4 ``` In this example, members 1, 2, 3, and 4 form a clique.","solution":"from itertools import combinations def is_clique(graph, nodes): Check if a given set of nodes forms a clique. for u, v in combinations(nodes, 2): if v not in graph[u]: return False return True def largest_clique_size(n, m, friendships): Finds the size of the largest clique in the friendship graph. n: number of members m: number of friendships friendships: list of tuples representing friendships if m == 0: return 1 graph = {i: set() for i in range(1, n + 1)} for u, v in friendships: graph[u].add(v) graph[v].add(u) max_clique_size = 1 for size in range(2, n + 1): for nodes in combinations(range(1, n + 1), size): if is_clique(graph, nodes): max_clique_size = size return max_clique_size"},{"question":"Limak loves to collect candies in his forest. The forest is represented as a 2D grid of size n x m, where each cell either contains a candy (represented by a \'C\') or is empty (represented by a \'.\'). Limak starts collecting candies from the top-left corner of the grid and can move to the right or down. He cannot move to the left or upwards. Determine the maximum number of candies Limak can collect if he always starts at the top-left corner and wants to reach the bottom-right corner of the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. Each of the next n lines contains m characters, either \'C\' or \'.\', representing the grid. Print a single integer, the maximum number of candies Limak can collect. For example, consider the following grid: ``` 3 4 C..C .CC. ..C. ``` Here, the maximum number of candies Limak can collect is 4. The path to collect these candies is: C -> C -> C -> C. In an alternative scenario, consider the grid: ``` 4 5 C..C. C.C.. CC... ....C ``` In this case, the maximum number of candies Limak can collect is 5. The path to collect these candies is: C -> C -> C -> C -> C.","solution":"def maximum_candies(n, m, grid): Returns the maximum number of candies Limak can collect. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (list of list of str): The grid containing candies (\'C\') and empty spaces (\'.\'). Returns: int: The maximum number of candies Limak can collect. # Initialize a 2D dp array with zero values. dp = [[0] * m for _ in range(n)] # Fill the dp array with the maximum candies collected upto each cell. for i in range(n): for j in range(m): if grid[i][j] == \'C\': if i == 0 and j == 0: dp[i][j] = 1 elif i == 0: dp[i][j] = dp[i][j-1] + 1 elif j == 0: dp[i][j] = dp[i-1][j] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 else: if i == 0 and j == 0: dp[i][j] = 0 elif i == 0: dp[i][j] = dp[i][j-1] elif j == 0: dp[i][j] = dp[i-1][j] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[-1][-1]"},{"question":"You are given a matrix with n rows and m columns, where each cell contains a non-negative integer. The special value of a row is defined as the sum of the values of all the cells in that row. You need to find the row with the maximum special value and print the index of that row (1-based index). If there are multiple rows with the same maximum special value, print the smallest index among them. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the elements of the matrix. All integers are non-negative and strictly less than 1000. Print a single integer — the index of the row with the maximum special value. In the first sample, the second row has the highest special value (8 + 7 + 6 = 21). In the second sample, all rows have the same special value (2). Thus, the row with the smallest index (first row) is chosen. Examples: Input: 3 3 1 2 3 8 7 6 4 5 6 Output: 2 Input: 2 2 1 1 1 1 Output: 1","solution":"def row_with_max_special_value(n, m, matrix): max_value = -1 # initialize to a very small value max_index = -1 # index of the row with the maximum special value for i in range(n): row_sum = sum(matrix[i]) if row_sum > max_value: max_value = row_sum max_index = i elif row_sum == max_value: max_index = min(max_index, i) # if the same, take the smallest index # Since we need to return a 1-based index, we add 1 to the 0-based index return max_index + 1 # Example usage (for testing purposes) n, m = 3, 3 matrix = [ [1, 2, 3], [8, 7, 6], [4, 5, 6] ] print(row_with_max_special_value(n, m, matrix)) # Output: 2 n, m = 2, 2 matrix = [ [1, 1], [1, 1] ] print(row_with_max_special_value(n, m, matrix)) # Output: 1"},{"question":"You are given a tree consisting of `n` nodes. A tree is a connected acyclic graph. Each node has a unique label from `1` to `n`. You need to perform some operations on this tree. In each operation, you select any two nodes `u` and `v`, and remove the edge connecting `u` and `v`. This will split the original tree into two separate trees. Your task is to determine the number of possible ways to split the tree into exactly two non-empty parts by removing exactly one edge. The first line contains an integer `n` (2 ≤ n ≤ 100000) — the number of nodes in the tree. Each of the following `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) — indicating that there is an edge between nodes `u` and `v`. Output a single integer — the number of possible ways to split the tree by removing exactly one edge. For example: Input: ``` 4 1 2 2 3 2 4 ``` Output: ``` 3 ``` Explanation: There are three edges in this tree. Removing any one of them results in exactly two non-empty parts. Input: ``` 6 1 2 1 3 2 4 2 5 3 6 ``` Output: ``` 5 ``` Explanation: There are five edges in this tree. Removing any one of them results in exactly two non-empty parts.","solution":"def count_possible_splits(n, edges): Returns the number of possible ways to split the tree by removing exactly one edge. Parameters: n (int): Number of nodes in the tree. edges (list of tuples): Edges in the tree represented as tuples of nodes. Returns: int: The number of possible ways to split the tree. # Since any edge removal leads to exactly two non-empty parts, # the number of ways to split the tree is simply the number of edges. return n - 1"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Your task is to compute the minimum number of edge deletions required to make the graph acyclic (i.e., a forest). A forest is an undirected graph without cycles, possibly consisting of multiple disconnected trees. Given the graph\'s representation through edges, determine how many edges need to be removed to achieve the desired acyclic state. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of vertices and edges, respectively. - The following `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertices `u` and `v`. # Output - Print a single integer representing the minimum number of edges that need to be deleted to make the graph acyclic. # Example Input ``` 5 5 1 2 2 3 3 4 4 5 2 4 ``` Output ``` 1 ``` # Explanation In the given example, the graph contains a cycle: 2-3-4-2. By removing one of the edges involved in the cycle (for example, either 2-3, 3-4, or 2-4), the graph will become acyclic. Thus, only one edge deletion is required.","solution":"def min_edge_deletions_to_make_acyclic(n, m, edges): Determines the minimum number of edge deletions required to make a graph acyclic. :param n: Number of vertices :param m: Number of edges :param edges: List of tuples representing edges between vertices :return: Minimum number of edges to remove parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX edge_count = 0 for u, v in edges: if find(u) != find(v): union(u, v) else: edge_count += 1 return edge_count"},{"question":"The kingdom of Nolaris contains n realms, connected by m bi-directional portals. Each portal connects two different realms, but there might be more than one portal between any pair of realms. Due to the unstable nature of these portals, they may occasionally malfunction, disrupting travel. The king wants to ensure that despite these malfunctions, it will still be always possible to travel from one realm to any other realm. Therefore, the king has commanded you to determine if the current network of portals already guarantees this, or if it\'s necessary to add the minimal number of new portals to achieve it. The first input line contains two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 10000), where n is the number of realms, and m is the number of portals. Each of the following m lines contains a description of a portal in the form of two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), indicating that there is a portal between realm ui and realm vi. Output the minimum number of new portals needed to ensure that all realms remain fully connected even if one portal malfunctions. If no new portals are needed, print 0. If it’s not possible to make the network resilient by adding new portals, print -1. # Examples **Input:** ``` 4 3 1 2 2 3 3 4 ``` **Output:** ``` 1 ``` **Input:** ``` 5 7 1 2 2 3 3 4 4 5 1 3 2 4 3 5 ``` **Output:** ``` 0 ``` **Input:** ``` 3 0 ``` **Output:** ``` -1 ```","solution":"def new_portals_needed(n, m, connections): from collections import defaultdict, deque if n == 1: return 0 graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Check if the graph is initially connected def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited initial_connected = bfs(1) if len(initial_connected) < n: return -1 def find_critical_portal_count(start): visited = set() parent = {start: None} discovery_time = {} low = {} time = [0] critical_count = [0] def dfs(u): visited.add(u) discovery_time[u] = low[u] = time[0] time[0] += 1 children = 0 for v in graph[u]: if v not in visited: parent[v] = u children += 1 dfs(v) low[u] = min(low[u], low[v]) if parent[u] is None and children > 1: critical_count[0] += 1 if parent[u] is not None and low[v] >= discovery_time[u]: critical_count[0] += 1 elif v != parent[u]: low[u] = min(low[u], discovery_time[v]) dfs(start) return critical_count[0] critical_portal_count = find_critical_portal_count(1) return max(0, critical_portal_count - 1)"},{"question":"You are given a string a consisting of lowercase English letters, and a string b which is some permutation of string a. Your task is to determine the minimum number of adjacent swaps needed to transform string a into string b. An adjacent swap consists of choosing any two adjacent characters in the string and swapping them. The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. Each test case consists of two lines. The first line contains the string a (1 le |a| le 100). The second line contains the string b which is a permutation of the string a. For each test case, print the minimum number of adjacent swaps required to transform string a into string b. Here is a sample input and output for clarity: # Input ``` 3 abcd dcba rattle teatrl algorithm logarhtim ``` # Output ``` 6 8 7 ```","solution":"def min_adjacent_swaps(a, b): Returns the minimum number of adjacent swaps needed to transform string a into string b. n = len(a) count = 0 a = list(a) for i in range(n): if a[i] != b[i]: # Find the position of b[i] in the remaining part of a j = i while a[j] != b[i]: j += 1 # Bring the a[j] to the i-th position while j > i: a[j], a[j - 1] = a[j - 1], a[j] count += 1 j -= 1 return count def solve(input_cases): Processes multiple test cases. results = [] t = int(input_cases[0]) index = 1 for _ in range(t): a = input_cases[index] b = input_cases[index + 1] results.append(min_adjacent_swaps(a, b)) index += 2 return results"},{"question":"You are given an array of distinct integers, and you need to determine if there exists a subset of the array whose sum is equal to a given target value. Formally, you are given an integer array `arr` of size `n` and an integer `target`. Determine if there exists a subset of the array `arr` whose sum is exactly `target`. If such a subset exists, print \\"YES\\", otherwise print \\"NO\\". Input Format: - The first line contains an integer `n` (1 leq n leq 20) — the number of elements in the array. - The second line contains `n` distinct integers, separated by spaces, representing the elements of the array. Each element is in the range [-10^6, 10^6]. - The third line contains an integer `target` (-10^6 leq target leq 10^6) — the target sum for the subset. Output Format: - Print \\"YES\\" if there exists a subset whose sum is `target`. Otherwise, print \\"NO\\". Example: Input: ``` 4 3 34 4 12 9 ``` Output: ``` YES ``` Input: ``` 5 1 2 3 4 5 10 ``` Output: ``` YES ``` Input: ``` 3 1 2 4 8 ``` Output: ``` NO ``` Explanation: - In the first example, the subset [3, 4, 2] adds up to 9. - In the second example, the subset [1, 2, 3, 4] adds up to 10. - In the third example, there is no subset that adds up to 8.","solution":"def subset_sum_exists(arr, target): Determines if there exists a subset of the array `arr` whose sum is exactly `target`. n = len(arr) # Using dynamic programming to solve the subset sum problem dp = [False] * (target + 1) dp[0] = True # There\'s always a subset with sum 0 (the empty subset) for num in arr: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Jonathan is fascinated by ancient maps and mysterious paths. He recently found an ancient scroll with a partially erased path on a grid. The scroll contains indications of a sequence of movements on a grid of size n x n, starting from the top-left corner (1,1) and ending at the bottom-right corner (n,n). The movements are represented by characters ‘L’ (left), ‘R’ (right), ‘U’ (up), and ‘D’ (down). However, the scroll has an obstacle: there are some cells in the grid that are marked as forbidden, which cannot be traversed. Jonathan wants to decode the path and verify if reaching the destination (n,n) is possible under the given conditions. If multiple paths are possible, he is interested in finding out the shortest path in terms of movements used. The input data contains: - The first line contains two integers n and k - the size of the grid (2 ≤ n ≤ 1000) and the number of forbidden cells (0 ≤ k ≤ n²). - Each of the next k lines contains two integers xi and yi - the coordinates of a forbidden cell (1 ≤ xi, yi ≤ n). - The following line contains a string s - the sequence of movements in the scroll (1 ≤ |s| ≤ 1000). Your task is to output: - \\"Impossible\\" if it is not possible to reach the bottom-right corner. - The minimum number of movements if it is possible to reach the bottom-right corner by following the given sequence. Note: - Movements that lead out of bounds or into forbidden cells should be ignored. - The sequence string \'s’ may contain invalid moves but the aim is to follow it as closely as possible while arriving exactly at (n, n) with the least number of valid moves.","solution":"from collections import deque def min_moves_to_destination(n, k, forbidden, s): forbidden_set = set((x, y) for x, y in forbidden) directions = {\'L\': (0, -1), \'R\': (0, 1), \'U\': (-1, 0), \'D\': (1, 0)} def is_valid(x, y): return 1 <= x <= n and 1 <= y <= n and (x, y) not in forbidden_set # BFS setup queue = deque([(1, 1, 0, 0)]) # (x, y, index in s, moves) visited = set([(1, 1)]) while queue: x, y, idx, moves = queue.popleft() if (x, y) == (n, n): return moves if idx < len(s): dx, dy = directions.get(s[idx], (0, 0)) nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, idx + 1, moves + 1)) # Try all moves irrespective of sequence for d in directions.values(): nx, ny = x + d[0], y + d[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, idx, moves + 1)) return \\"Impossible\\""},{"question":"The local zoo has a new herbivore exhibit that contains multiple types of animals. The zookeeper wants to know how many distinct days he needs to gather enough food for all of the animals from different categories. Each type of food comes from a different source and takes an entire day to collect. The first line contains an integer n (1 le n leq 2 cdot 10^5) representing the number of animals in the exhibit. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), each representing the food category required by the i-th animal. Determine the minimum number of distinct days required to gather sufficient food, ensuring at least one type of food is available for every category needed by the animals. # Input - The first line contains a single integer n - The second line contains n integers a_1, a_2, ldots, a_n. # Output Output a single integer representing the minimum number of distinct days needed to gather the necessary types of food. # Example Input ``` 5 4 1 3 2 2 ``` Output ``` 4 ``` # Explanation There are 4 distinct food categories (1, 2, 3, 4) required by the animals. Therefore, the zookeeper needs 4 days to gather food from each category.","solution":"def min_days_to_gather_food(n, food_categories): Determines the minimum number of distinct days required to gather sufficient food for all animals in the herbivore exhibit. return len(set(food_categories))"},{"question":"Given an integer array `nums` and an integer `target`, you need to determine if there are two distinct indices `i` and `j` in the array such that `nums[i] + nums[j]` equals `target`. You should return the pair of indices if such a pair exists, otherwise return an empty list. Your task is to implement a function that finds these indices. Function Signature: ```python def find_indices(nums: List[int], target: int) -> List[int]: ``` Input: - `nums` (a list of integers): The array of integers where you will search for the pair of indices. It is guaranteed that the array length is greater than or equal to 2 and less than or equal to 10^5. - `target` (an integer): The target sum you need to find within the array. Output: - A list: A list containing the pair of indices `[i, j]` (0 ≤ i < j < len(nums)) that satisfy `nums[i] + nums[j] == target`. If no such pair exists, return an empty list. # Example Example 1 **Input:** ```python nums = [2, 7, 11, 15] target = 9 ``` **Output:** ```python [0, 1] ``` **Explanation:** The sum of nums[0] + nums[1] = 2 + 7 = 9, so the pair of indices is [0, 1]. Example 2 **Input:** ```python nums = [3, 2, 4] target = 6 ``` **Output:** ```python [1, 2] ``` **Explanation:** The sum of nums[1] + nums[2] = 2 + 4 = 6, so the pair of indices is [1, 2]. Example 3 **Input:** ```python nums = [3, 3] target = 6 ``` **Output:** ```python [0, 1] ``` **Explanation:** The sum of nums[0] + nums[1] = 3 + 3 = 6, so the pair of indices is [0, 1]. **Note:** You can assume that each input would have exactly one solution, and you may not use the same element twice. # Constraints - `2 ≤ nums.length ≤ 10^5` - `-10^9 ≤ nums[i] ≤ 10^9` - `-10^9 ≤ target ≤ 10^9`","solution":"from typing import List def find_indices(nums: List[int], target: int) -> List[int]: Returns indices of the two numbers that add up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You are given an array of integers a of length n and an integer k. You can perform the following operation at most k times: choose an integer x and replace each occurrence of x in the array a with any integer y (y ne x). Your task is to determine the maximum possible number of distinct integers in the array a after performing at most k operations. # Input - The first line contains two integers n and k (1 leq n, k leq 100). - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100). # Output Print a single integer, the maximum possible number of distinct integers in the array after performing at most k operations. # Example **Input:** ``` 5 2 1 1 2 2 3 ``` **Output:** ``` 4 ``` **Explanation:** Initially, the distinct integers are {1, 2, 3}. By replacing one of the 1\'s or 2\'s with another integer (4, for example), we can maximize the distinct integers to 4. **Input:** ``` 6 1 1 1 1 2 2 3 ``` **Output:** ``` 4 ``` **Explanation:** Initially, the distinct integers are {1, 2, 3}. By replacing one of the 1\'s with another integer (4, for example), we can maximize the distinct integers to 4.","solution":"def max_distinct_integers(n, k, a): Given an array \'a\' of length \'n\' and an integer \'k\', this function returns the maximum possible number of distinct integers in the array after performing at most \'k\' operations where each operation allows replacing all occurrences of an integer \'x\' with any integer \'y\' (y ≠ x). from collections import Counter num_count = Counter(a) distinct_elements = len(num_count) # We can change at most \'k\' types of elements. if k == 0: # If no operation is allowed, the current number of distinct elements is the answer return distinct_elements # Sorting counts in descending order counts = sorted(num_count.values(), reverse=True) # k elements can be changed to a new unique value, so we can potentially increase distinct elements return min(n, distinct_elements + k)"},{"question":"An adventurer is exploring a dense forest and comes across a mysterious ancient artifact known as the Path Matrix. The Path Matrix is a binary matrix of size n × m where each cell contains either 0 (representing an obstacle) or 1 (representing an open path). The adventurer starts at the top-left corner of the matrix and must find a path to the bottom-right corner, moving only down or right at each step. Your task is to determine the number of distinct paths the adventurer can take to reach the bottom-right corner of the matrix. If there is no possible path, return 0. Note that the adventurer can only move to cells containing 1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the Path Matrix. Each of the next n lines contains m integers (either 0 or 1), representing the Path Matrix. Print a single integer — the number of distinct paths from the top-left to the bottom-right corner of the matrix. Since the number of paths can be large, print it modulo 1000000007. **Example** Input: ``` 3 3 1 1 0 0 1 1 1 1 1 ``` Output: ``` 2 ``` In this example, the matrix is: ``` 1 1 0 0 1 1 1 1 1 ``` The two distinct paths are: 1. Right -> Down -> Down -> Right (passing through cells with values 1) 2. Down -> Down -> Right -> Right (passing through cells with values 1) Note that cells with value 0 cannot be passed. Hence, they are obstacles.","solution":"def count_paths(matrix): Given a binary matrix, count the number of distinct paths from the top-left corner to the bottom-right corner, moving only down or right at each step. n = len(matrix) m = len(matrix[0]) MOD = 1000000007 # If the starting point or ending point is an obstacle, return 0 if matrix[0][0] == 0 or matrix[n-1][m-1] == 0: return 0 # Create a dp array to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = 1 # Calculate the number of ways to reach each cell for i in range(n): for j in range(m): if matrix[i][j] == 1: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[-1][-1]"},{"question":"You are given a set of n distinct positive integers and an integer m. You need to determine the number of subsets of size m that can be formed from this set such that the sum of the elements of each subset is less than a given integer s. The first line contains three integers n, m, and s (1 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ s ≤ 10^9) — the number of elements in the set, the size of the subsets, and the maximum sum allowed. The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the set. Output a single integer — the number of subsets of size m with a sum of elements less than s. Example: Input: 5 3 15 3 5 8 7 2 Output: 4 Explanation: The subsets of size 3 are {3, 5, 8}, {3, 5, 7}, {3, 8, 2}, {5, 8, 7}, {5, 7, 2}, and {8, 7, 2}. Among them, the subsets {3, 5, 7}, {3, 8, 2}, {5, 7, 2}, and {3, 5, 8} have sums 15, 13, 14, and 16 respectively. Only {3, 5, 7}, {3, 8, 2}, and {5, 7, 2} have sums less than 15. Hence, there are 4 valid subsets.","solution":"from itertools import combinations def count_valid_subsets(n, m, s, elements): Returns the number of subsets of size m with the sum of elements less than s. :param n: int - number of elements in the set (1 ≤ n ≤ 100) :param m: int - size of the subsets (1 ≤ m ≤ n) :param s: int - the maximum sum allowed (1 ≤ s ≤ 10^9) :param elements: list of int - the elements in the set (1 ≤ ai ≤ 10^9) :return: int - the number of valid subsets valid_subsets_count = 0 # Generate all combinations of elements with size m for subset in combinations(elements, m): if sum(subset) < s: valid_subsets_count += 1 return valid_subsets_count"},{"question":"Yara is a professional gardener, and she likes to arrange flowers in a straight line in front of her house. She has n flowers, and each flower has a given height. Yara wants to arrange the flowers such that the difference in height between consecutive flowers does not exceed a given value d. If Yara finds that she cannot achieve this arrangement with the current heights of the flowers, she can choose any number of flowers and replace them with new ones of any height she prefers, so long as the rearrangement meets the height difference requirement. Yara wants to know the minimum number of flowers that need to be replaced to meet the given condition. The first line contains two positive space-separated integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 100) — the number of flowers and the maximum allowed height difference between any two consecutive flowers. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), where hi denotes the height of the i-th flower. In the first line print a single non-negative integer — the minimum number of flowers that need to be replaced to achieve the height difference condition. In the second line print the heights of the flowers after replacements. If there are multiple solutions, print any of them. Consider the first sample where the flowers have heights [1, 10, 3]. Here, Yara needs to replace at least one flower height to meet the specified difference requirement d = 4. Possible valid arrangements could be [1, 5, 3] or [1, 5, 7] where the minimum number of replacements is 1. In the second example with flower heights [3, 8, 15, 12] and d = 3, at least two flowers need to be replaced to have a possible valid arrangement such as [3, 6, 9, 12].","solution":"def min_replacements(n, d, heights): Calculate the minimum number of flowers to be replaced to meet the height difference condition. Parameters: n (int): Number of flowers d (int): Maximum allowed height difference heights (list of int): Heights of the flowers Returns: tuple: Minimum number of replacements and the final heights after replacements # Initialize variables replacements = 0 new_heights = heights[:] for i in range(1, n): # If the difference between current flower and previous flower is greater than d if abs(new_heights[i] - new_heights[i - 1]) > d: new_heights[i] = new_heights[i - 1] + d replacements += 1 return replacements, new_heights def parse_input(input_str): Parse input data from string format. lines = input_str.strip().split(\'n\') n, d = map(int, lines[0].split()) heights = list(map(int, lines[1].split())) return n, d, heights"},{"question":"Alice wants to create a collection of stamps. She has n stamp albums, and each album can contain a certain number of stamps. Unfortunately, not all albums have the same capacity to hold stamps. Alice wants to distribute the stamps in such a way that each album is either full or empty, and all the full albums should contain the same number of stamps. To achieve this, Alice can perform any number of the following operation: she can move a stamp from one album to another as long as both albums are not full. You are given an array where the i-th element is the capacity of the i-th album. Determine the maximum number of stamps an album can contain given the constraints. The first line contains an integer n (1 ≤ n ≤ 100000) - the number of stamp albums. The second line contains n integers, where the i-th integer (1 ≤ a_i ≤ 10^9) represents the capacity of the i-th stamp album. Print the number of stamps a full album can contain to satisfy Alice\'s condition. Example: - Input: 5 10 20 30 40 50 - Output: 30 Explanation: Alice can aim for albums that can contain 30 stamps. The other albums with capacities 10 and 20 will remain empty. This problem requires finding the largest possible capacity that allows every filled album to contain the same number of stamps without exceeding their individual capacities, maximizing the utilization of the albums.","solution":"def max_full_album_capacity(n, capacities): Determines the maximum number of stamps a full album can contain such that each album is either full or empty and all the full albums contain the same number of stamps. :param n: Integer, the number of stamp albums :param capacities: List of integers, the capacities of each album :return: Integer, the maximum number of stamps a full album can contain capacities.sort() # The maximum amount of stamps that a full album can have would be the median of the sorted capacities list. # The median is the middle element in the sorted list that would allow the maximum number of stamps to be full. return capacities[n // 2] # Example use case n = 5 capacities = [10, 20, 30, 40, 50] print(max_full_album_capacity(n, capacities)) # Output: 30"},{"question":"You are given a set of n segments, each represented by its left and right endpoints on a number line. Your task is to find the smallest number of points that can be chosen such that each segment contains at least one of these points. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of segments. Each of the next n lines contains two integers l and r (1 ≤ l ≤ r ≤ 10^9), the endpoints of the segment. Output a single integer, the smallest number of points required to cover all segments. # Example Input ``` 3 1 3 2 5 3 6 ``` Output ``` 1 ``` Explanation Selecting point 3 covers all three segments [1, 3], [2, 5], and [3, 6].","solution":"def find_minimum_points(n, segments): # sort the segments by their right endpoint segments.sort(key=lambda x: x[1]) # to store the number of required points points = [] # the last considered point in the optimal solution last_point = float(\'-inf\') for segment in segments: # if last_point is not in the segment range, we need a new point if last_point < segment[0] or last_point > segment[1]: last_point = segment[1] points.append(last_point) return len(points)"},{"question":"A city is divided into a grid of cells with dimensions `n x m`. Each cell `(i, j)` is either empty (denoted by \'.\') or blocked (denoted by \'#\'). The city planners want to know how many distinct ways there are to connect the top-left corner `(1, 1)` to the bottom-right corner `(n, m)` using paths that only move right or down through empty cells. Two paths are considered distinct if they visit different sequences of cells. The first and only line of the input contains two integers `n` and `m` (1 le n, m le 500), and the next `n` lines each contain `m` characters denoting the grid. Output one integer — the number of distinct paths from the top-left to the bottom-right corner. If there are no such paths, output `0`. # Example **Input**: ``` 3 3 ... .#. ... ``` **Output**: ``` 2 ``` **Explanation**: - The two distinct paths are: 1. Move right three times, then move down twice: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. Move down twice, then move right three times: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"def count_distinct_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are the manager of a logistics company. You have a network of warehouses connected by roads, each with a certain length. There are n warehouses and m bidirectional roads. Each road connects two warehouses and has a length associated with it. Your task is to ensure that every warehouse can communicate with every other warehouse, either directly or indirectly through other warehouses. To achieve this goal, you need to find the smallest number of roads that must be constructed to make the entire network connected. If the network is already connected, you do not need to construct any roads. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950) – the number of warehouses and the number of roads, respectively. Each of the following m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) representing a road between warehouse u and warehouse v with length w. Print one integer — the minimum number of roads that must be constructed to make the network connected. # Example: Input: ``` 4 2 1 2 4 3 4 3 ``` Output: ``` 1 ``` Explanation: In this example, warehouses 1 and 2 are connected, and warehouses 3 and 4 are connected. To ensure that all warehouses can communicate with each other, you can construct one road between warehouse 2 and warehouse 3 (or any other combination that connects the two separate components of the network).","solution":"def find(parent, i): A utility function to find the set of an element i using path compression. if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): A function that does union of two subsets x and y based on the rank. xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_roads_to_construct(n, m, roads): Returns the minimum number of roads that must be constructed to make the network connected. if n == 1: return 0 parent = [i for i in range(n)] rank = [0] * n # Generating disjoint sets for u, v, w in roads: x = find(parent, u - 1) y = find(parent, v - 1) if x != y: union(parent, rank, x, y) roots = set(find(parent, i) for i in range(n)) return len(roots) - 1"},{"question":"For this problem, you need to analyze a network of computers and determine the largest cluster of connected computers. The network can be represented as a graph where each computer is a node and each direct connection between two computers is an edge. Each computer in the network is either functioning or not. You are given a list of computers that are functioning in the network and a list of direct connections between the computers. Your task is to write a program that finds the size of the largest cluster of connected functioning computers in the network. The first line of the input contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of computers and the number of direct connections respectively. The second line contains n integers (0 or 1) indicating whether each computer is functioning (1) or not (0). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a direct connection between the computers u and v. Output one integer — the size of the largest cluster of connected functioning computers. If no functioning computers exist, print 0. Example: Input: 6 5 1 0 1 1 0 1 1 2 1 3 2 4 3 4 5 6 Output: 3 Explanation: The functioning computers are 1, 3, 4, and 6. The connections are 1-2, 1-3, 2-4, 3-4, 5-6. The largest cluster of functioning computers is 1-3-4, which has size 3.","solution":"def largest_functioning_cluster_size(n, m, functionings, connections): from collections import defaultdict, deque # Create a graph where only functioning computers are nodes graph = defaultdict(list) for u, v in connections: if functionings[u - 1] == 1 and functionings[v - 1] == 1: graph[u].append(v) graph[v].append(u) # To track visited nodes visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count max_cluster_size = 0 # Traverse all nodes/ computers for i in range(1, n + 1): if functionings[i - 1] == 1 and not visited[i]: max_cluster_size = max(max_cluster_size, bfs(i)) return max_cluster_size"},{"question":"There is a sequence of integers a_1, a_2, ldots, a_n. A sequence is called **balanced** if it meets the following condition: for every pair of two distinct elements i and j (1 ≤ i < j ≤ n), the absolute difference |a_i - a_j| is at least the absolute difference |i - j|. Given an integer n, you need to determine if the sequence a is balanced. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100), the number of test cases. For each test case, the first line contains a single integer n (1 le n le 10^5). The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). Output \\"YES\\" if the sequence is balanced, otherwise output \\"NO\\". Example Input: ``` 3 4 1 3 6 10 3 1 2 3 5 1 5 3 6 8 ``` Output: ``` YES YES NO ``` Explanation: - In the first test case, the sequence is balanced because for every pair of indices, the condition is satisfied. - In the second test case, the sequence is balanced as the differences between both elements and their indices are equal. - In the third test case, when looking at the pair (5, 3) where their indices are (2, 3), the difference between the elements (2) is smaller than the difference between their indices (1), thus it\'s not balanced.","solution":"def is_balanced_sequence(n, sequence): Determine if the given sequence is balanced. Parameters: n (int): The length of the sequence. sequence (list): The sequence of integers. Returns: str: \\"YES\\" if the sequence is balanced, otherwise \\"NO\\". for i in range(n): for j in range(i + 1, n): if abs(sequence[i] - sequence[j]) < abs(i - j): return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Process multiple test cases to determine if each sequence is balanced. Parameters: t (int): The number of test cases. test_cases (list): A list containing tuples, each with an integer and a list (n, sequence). Returns: list: A list of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for n, sequence in test_cases: results.append(is_balanced_sequence(n, sequence)) return results"},{"question":"You are given a binary string `s` of length `n`. The string consists of `0\'s` and `1\'s` only. Your task is to determine the maximum number of substrings starting from the first character of the string that consist solely of alternating characters. For example, in the string \\"010101\\", the substrings \\"01\\", \\"01\\", and \\"01\\" can be obtained, making a total of 3 substrings. The string \\"1010\\" can be split into \\"10\\" and \\"10\\", making a total of 2 substrings. Write a function to find the maximum number of such alternating substrings. The first line contains a single integer n (1 ≤ n ≤ 100000) — the length of the string `s`. The second line contains the binary string `s`. Output the maximum number of alternating substrings starting from the first character. Example: ``` Input: 6 010101 Output: 3 Input: 4 1010 Output: 2 Input: 1 0 Output: 0 ```","solution":"def max_alternating_substrings(n, s): Determines the maximum number of substrings starting from the first character of the string that consist solely of alternating characters. :param n: Length of the binary string s. :param s: Binary string consisting of \'0\'s and \'1\'s only. :return: Maximum number of alternating substrings. if n < 2: return 0 count = 0 i = 1 while i < n: if s[i] != s[i - 1]: count += 1 i += 1 i += 1 return count"},{"question":"You are given two arrays, `a` and `b`, each containing `n` integers. Your task is to determine if it is possible to make the two arrays identical by performing any number of circular rotations on each array. A circular rotation on an array involves moving its elements to the right by one position, with the last element wrapping around to the first position. For example, a circular rotation on the array `[1, 2, 3, 4]` results in `[4, 1, 2, 3]`. If it is possible to make the two arrays identical by performing any number of circular rotations on one or both arrays, print \\"YES\\". Otherwise, print \\"NO\\". **Input format:** - The first line contains an integer `n` (1 le n le 10^5) — the number of elements in each array. - The second line contains `n` integers, representing the elements of the array `a`. - The third line contains `n` integers, representing the elements of the array `b`. **Output format:** - Print \\"YES\\" if it is possible to make the arrays identical through any number of circular rotations. Otherwise, print \\"NO\\". **Example:** ``` Input: 4 1 2 3 4 3 4 1 2 Output: YES Input: 5 1 2 3 4 5 5 4 3 2 1 Output: NO ```","solution":"def can_be_made_identical_by_rotation(n, a, b): Check if it\'s possible to make two arrays identical by performing any number of circular rotations on either array. Parameters: n (int): Number of elements in each array. a (list): First array of integers. b (list): Second array of integers. Returns: str: \'YES\' if the arrays can be made identical by circular rotations, \'NO\' otherwise. if n == 0: return \\"NO\\" # Concatenate array `a` with itself extended_a = a + a # Convert both the extended `a` and `b` to strings to check for substring str_extended_a = \' \'.join(map(str, extended_a)) + \' \' str_b = \' \'.join(map(str, b)) + \' \' # Check if `b` is a substring of the extended `a` if str_b in str_extended_a: return \\"YES\\" else: return \\"NO\\""},{"question":"A spaceship is travelling through a distant galaxy, navigating through a series of space gates. The spaceship can move forward to the next gate or skip one gate and move to the gate after the next. However, each gate has an energy cost associated with it, and the spaceship wants to minimize the total energy cost to reach the final gate. You are given an array of n integers where the i-th integer denotes the energy cost of the i-th gate. The spaceship starts at the first gate and can only move forward or skip one gate, aiming to reach the last gate with the minimum energy cost. Write a program that calculates the minimum energy cost for the spaceship to reach the final gate. The first input line contains a single integer n (1 ≤ n ≤ 10^5) — the number of gates. The second line contains n space-separated integers, where the i-th integer is the energy cost of the i-th gate (1 ≤ cost_i ≤ 10^4). Output a single integer — the minimum energy cost to reach the final gate. Example: ``` Input: 5 1 2 3 4 5 Output: 6 Explanation: The spaceship can start at gate 1 with cost 1, then skip to gate 3 with an additional cost of 3, and finally skip to gate 5 with an additional cost of 5. The total minimum energy cost is 1+3+5 = 9. ``` Note: You need to optimize the algorithm to handle the upper constraints efficiently.","solution":"def min_energy_cost(n, energy_costs): Returns the minimum energy cost to reach the final gate. if n == 1: return energy_costs[0] # Initialize the dp array to store minimum cost to reach each gate dp = [0] * n dp[0] = energy_costs[0] dp[1] = energy_costs[0] + energy_costs[1] for i in range(2, n): dp[i] = min(dp[i-1], dp[i-2]) + energy_costs[i] return dp[-1]"},{"question":"You are given an integer k and a list of n positive integers. Your task is to count how many pairs of integers from the list have a difference of exactly k. The first line of input contains two integers n and k (1 leq n leq 100,000, 1 leq k leq 1,000,000). The next line contains n positive integers separated by spaces, a_1, a_2, ldots, a_n (1 leq a_i leq 1,000,000). Output a single integer — the number of pairs (a_i, a_j) where 1 leq i < j leq n and |a_i - a_j| = k. Sample Input: ``` 5 2 1 5 3 4 2 ``` Sample Output: ``` 3 ``` Explanation: The pairs with a difference of 2 are: (1, 3), (5, 3), and (4, 2). There are 3 such pairs in total.","solution":"def count_pairs_with_difference_k(n, k, arr): Returns the number of pairs (i, j) such that 1 ≤ i < j ≤ n and |arr[i] - arr[j]| = k. count = 0 value_set = set(arr) for num in arr: if (num + k) in value_set: count += 1 if (num - k) in value_set: count += 1 count = count // 2 # Each pair is counted twice, hence divide by 2 return count # Example use print(count_pairs_with_difference_k(5, 2, [1, 5, 3, 4, 2])) # Output: 3"},{"question":"You are given an array of n integers. You need to perform a series of m operations where each operation decreases the value of a single element in the array by 1. After all operations have been performed, determine the total number of unique elements in the array. The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^5) – the number of elements in the array and the number of operations to be performed, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the initial elements of the array. Print a single integer – the number of unique elements in the array after performing all m operations. Input: ``` 5 3 1 2 2 3 4 ``` Output: ``` 4 ``` **Note:** After 3 operations, the array could look like this: [1, 1, 1, 3, 4] (one way to achieve 4 unique elements).","solution":"def unique_elements_after_operations(n, m, array): Given an array of n integers and m operations where each operation decreases any element in the array by 1, this function returns the number of unique elements in the array after performing all m operations. Parameters: n (int): The number of elements in the array. m (int): The number of operations to be performed. array (list of int): The initial elements of the array. Returns: int: The number of unique elements in the array after performing all operations. # Initial sorting of the array array.sort() # Perform all operations on the smallest elements # Decrease each element in order until we have exhausted all operations for i in range(m): array[0] -= 1 array.sort() # Return the number of unique elements after all operations return len(set(array))"},{"question":"Tom has a grid of size n x m filled with numbers. The grid is represented by an array of n strings, each string has m characters, where each character is a digit between \'0\' and \'9\'. Tom wants to find the maximum sum of numbers in any grid rectangle. A rectangle is defined by selecting two different horizontal lines and two different vertical lines forming its boundary. The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. The next n lines each contain m characters, where each character is a digit between \'0\' and \'9\'. Output the maximum sum of any grid rectangle. For example: Given the input: 3 3 123 456 789 The maximum sum of any rectangle is 45, which can be achieved by selecting the entire grid. Given the input: 2 2 99 99 The maximum sum of any rectangle is 36, as all rectangles formed will have the same sum 36 in this case.","solution":"def max_sum_subrectangle(grid): n = len(grid) m = len(grid[0]) # Convert grid elements from string to integers int_grid = [[int(grid[i][j]) for j in range(m)] for i in range(n)] # Initialize dp array for the max sum max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += int_grid[i][right] current_sum = 0 current_max = float(\'-inf\') for num in temp: current_sum = max(num, current_sum + num) current_max = max(current_max, current_sum) max_sum = max(max_sum, current_max) return max_sum"},{"question":"Given an array of integers, determine if there exists a subset of the array with a sum equal to a given target value. Your task is to implement a function that checks if such a subset exists. The input consists of two lines. The first line contains two integers n and target (1 ≤ n ≤ 100, 0 ≤ target ≤ 1000) representing the number of elements in the array and the target sum respectively. The second line contains n integers a[i] (1 ≤ a[i] ≤ 1000) which represent the elements of the array. Output \\"YES\\" if there exists a subset of the array that adds up to the target value, otherwise print \\"NO\\". # Example Input: ``` 5 9 2 3 7 8 10 ``` # Example Output: ``` YES ``` # Explanation: There is a subset {2, 7} which adds up to 9. Implement the function using proper algorithms and data structures, aiming for efficiency and clarity in your solution. Ensure to consider edge cases where the subset sum might be equal to zero or when all numbers are very close to the target sum.","solution":"def subset_sum_exists(n, target, arr): Determines if there exists a subset of the array `arr` with a sum equal to `target`. Args: n (int): Number of elements in the array. target (int): The target sum. arr (list of int): The array of elements. Returns: str: \\"YES\\" if there exists a subset that adds up to the target, otherwise \\"NO\\". # Initialize a dp array where dp[i] means if the subset sum i is possible dp = [False] * (target + 1) dp[0] = True # There is always a subset with sum 0 (empty subset) # Iterate over each number in the array for num in arr: # Traverse the dp array backward for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Polycarp is a fan of beach vacations and he loves creating sandcastles. He likes to measure the height of his sandcastles using a special stick. The stick has marked points from 0 to h where each discrete point represents a height. One day, Polycarp decided to measure the possible heights of multiple sandcastles he made on the same day. He recorded the height of each sandcastle in an array. After completing his measurements, Polycarp noticed that some heights repeated. He wants to know the maximum height that he recorded and how many times he recorded that maximum height. Your task is to help Polycarp by writing a function that takes an array of heights and returns the maximum height and its frequency. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of sandcastles Polycarp measured. - The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^6) — the heights of the sandcastles. # Output - Print two integers: the maximum height that Polycarp recorded and the number of times this height was recorded. # Example Input ``` 5 3 1 2 3 3 ``` Output ``` 3 3 ``` In this example, the maximum height recorded by Polycarp is 3, and it appears 3 times in the array.","solution":"def find_max_height_and_frequency(n, heights): Returns the maximum height and its frequency from the list of heights. max_height = max(heights) frequency = heights.count(max_height) return max_height, frequency # Example usage: # n = 5 # heights = [3, 1, 2, 3, 3] # output = find_max_height_and_frequency(n, heights) # print(output) # Should print (3, 3)"},{"question":"In a distant kingdom, there are N cities connected by M bidirectional roads. Each city has a certain number of soldiers stationed there. The king wants to ensure the kingdom\'s safety by determining the minimum number of soldiers needed in each city\'s defense to be able to reach every other city directly or indirectly. To determine this, you\'ll have to calculate the minimum number of soldiers needed for each city, such that if a city is invaded and its soldiers are used to defend against the invaders, then no city can be disconnected from the rest of the kingdom. The first line of input contains two integers, N (1 ≤ N ≤ 100,000) representing the number of cities and M (1 ≤ M ≤ 200,000) representing the number of roads. The second line contains N integers where the i-th integer represents the number of soldiers present in the i-th city (0 ≤ soldiers ≤ 1000). The next M lines each contain two integers u and v (1 ≤ u, v ≤ N) representing a bidirectional road between city u and city v. Output one integer — the minimum number of soldiers needed. For example, consider this input: ``` 5 4 10 20 30 40 50 1 2 1 3 2 4 3 5 ``` The output would be: ``` 150 ``` Explanation: In this example, the entire kingdom can be traversed and adding the soldiers from all cities ensures the kingdom\'s connectivity.","solution":"def minimum_soldiers_needed(N, M, soldiers, roads): from collections import defaultdict, deque # Initialize the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # To keep track of visited cities visited = [False] * N def bfs(city): queue = deque([city]) visited[city] = True total_soldiers = soldiers[city] while queue: current_city = queue.popleft() for neighbor in graph[current_city + 1]: # `+ 1` to convert to 1-based index neighbor -= 1 # Convert back to 0-based index if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) total_soldiers += soldiers[neighbor] return total_soldiers min_soldiers = 0 # Go through each city to find all connected components for city in range(N): if not visited[city]: min_soldiers += bfs(city) return min_soldiers # Example usage: # N = 5 # M = 4 # soldiers = [10, 20, 30, 40, 50] # roads = [(1, 2), (1, 3), (2, 4), (3, 5)] # print(minimum_soldiers_needed(N, M, soldiers, roads)) # Output: 150"},{"question":"You are given a grid composed of cells, where each cell can hold a positive integer. The goal is to compute the sum of integers in a sub-grid. Define the following operations: 1. **Updating a Cell Value:** Change the integer in a specific cell of the grid. 2. **Querying a Sub-grid Sum:** Compute the sum of integers in a sub-grid specified by its top-left and bottom-right coordinates. The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, initially filled with zeros. The second line contains one integer q (1 le q le 100000) — the number of operations. Each of the next q lines represents an operation, either of the form: - `1 x y v` — Update the cell at row `x` and column `y` to the value `v`. - `2 x1 y1 x2 y2` — Query the sum of the sub-grid from row `x1`, column `y1`, to row `x2`, column `y2`. Here, 1 le x, y, x1, y1, x2, y2 le n, m, and -10^9 le v le 10^9. For each query of the second type, output the sum of the specified sub-grid. # Input ``` 2 3 5 1 1 1 5 1 2 3 10 2 1 1 2 3 1 2 2 -3 2 1 2 2 3 ``` # Output ``` 15 7 ``` Explanation: - After the first operation, the cell at (1, 1) is updated to 5. - After the second operation, the cell at (2, 3) is updated to 10. - The third operation queries the sub-grid from (1, 1) to (2, 3), resulting in the sum 15. - The fourth operation updates the cell at (2, 2) to -3. - The fifth operation queries the sub-grid from (1, 2) to (2, 3), resulting in the sum 7.","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] def update(self, x, y, value): self.grid[x - 1][y - 1] = value def query(self, x1, y1, x2, y2): total = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): total += self.grid[i][j] return total def process_operations(n, m, operations): grid = Grid(n, m) result = [] for op in operations: parts = list(map(int, op.split())) if parts[0] == 1: _, x, y, v = parts grid.update(x, y, v) elif parts[0] == 2: _, x1, y1, x2, y2 = parts result.append(grid.query(x1, y1, x2, y2)) return result"},{"question":"Hector and Juan are playing a game using a binary string s of length n. The game unfolds as follows: - Players take turns, with Hector going first. - On a player\'s turn, the player selects any substring of s that contains only \'1\'s and changes any single \'1\' in that substring to \'0\'. - The game ends when there are no substrings containing only \'1\'s left in s. - The player who cannot make a move loses the game. Given the binary string s, determine which player will win if both Hector and Juan play optimally. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the binary string. The second line contains the binary string s of length n, consisting of \'0\'s and \'1\'s only. Print \\"Hector\\" (without quotes) if Hector wins the game, and \\"Juan\\" (without quotes) if Juan wins the game. **Example:** Input: ``` 5 10110 ``` Output: ``` Hector ``` Explanation: Hector starts by changing the first \'1\' in the second substring to \'0\', resulting in the string \\"10010\\". Now, Juan takes the remaining valid move to change the \'1\' in the third substring to \'0\', resulting in the string \\"10000\\". Hector then changes the \'1\' in the first substring to \'0\', leaving no \'1\'s in the string, ensuring that Juan cannot make a move. Therefore, Hector wins.","solution":"def determine_winner(n, s): Determines the winner of the game based on the given binary string s. Parameters: n (int): The length of binary string s. s (str): The binary string. Returns: str: \\"Hector\\" if Hector wins, and \\"Juan\\" if Juan wins. # Count the total number of \'1\' in the string count_of_ones = s.count(\'1\') # If count_of_ones is even, Juan wins because Hector will eventually have # no move. If count_of_ones is odd, Hector wins. if count_of_ones % 2 == 0: return \\"Juan\\" else: return \\"Hector\\""},{"question":"You are given an array of n integers and q queries. Each query can be one of the following types: 1. **Update Query**: Update the value at a given index in the array. 2. **Range Query**: Find the sum of a subarray between two given indices (inclusive). You need to handle these queries efficiently. The first line of the input contains two integers n and q (1≤n,q≤100,000) — the size of the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the initial elements of the array. Each of the next q lines contains a query in one of the following formats: - `1 x y` (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9): Update the element at index x to y. - `2 l r` (1 ≤ l ≤ r ≤ n): Calculate the sum of the elements from index l to r (inclusive). Output the result of each range query in the order they are received. **Example:** **Input:** ``` 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 ``` **Output:** ``` 6 14 22 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree self.build(data) def build(self, data): # Fill the leaves with the original array data for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parent nodes for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): # Update the value at the leaf node and propagate the change upwards pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): # Calculate sum in range [left, right] left += self.n right += self.n + 1 sum = 0 while left < right: if left % 2: sum += self.tree[left] left += 1 if right % 2: right -= 1 sum += self.tree[right] left //= 2 right //= 2 return sum def handle_queries(n, q, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: index, value = query[1] - 1, query[2] segment_tree.update(index, value) elif query[0] == 2: left, right = query[1] - 1, query[2] - 1 result = segment_tree.range_sum(left, right) results.append(result) return results"},{"question":"Polycarp has a friend named Monocarp who loves arithmetic progressions. An arithmetic progression of length three is a sequence of numbers a1, a2, a3 such that the difference between consecutive terms is constant, i.e., a2 - a1 = a3 - a2. Given an integer array `arr` of length `n`, Monocarp wants to determine how many subsequences of length three form an arithmetic progression. A subsequence of length three is defined by three indices i, j, k (1 ≤ i < j < k ≤ n) such that the elements at these indices form an arithmetic progression. The first line of the input contains an integer n (3 ≤ n ≤ 2×10^5), indicating the length of the array. The second line contains n integers arr1, arr2, ..., arrn (-10^9 ≤ arr_i ≤ 10^9), the elements of the array. Output a single integer — the number of subsequences of length three that form an arithmetic progression. **Example:** Input: ``` 6 1 5 3 7 9 5 ``` Output: ``` 3 ``` Explanation: The valid arithmetic progressions are: - (1, 3, 5) - (3, 5, 7) - (5, 7, 9) Note that the elements do not need to be consecutive in the array, but their indices must be in strictly increasing order. The three number groups here consist of indices such that for each group the difference between consecutive terms is equal.","solution":"def count_arithmetic_triplets(arr): Returns the number of subsequences of length three in the array that form an arithmetic progression. n = len(arr) count = 0 for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if arr[j] - arr[i] == arr[k] - arr[j]: count += 1 return count"},{"question":"You are given a sequence of integers and you need to determine if it\'s possible to reorder the sequence in such a way that each number appears exactly once and the absolute difference between any two adjacent numbers is at most 1. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output YES if it is possible to reorder the sequence to meet the conditions, and NO otherwise. For example: Input: 4 3 1 2 3 Output: YES Input: 4 3 2 5 1 Output: NO","solution":"def can_reorder(nums): Determines if it\'s possible to reorder the sequence such that each number appears exactly once and the absolute difference between any two adjacent numbers is at most 1. Args: nums (list of int): The sequence of integers. Returns: str: \\"YES\\" if it is possible to reorder the sequence, \\"NO\\" otherwise. nums.sort() for i in range(1, len(nums)): if nums[i] - nums[i-1] > 1: return \\"NO\\" return \\"YES\\""},{"question":"You run a company that has hired multiple teams to work on different projects. Each team has been assigned a particular budget, and you want to allocate funds to the team based on their progress. However, you have a constraint that you cannot allocate more than a specified amount to any team within a single distribution period. Given the number of teams, their corresponding budgets, and the maximum funds you can distribute to any team in one period, you need to find out the minimum number of distribution periods required to fulfill all budgets. For this task, you will receive an integer `n` representing the number of teams, an array `budgets` of length `n` where `budgets[i]` is the budget of the i-th team, and an integer `max_funds`. Your objective is to compute the minimum number of distribution periods required. Input: - The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `max_funds` (1 ≤ max_funds ≤ 1,000). - The second line contains `n` integers, where the i-th integer is the budget of the i-th team (1 ≤ budgets[i] ≤ 1,000,000). Output: - Print a single integer, the minimum number of distribution periods required. Example Input: ``` 5 100 120 150 80 200 90 ``` Example Output: ``` 8 ``` Explanation: - Team 1: Requires 120 funds, needs 2 periods (100 + 20). - Team 2: Requires 150 funds, needs 2 periods (100 + 50). - Team 3: Requires 80 funds, needs 1 period (80). - Team 4: Requires 200 funds, needs 2 periods (100 + 100). - Team 5: Requires 90 funds, needs 1 period (90). Thus, the total minimum number of periods required is 2 + 2 + 1 + 2 + 1 = 8.","solution":"def min_distribution_periods(n, max_funds, budgets): total_periods = 0 for budget in budgets: periods = (budget + max_funds - 1) // max_funds total_periods += periods return total_periods"},{"question":"The kingdom of Farland is a prosperous region known for its powerful knights and magical beings. Recently, their king has called upon a special architect to plan the largest rectangular castle that can be built using specific sections of land within the kingdom. The kingdom is represented as a 2D grid of size n × m, where each cell either contains usable land (represented by a `1`) or is blocked (represented by a `0`). The cells marked with `1` can be part of the castle. The castle must be a rectangle, oriented parallel to the grid axes. Your task is to determine the area of the largest rectangular castle that can be built using the usable land cells. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. Each of the next n lines contains m integers (either 0 or 1) denoting the grid. Print a single integer, the area of the largest rectangular castle that can be built. # Example: Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output: ``` 6 ``` In this example, the largest rectangle of `1`s has an area of 6 (spanning rows 3 to 4 and columns 2 to 4).","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) # Initialize variables max_area = 0 # Heights array heights = [0] * m for row in range(n): for col in range(m): # Update the heights histogram for the current row if matrix[row][col] == 1: heights[col] += 1 else: heights[col] = 0 # Calculate the max area for the current row\'s histogram max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) # Append a zero to flush out remaining heights from stack for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area"},{"question":"You are given a list of strings. Your task is to determine if there exists a string in the list that can be constructed using the letters of any two distinct strings from the same list. A string can use the letters of two other strings if its letter count does not exceed the sum of the counts of those letters in the two strings. The first line contains a single integer N (2 ≤ N ≤ 20), the number of strings in the list. The next N lines each contain one string consisting only of lowercase English letters. The length of each string is between 1 and 50, inclusive. Output \\"YES\\" if there exists such a string, otherwise output \\"NO\\". # Sample Input: 4 abc def ab cdef # Sample Output: YES # Explanation: The string \\"abcdef\\" can be constructed using the letters of \\"abc\\" and \\"def\\".","solution":"from collections import Counter from itertools import combinations def can_be_constructed(strings): Determines if there exists a string in the list that can be constructed using the letters of any two distinct strings from the same list. n = len(strings) # Create counters for each string counters = [Counter(string) for string in strings] # Check all possible combinations of any two distinct strings for i in range(n): for j in range(i + 1, n): combined_counter = counters[i] + counters[j] # Check if any string can be formed by the combined counter for k in range(n): if k != i and k != j and not (Counter(strings[k]) - combined_counter): return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) strings = data[1:] print(can_be_constructed(strings))"},{"question":"Alice is organizing a multi-day camp for the local chess club, consisting of exactly n days. She plans to organize multiple chess matches each day. Alice has a list of the number of chess matches she wants to hold on each day. Upon reviewing her setup, Alice noticed that one particular day had the fewest matches scheduled. To make the event more balanced, she wants to ensure that this least active day better matches the activity level of the other days. Therefore, Alice decided to find the smallest number of additional matches that need to be scheduled on the least active day to ensure that it has at least at much as the second least active day. Write a program to assist Alice by calculating the required number of additional matches. # Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of days. The second line contains n integers representing the number of chess matches scheduled each day. These integers are in the range [0, 10^4]. # Output Print a single integer — the smallest number of additional matches that need to be scheduled on the least active day to make it at least as active as the second least active day. # Example Input ``` 4 5 2 2 3 ``` Output ``` 1 ``` Explanation In this example, the least active day has 2 matches, and the second least active day also has 2 matches. To ensure the least active day (with 2 matches) is at least as active as the second least active day, we don\'t need any more matches. Thus, the answer is 0.","solution":"def additional_matches_needed(n, matches): # Sort the list of matches matches_sorted = sorted(matches) # The least active day will be the first element in the sorted matches # The second least active day will be the second element in the sorted matches least_active = matches_sorted[0] second_least_active = matches_sorted[1] # Calculate the additional matches needed additional_matches = second_least_active - least_active return additional_matches"},{"question":"Samantha loves playing with strings. One day, while exploring new ways to manipulate them, she came across an interesting problem. Given a string, she wants to remove characters in such a way that the remaining string is a palindrome. Strings are case-sensitive and only contain lowercase letters. For example, in the string \\"abca\\", removing the character \'b\' or \'c\' results in the palindrome \\"aca\\" or \\"aba\\". Now she needs your help to find the minimum number of characters that should be removed to make the given string a palindrome. The first line contains a single integer t (1 leq t leq 10^5) — the number of test cases. Next, you will have t test cases. Each test case consists of a single line containing a string s (1 leq |s| leq 10^3). For each test case, print a single integer — the minimum number of characters needed to be removed to make the string a palindrome. # Example ``` Input: 3 abca racecar abcdef Output: 1 0 5 ``` # Explanation 1. For the string \\"abca\\", removing \'b\' or \'c\' makes it a palindrome \\"aca\\" or \\"aba\\". 2. The string \\"racecar\\" is already a palindrome, so no removals are needed. 3. For the string \\"abcdef\\", five characters need to be removed to make \\"a\\" or \\"f\\" a palindrome. In case there are multiple valid solutions with the same minimum number of character removals, any one of them is acceptable.","solution":"def min_removals_to_make_palindrome(s: str) -> int: Returns the minimum number of characters that should be removed to make the given string a palindrome. Args: s (str): The input string Returns: int: Minimum number of removals needed def longest_palindromic_subsequence(s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps_length = longest_palindromic_subsequence(s) return len(s) - lps_length def process_test_cases(t: int, test_cases: [str]) -> [int]: results = [] for s in test_cases: results.append(min_removals_to_make_palindrome(s)) return results"},{"question":"Given an array of integers, your task is to determine the smallest positive integer that is missing from the array. The smallest positive integer is defined as the minimal integer greater than 0 that does not appear in the array. Write a function `smallest_missing_positive` that takes an array of integers and returns the smallest positive integer that is not in the array. # Input - The first line of input contains an integer `t` (1 le t le 100) — the number of test cases. - The first line of each test case contains an integer `n` (1 le n le 1000) — the number of elements in the array. - The second line of each test case contains `n` integers, the elements of the array. Each element is an integer within the range of -10^6 to 10^6. # Output - For each test case, output a single line containing the smallest positive integer that is missing from the array. # Example ``` Input: 3 5 1 2 3 4 5 5 0 -1 2 3 4 5 -1 -2 -3 -4 -5 Output: 6 1 1 ``` # Constraints - You must ensure your solution runs efficiently on the largest possible inputs. - The sum of `n` across all test cases will not exceed 1000.","solution":"def smallest_missing_positive(arr): Returns the smallest positive integer missing from the array. arr_set = set(arr) missing_positive = 1 while missing_positive in arr_set: missing_positive += 1 return missing_positive def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(smallest_missing_positive(arr)) return results"},{"question":"You are given an integer array `nums` consisting of `n` positive integers. Your task is to determine the minimum number of times you need to perform the following operation to make all the values in the array equal: - Select any two elements of the array, and increase one of them by 1 and decrement the other by 1. After each operation, the total sum of the elements in the array remains unchanged. Once all elements are identical, print the number of operations needed. # Input The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 2 * 10^5) – the number of integers in the array. - The second line contains `n` space-separated integers, each integer `ai` (1 ≤ ai ≤ 10^9) – the elements of the array. The total sum of `n` over all test cases does not exceed 2 * 10^5. # Output For each test case, print a single integer – the minimum number of operations required to make all elements in the array equal. # Example Input ``` 3 5 1 2 3 4 5 4 10 10 10 10 3 1 10 1 ``` Output ``` 4 0 8 ``` Explanation - In the first test case, you need 4 operations to make all elements 3. - In the second test case, all elements are already equal, so no operations are needed. - In the third test case, you need 8 operations to make all elements 4.","solution":"def min_operations_to_equalize(nums): max_num = max(nums) min_num = min(nums) return max_num - min_num def process_test_cases(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] results.append(min_operations_to_equalize(nums)) return results"},{"question":"Kevin is working on organizing a special sequence of integers for his research. He needs your help to determine some properties of this sequence. The sequence is composed of positive integers and is defined as follows: - Each integer in the sequence is the smallest possible integer that has not been included in any previous calculations for the same positions. The first integer must be 1. For each subsequent position i (2 ≤ i ≤ n), the integer is defined as the smallest positive integer that cannot be expressed as the sum of any subset of the first i-1 integers of the sequence. Given the length of the sequence `n`, your task is to determine the value of the integer at the nth position. The first line contains a single integer `n` (1 ≤ n ≤ 10^3), the length of the sequence. Print a single integer — the value of the integer at the nth position in the sequence. # Example Input: ``` 4 ``` Output: ``` 4 ``` Input: ``` 10 ``` Output: ``` 20 ```","solution":"def find_nth_sequence_value(n): Given an integer n, returns the nth value in the special sequence. # The first element in the sequence is always 1 if n == 1: return 1 sequence = [1] for i in range(2, n + 1): sum_existing = {0} # Generate all possible sums of subsets of current sequence for x in sequence: new_sums = set() for y in sum_existing: new_sums.add(y + x) sum_existing.update(new_sums) # Find the smallest positive integer not in sum_existing next_value = 1 while next_value in sum_existing: next_value += 1 # Add this next value to the sequence sequence.append(next_value) return sequence[-1]"},{"question":"You are given a rectangular grid with `n` rows and `m` columns, consisting of only two types of cells: \'.\' representing an empty cell and \'*\' representing a blocked cell. A path through the grid is defined by moving from one cell to an adjacent cell (horizontally or vertically, but not diagonally), starting at the top-left cell (1, 1) and ending at the bottom-right cell (n, m). Your task is to write a program to determine whether there exists a path from the top-left to the bottom-right cell, which avoids all the blocked cells. If it is possible to find such a path, the program should output \\"Yes\\", otherwise output \\"No\\". The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next `n` lines contain `m` characters each (either \'.\' or \'*\') representing the grid. Consider the following cases: 1. The starting cell (1, 1) and the ending cell (n, m) will always be \'.\'. 2. If there is no valid path, print \\"No\\". 3. If there is a valid path, print \\"Yes\\". # Example: Input: ``` 4 4 .... .*.. .*.. .... ``` Output: ``` Yes ``` Input: ``` 4 4 .... **** .... .... ``` Output: ``` No ``` Choose the efficient algorithm to determine the path, allowing for large-sized grids up to the constraints specified.","solution":"def is_path_possible(n, m, grid): Determines if there is a path from the top-left corner (1, 1) to the bottom-right corner (n, m) avoiding all blocked cells (\'*\') in the grid. Args: - n (int): number of rows - m (int): number of columns - grid (list of str): n x m grid Returns: - str: \\"Yes\\" if a path exists, \\"No\\" otherwise from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with the starting point (0, 0) queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, m - 1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\""},{"question":"Anna and Bob are playing a game with a sequence of integers. They take turns, and on each turn, a player must select any two adjacent numbers in the sequence, then remove one of them. The game continues until only one number remains in the sequence, and that number is the score of the last player who performed a move. Anna always goes first. Both players want to maximize their final score. Given the initial sequence of integers, determine the score that Anna will end up with if both play optimally. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial sequence. Output a single integer — the score that Anna will end up with at the end of the game. For example: ``` Input: 5 4 2 7 5 9 Output: 9 ``` In this example, one optimal strategy is for Anna to remove the number 2 first (selecting between 4 and 2), then proceeding optimally ensures she ends up with 9 as her final score.","solution":"def maximum_number_remaining(n, sequence): Returns the final number left in the sequence if both players play optimally. Args: n (int): Length of the sequence sequence (list of int): The initial sequence of integers Returns: int: The final number remaining in the sequence return max(sequence) # Example usage: # print(maximum_number_remaining(5, [4, 2, 7, 5, 9])) # Output: 9"},{"question":"Given a list of n integers, you need to process q queries. In each query you will be given two integers l and r (1 ≤ l ≤ r ≤ n). You need to calculate the sum of the elements from index l to r (both inclusive). Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 200,000) - the number of elements in the list and the number of queries respectively. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) - the elements of the list. - The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) - representing a query. Output: - Output q lines, each containing the sum for the corresponding query. Example: Input: 6 3 1 2 3 4 5 6 1 3 2 5 3 6 Output: 6 14 18 Explanation: - For the first query l=1, r=3, the sum is 1+2+3 = 6. - For the second query l=2, r=5, the sum is 2+3+4+5 = 14. - For the third query l=3, r=6, the sum is 3+4+5+6 = 18. Note: To efficiently answer the queries, consider using a prefix sum array to store cumulative sums of elements, which allows you to compute each range sum in constant time.","solution":"def process_queries(n, q, elements, queries): Given the number of elements, number of queries, the elements list and the queries, compute the sum of elements for each query defined by (l, r). :param n: int, number of elements in the list :param q: int, number of queries :param elements: list of int, n elements in the list :param queries: list of tuple, each tuple contains two integers (l, r) :return: list of int, the sum of elements for each query # Compute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + elements[i - 1] result = [] for l, r in queries: query_sum = prefix_sums[r] - prefix_sums[l - 1] result.append(query_sum) return result"},{"question":"Freddy is fascinated by unique strings. A string is considered unique if no two adjacent characters are the same. Freddy has a collection of strings, and he wants to transform each string into a unique string by deleting the minimum number of characters. Given a string s with length n (1 ≤ n ≤ 10^5), your task is to determine the minimum number of characters to delete to make the string unique. A single line contains the string s. Output a single integer denoting the minimum number of deletions required. For example: Input: aabb Output: 2 In the input example, you can delete two \'b\' to obtain the unique string \\"ab\\". Input: ab Output: 0 In the input example, the string is already unique so no deletions are required.","solution":"def min_deletions_to_unique(s): This function takes a string s and returns the minimum number of deletions required to make the string unique, i.e., no two adjacent characters are the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions"},{"question":"In a distant kingdom, a famous chef is known for creating special sauces that add unique flavors to dishes based on the combination of ingredients. The chef uses precisely 10 different types of ingredients labeled from 0 to 9. To create a sauce, the chef combines **n** ingredients in a specific sequence. Each ingredient in the sequence must be unique, and their order defines the sauce\'s flavor. The chef has received a large order to create multiple sauces, and he wants to ensure that no two sauces are identical. Exhausted from preparing so many dishes, the chef seeks your help to determine the exact number of different sauces that can be made using **n** ingredients. Given an integer **n** (1 ≤ n ≤ 10), determine the number of unique sauces that can be created. The input consists of a single integer **n**, representing the number of ingredients in each sauce. Output a single integer — the total number of unique sauces that can be created using **n** distinct ingredients out of the 10 available ingredients. # Example: Input: 2 Output: 90 Explanation: For **n = 2**, you can create different sauces using combinations of any 2 ingredients chosen from 10. The number of ways to choose 2 ingredients from 10 is 10P2 (permutations of 10 items taken 2 at a time), which equals 10 * 9 = 90.","solution":"from math import factorial def unique_sauces(n): Calculates the number of unique sauces that can be created using n unique ingredients chosen from 10 available ingredients. Parameters: n (int): Number of ingredients in each sauce Returns: int: Number of unique sauces return factorial(10) // factorial(10 - n)"},{"question":"Petya loves solving logical puzzles in his free time. Recently, he came across a problem involving digital numbers displayed on a seven-segment display. Each digit from 0 to 9 is represented uniquely by illuminating some of the seven segments. Petya\'s challenge is to find sequences of digits that form valid times on a 24-hour digital clock display. A time on a 24-hour digital clock is represented as \\"HH:MM\\", where \\"HH\\" is the hour (00 to 23) and \\"MM\\" is the minutes (00 to 59). Each segment in the display can be either on or off. Petya is given n integers, each representing different configurations of the segments for a digit (0 to 9). He needs to determine whether these segments can form a valid time on a 24-hour clock. Help Petya by writing a program that takes the seven-segment configurations as input and determines if there exists any sequence of these configurations that could represent a valid time on a 24-hour digital clock. The first line of the input contains a single integer n (1 ≤ n ≤ 10) — the number of segment configurations. The next n lines each contain a single integer between 0 and 127, where the binary representation of the integer indicates which of the 7 segments are illuminated. Each of the seven bits corresponds to a segment, and a bit value of 1 means the segment is illuminated, while 0 means it is off. The segments are ordered as follows (representing the segments from top to bottom, left to right): ``` 0 1 2 3 4 5 6 ``` For example, the number 8 (with all segments on) would be represented as the integer 127 (binary 1111111). Output \\"Yes\\" if any sequence of the provided configurations can form a valid time (HH:MM); otherwise, output \\"No\\". # Examples: Input: ``` 3 63 91 79 ``` Output: ``` Yes ``` Input: ``` 2 63 79 ``` Output: ``` No ```","solution":"def can_form_valid_time(n, segment_configurations): # Define the possible segment configurations for each digit from 0 to 9 digit_to_segments = { 0: 0b1110111, # 0 1: 0b0100100, # 1 2: 0b1011101, # 2 3: 0b1101101, # 3 4: 0b0101110, # 4 5: 0b1101011, # 5 6: 0b1111011, # 6 7: 0b0100101, # 7 8: 0b1111111, # 8 9: 0b1101111 # 9 } # Convert the input segment configurations to a list of possible digits possible_digits = [] for config in segment_configurations: possible_digits.append([digit for digit, segments in digit_to_segments.items() if segments == config]) # Check all combinations of possible digits to form a valid time (HH:MM) for h1 in possible_digits[0]: for h2 in possible_digits[1]: if h1 * 10 + h2 < 24: for m1 in possible_digits[2]: for m2 in possible_digits[3]: if m1 * 10 + m2 < 60: return \\"Yes\\" return \\"No\\""},{"question":"You are a game developer working on an exciting new multiplayer game. In this game, players need to form teams and complete challenges together. Each player has a specific skill level, and you want to form teams such that the skill levels within each team are as balanced as possible to ensure fair gameplay. To create balanced teams, you need to sort players into n teams. Each team must have at least one player. The most balanced team distribution is the one where the maximum difference in total skill level between any two teams is minimized. Given the total number of players m and their respective skill levels, determine the minimum possible maximum difference in total skill level between any two teams. The first line contains two integers n (1 ≤ n ≤ 10^5) and m (n ≤ m ≤ 10^5) separated by a space — the number of teams and the number of players. The second line contains m space-separated integers s1, s2, …, sm (1 ≤ si ≤ 10^9) — the skill levels of the players. Print a single integer — the minimum possible maximum difference in total skill level between any two teams. Example: ``` Input: 3 6 5 8 7 6 10 12 Output: 2 ``` Explanation: One of the possible ways of forming three teams in this example such that the maximum difference in total skill level is minimized is: - Team 1: {5, 12} with a total skill level of 17. - Team 2: {6, 10} with a total skill level of 16. - Team 3: {7, 8} with a total skill level of 15. The maximum difference in skill levels between Team 1 and Team 3 is 2, which is the minimal possible maximum difference.","solution":"def min_max_diff(n, m, skill_levels): if n == 1: return max(skill_levels) - min(skill_levels) skill_levels.sort() min_diff = float(\'inf\') for i in range(m - n + 1): min_diff = min(min_diff, skill_levels[i + n - 1] - skill_levels[i]) return min_diff # Example usage n, m = 3, 6 skill_levels = [5, 8, 7, 6, 10, 12] print(min_max_diff(n, m, skill_levels))"},{"question":"Jonathan has a collection of n unique keys numbered from 1 to n. Jonathan loves to create chains of keys. A chain is defined as a list of unique key numbers in which each key (except the first and the last key) shares a common divisor greater than 1 with the next key in the list. Jonathan has noticed that many of his chains are not the longest possible. He wants to rearrange his collection to find the longest chain under the given constraints. Help Jonathan determine the maximum length of such a chain. The first line contains a single integer n (1 leq n leq 10^5), representing the number of keys in Jonathan’s collection. Print a single integer: the maximum length of a chain that can be formed using all the keys. For example: Input 1: ``` 4 ``` Output 1: ``` 4 ``` Explanation 1: One valid chain could be [1, 2, 4, 3] because each adjacent pair shares a common divisor (2 shares a divisor with 4, 4 shares a divisor with 3, and so on). Input 2: ``` 6 ``` Output 2: ``` 6 ``` Explanation 2: A possible chain could be [1,2,4,6,3,5] showing the maximal length using all keys. Note: The problem expects you to assemble keys into the longest possible chain without breaking any constraints, using each key number exactly once.","solution":"def longest_chain_length(n): Returns the maximum possible length of a chain of keys numbered from 1 to n, under the constraints that each key (except the first and last) shares a common divisor greater than 1 with the next key in the list. # In fact, the maximum length chain includes all keys from 1 to n # as they can always be ordered in some way. return n"},{"question":"You are playing a game where you fight against monsters in a dungeon. The dungeon consists of n rooms arranged in a line. Each room has a certain number of monsters and a certain amount of energy that you can receive from defeating the monsters in that room. Enter the dungeon starting from the first room. You must defeat all monsters in each room you enter. However, defeating the monsters will decrease your health by a certain amount which is their combined strength. The goal is to finish the dungeon with the maximum possible remaining health. You start with a health of h at the beginning. Each room\'s information is given by two integers: the number of monsters mi and the energy ei you receive from defeating them. The strength of each monster in a room sums up to s_i. These monsters should be defeated in a sequential manner from room 1 to room n including receiving all energy bonuses along the way. The first line of the input contains the two integers n (1 ≤ n ≤ 50) and h (1 ≤ h ≤ 1000) — the number of rooms and initial health, respectively. The next n lines each contain three integers: mi (1 ≤ mi ≤ 100), ei (1 ≤ ei ≤ 100), and si (1 ≤ si ≤ 1000) — the number of monsters, energy bonus, and the total strength of monsters in the i-th room respectively. Print one line — the maximum remaining health you can have after clearing all rooms. If it is impossible to finish the dungeon, print \\"Impossible\\". Examples: Input: 3 120 3 30 40 2 20 30 1 15 25 Output: 90 Input: 2 50 2 40 60 3 15 80 Output: Impossible","solution":"def max_remaining_health(n, h, rooms): Returns the maximum remaining health after clearing all rooms, or \'Impossible\' if health drops to zero or below at any point. Args: n (int): Number of rooms. h (int): Initial health. rooms (list): List of tuples where each tuple contains (number of monsters, energy received, total strength of monsters in the room). Returns: int or str: The maximum remaining health or \'Impossible\'. for monsters, energy, strength in rooms: h -= strength if h <= 0: return \\"Impossible\\" h += energy return h"},{"question":"The university theoretical computer science department just got a new puzzle for their students. They are given a sequence of brackets (parentheses). The puzzle is to check whether for every valid prefix of the sequence, the number of opening brackets is no less than the number of closing brackets. Specifically, the students are given a sequence of n brackets represented by a string of length n consisting of characters \'(\' and \')\'. The students need to verify if the sequence is valid based on the condition mentioned. Write a function that determines if the sequence is valid. The input format: The input consists of a single string s of length n (1 ≤ n ≤ 100,000) consisting only of the characters \'(\' and \')\'. The output format: Output \\"Yes\\" if the sequence is valid based on the condition described, otherwise output \\"No\\". Example Input: ()() Example Output: Yes Example Input: ())( Example Output: No","solution":"def is_valid_bracket_sequence(s): Determines whether the sequence of brackets is valid based on the condition that for every valid prefix of the sequence, the number of opening brackets is no less than the number of closing brackets. :param s: A string consisting only of characters \'(\' and \')\' :return: \\"Yes\\" if the sequence is valid, otherwise \\"No\\" balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return \\"No\\" return \\"Yes\\" if balance == 0 else \\"No\\""},{"question":"Given a set of n intervals on the real line, you need to determine the minimum number of points required to cover all intervals. A point covers an interval if it lies inside that interval. Each of the following n lines contains two integers l_i and r_i (1 leq l_i < r_i leq 10^9) — coordinates of endpoints of the i-th interval. Print the minimum number of points required to cover all intervals on the first line. On the second line, print the positions of these points. The first line contains a single integer n (1 leq n leq 1000) — the number of intervals. Each of the next n lines contains two integers l_i and r_i (1 leq l_i < r_i leq 10^9) — the endpoints of the i-th interval. For example, if the input is: ``` 3 1 3 2 5 3 6 ``` The output should be: ``` 1 3 ``` Note: - A point at position 3 will cover all the given intervals [1, 3], [2, 5], and [3, 6]. - There can be multiple correct solutions. Any valid set of points that covers all the intervals will be accepted.","solution":"def min_points_to_cover_intervals(n, intervals): Given a list of intervals, this function returns the minimum number of points needed to cover all intervals, along with the positions of these points. intervals.sort(key=lambda x: x[1]) points = [] current_point = intervals[0][1] points.append(current_point) for interval in intervals: if current_point < interval[0] or current_point > interval[1]: current_point = interval[1] points.append(current_point) return points def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) intervals = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] points = min_points_to_cover_intervals(n, intervals) print(len(points)) print(\' \'.join(map(str, points)))"},{"question":"Dasha and Masha are playing a game with a sequence of integers. They have a list of n integers and a sliding window of size k that Dasha and Masha use to explore the array. Their goal is to find subarrays within the window of size k that contain at least one even and one odd number. Every integer in the list is either even or odd. The sliding window starts from the first element and moves one position to the right at a time until it reaches the end of the array. Your task is to count the number of valid subarrays within each sliding window of size k that contain both even and odd numbers. The input consists of two integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ n) — the number of integers in the list and the size of the sliding window, followed by a list of n integers (1 ≤ elements in the list ≤ 10^9). The output should be a single integer — the number of valid subarrays in the window of size k that contain both an even and an odd number. For example: Input: 10 3 1 2 3 4 5 6 7 8 9 10 Output: 8 In the sample input, there are 8 valid subarrays of size 3 that contain both even and odd numbers.","solution":"def count_valid_subarrays(n, k, array): Returns the number of subarrays of size k that contain at least one even and one odd number. Parameters: n (int): The size of the array. k (int): The size of the sliding window. array (List[int]): The list of integers. Returns: int: The number of valid subarrays. if k == 0 or n == 0: return 0 count = 0 odd_count = 0 even_count = 0 for i in range(k): if array[i] % 2 == 0: even_count += 1 else: odd_count += 1 if odd_count > 0 and even_count > 0: count += 1 for i in range(k, n): if array[i - k] % 2 == 0: even_count -= 1 else: odd_count -= 1 if array[i] % 2 == 0: even_count += 1 else: odd_count += 1 if odd_count > 0 and even_count > 0: count += 1 return count"},{"question":"John has a collection of books arranged in a single shelf. Each book has a unique integer identification number. John likes arranging his books following a special pattern. He starts with the smallest identification number and moves to the largest, then goes back to the second smallest and moves to the second largest, and continues in this manner until he has arranged all his books. For example, if he has books with identification numbers [1, 3, 5, 7, 9], his arrangement would start with 1, then 9, followed by 3, then 7, and finally 5. Given an unordered list of book identification numbers, write a program to output the rearranged list according to John\'s pattern. The input will consist of two lines: 1. The first line contains a single integer, n (1 ≤ n ≤ 1000), indicating the number of books. 2. The second line contains n space-separated integers representing the identification numbers of the books. Each identification number is unique and between 1 and 10^9 inclusive. The output should be a single line containing the rearranged list of book identification numbers following John\'s pattern. **Example:** **Input:** ``` 5 1 3 5 7 9 ``` **Output:** ``` 1 9 3 7 5 ``` **Input:** ``` 6 4 2 10 6 8 12 ``` **Output:** ``` 2 12 4 10 6 8 ```","solution":"def rearrange_books(n, ids): Rearrange the book IDs based on John\'s pattern. :param n: Number of books :param ids: List of book IDs :return: Rearranged list of book IDs ids.sort() result = [] for i in range(n//2): result.append(ids[i]) result.append(ids[-(i + 1)]) if n % 2 == 1: result.append(ids[n//2]) return result"},{"question":"Kumi the Koala likes to play with blocks with different letters on them. She has two rows of blocks, where each row contains the same number of blocks. Each block has a letter from the first 26 lowercase English alphabet letters (i.e., from \'a\' to \'z\'). Kumi wants to make the two rows identical by rearranging their blocks. However, there is a catch! Kumi can swap any two blocks within the same row, but she cannot swap blocks between different rows. Given the initial configuration of the two rows, determine if Kumi can make the two rows identical by swapping blocks within each row. If it\'s possible, output \\"YES\\", otherwise, output \\"NO\\". Each test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Description of test cases follows. For each test case, the first line contains a single integer n (1 ≤ n ≤ 100) — the number of blocks in each row. The second line contains the string A of length n — the letters on the blocks in the first row. The third line contains the string B of length n — the letters on the blocks in the second row. For each test case, print \\"YES\\" if Kumi can make the two rows identical by swapping blocks within each row, otherwise, print \\"NO\\". **Example:** Input ``` 3 4 abcd dbca 5 abcde edcba 3 abc def ``` Output ``` YES YES NO ``` In the first test case, Kumi can rearrange the first row to \\"dbca\\" by swapping the blocks. In the second test case, she can rearrange the first row to \\"edcba\\". In the third test case, it is not possible to make \\"abc\\" identical to \\"def\\" by rearranging the blocks within each row.","solution":"def can_make_identical(t, test_cases): results = [] for i in range(t): n, A, B = test_cases[i] if sorted(A) == sorted(B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage and test cases t = 3 test_cases = [ (4, \'abcd\', \'dbca\'), (5, \'abcde\', \'edcba\'), (3, \'abc\', \'def\') ] print(can_make_identical(t, test_cases)) # [\'YES\', \'YES\', \'NO\']"},{"question":"A company has introduced a new software system for managing employee information. The system needs to keep track of various details associated with each employee, including their name, department, and salary. Your task is to create a simple employee management system in Python. The system should support the following operations: 1. **Add a New Employee**: Given an employee\'s name, department, and salary, add the employee\'s details to the system. 2. **Update Employee Information**: Given an employee\'s name and updated information (which could be any combination of their department and salary), update the employee\'s details in the system. 3. **Delete an Employee**: Given an employee\'s name, remove the employee\'s details from the system. 4. **List All Employees in a Department**: Given a department name, return a list of all employees in that department along with their salaries. 5. **List Employees Based on Salary Range**: Given a minimum and maximum salary, return a list of all employees whose salaries fall within that range, inclusive. Implement the employee management system in Python with the following function signatures: ```python def add_employee(name, department, salary): Adds a new employee to the system with the given name, department, and salary. :param name: str :param department: str :param salary: int pass def update_employee(name, department=None, salary=None): Updates the details of an existing employee with the given name. Can update department, salary, or both. :param name: str :param department: str, optional :param salary: int, optional pass def delete_employee(name): Deletes the employee with the given name from the system. :param name: str pass def list_employees_by_department(department): Lists all employees in a specific department along with their salaries. :param department: str :return: List[Tuple[str, int]] - a list of tuples containing employee names and salaries. pass def list_employees_by_salary_range(min_salary, max_salary): Lists all employees whose salaries fall within the given range, inclusive. :param min_salary: int :param max_salary: int :return: List[str] - a list of employee names. pass ``` # Sample Input/Output ```python add_employee(\\"Alice\\", \\"Engineering\\", 95000) add_employee(\\"Bob\\", \\"HR\\", 70000) add_employee(\\"Charlie\\", \\"Engineering\\", 120000) update_employee(\\"Bob\\", salary=75000) delete_employee(\\"Alice\\") print(list_employees_by_department(\\"Engineering\\")) # Output: [(\\"Charlie\\", 120000)] print(list_employees_by_salary_range(70000, 80000)) # Output: [\\"Bob\\"] ``` Note: 1. If an update attempt is made for a non-existing employee, no action should be performed. 2. If a delete attempt is made for a non-existing employee, no action should be performed. 3. The system should handle edge cases gracefully, such as trying to list employees for a non-existing department.","solution":"class EmployeeManagementSystem: def __init__(self): self.employees = {} def add_employee(self, name, department, salary): Adds a new employee to the system with the given name, department, and salary. :param name: str :param department: str :param salary: int self.employees[name] = {\\"department\\": department, \\"salary\\": salary} def update_employee(self, name, department=None, salary=None): Updates the details of an existing employee with the given name. Can update department, salary, or both. :param name: str :param department: str, optional :param salary: int, optional if name in self.employees: if department: self.employees[name][\\"department\\"] = department if salary: self.employees[name][\\"salary\\"] = salary def delete_employee(self, name): Deletes the employee with the given name from the system. :param name: str if name in self.employees: del self.employees[name] def list_employees_by_department(self, department): Lists all employees in a specific department along with their salaries. :param department: str :return: List[Tuple[str, int]] - a list of tuples containing employee names and salaries. return [(name, info[\\"salary\\"]) for name, info in self.employees.items() if info[\\"department\\"] == department] def list_employees_by_salary_range(self, min_salary, max_salary): Lists all employees whose salaries fall within the given range, inclusive. :param min_salary: int :param max_salary: int :return: List[str] - a list of employee names. return [name for name, info in self.employees.items() if min_salary <= info[\\"salary\\"] <= max_salary]"},{"question":"Leisurely Anna is arranging a garden and wants to plant trees in a straight line. She has precisely n saplings and each sapling has a height of hi units. Anna wants her garden to be aesthetically pleasing, which she believes will be achieved if the differences in heights between adjacent saplings are the same. This means that for three consecutive saplings, the absolute differences between the heights of the first pair and the second pair should be equal. Anna wants to know if she can rearrange the saplings such that the garden looks pleasing to her. The first line contains an integer n (3 ≤ n ≤ 2000) — the number of saplings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000), where hi denotes the height of the i-th sapling. Print \\"Yes\\" if Anna can rearrange the saplings to meet her aesthetic requirement. Otherwise, print \\"No\\". **Example** **Input** ``` 5 5 2 3 4 1 ``` **Output** ``` Yes ``` **Input** ``` 4 8 7 5 3 ``` **Output** ``` No ``` **Note** In the first example, saplings can be rearranged to `[1, 2, 3, 4, 5]`, which satisfies the condition with each adjacent difference being 1. In the second example, there is no way to rearrange the saplings to have equal differences between adjacent heights.","solution":"def can_make_arithmetic_sequence(n, heights): Determines if the saplings can be rearranged to form an arithmetic sequence of heights. Args: n (int): The number of saplings. heights (list of int): Heights of the saplings. Returns: str: \\"Yes\\" if saplings can be rearranged to form an arithmetic sequence, otherwise \\"No\\". # Sort the list of heights heights.sort() # Calculate the required common difference from the sorted list diff = heights[1] - heights[0] # Check if all the differences between consecutive saplings are the same for i in range(2, n): if heights[i] - heights[i-1] != diff: return \\"No\\" return \\"Yes\\""},{"question":"Given an integer `n` representing the number of people in a line waiting to buy tickets for a concert, each person may influence their direct neighbors in such a way that a person might swap places with the one in front of them if the person behind them offers more money (i.e., the person at position `i` can swap with the person at position `i+1` if the person at `i+1` has more money). You are required to simulate this process until no more swaps can occur. The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of people in the line. The second line contains `n` space-separated integers representing the amount of money each person is willing to pay for swapping their place in the line. Output the final arrangement of people in line after no more swaps can occur. Example: ``` Input: 5 1 3 2 4 5 Output: 5 4 3 2 1 ``` Explanation: Initially, the line is [1, 3, 2, 4, 5]. The people will keep swapping places based on the condition: - Swap 3 and 2 -> [1, 2, 3, 4, 5] - Swap 2 and 1 -> [2, 1, 3, 4, 5] - Swap 3 and 1 -> [2, 3, 1, 4, 5] - Swap 3 and 2 -> [3, 2, 1, 4, 5] - Swap 4 and 1 -> [3, 2, 4, 1, 5] - Swap 4 and 2 -> [3, 4, 2, 1, 5] - Swap 4 and 3 -> [4, 3, 2, 1, 5] - Swap 5 and 1 -> [4, 3, 2, 5, 1] - Swap 5 and 2 -> [4, 3, 5, 2, 1] - Swap 5 and 3 -> [4, 5, 3, 2, 1] - Swap 5 and 4 -> [5, 4, 3, 2, 1] After the final swaps, no further swaps are possible, resulting in the final arrangement [5, 4, 3, 2, 1].","solution":"def final_lineup(n, money_offered): Simulates the process of swapping until no more swaps can occur. Args: - n: The number of people in the line - money_offered: A list of integers representing money each person is willing to pay Returns: - A list representing the final arrangement of people in line after all swaps swapped = True while swapped: swapped = False for i in range(n - 1): if money_offered[i] < money_offered[i + 1]: money_offered[i], money_offered[i + 1] = money_offered[i + 1], money_offered[i] swapped = True return money_offered"},{"question":"Jasmine is working as an intern in a warehouse, and she needs to keep track of the inventory. The warehouse stores a variety of products, and each product is characterized by its name and quantity. She needs to implement a system that supports the following operations: - Adding a new product to the inventory with a specified quantity. - Removing a product from the inventory completely. - Updating the quantity of an existing product. - Querying the quantity of a specific product. The operations are given as commands in the form of strings, and each command is followed by the necessary arguments. The system should process the commands in the order they are given and return the results of the query operations. Implement a function `warehouse_operations(commands)` that takes a list of strings `commands` where each string represents an operation. The function should return a list of integers representing the results of the query operations. The commands can be: - `\\"add <product_name> <quantity>\\"`: Adds a new product with the specified quantity. If the product already exists, do nothing. - `\\"remove <product_name>\\"`: Removes the product from the inventory. If the product does not exist, do nothing. - `\\"update <product_name> <quantity>\\"`: Updates the quantity of the existing product. If the product does not exist, do nothing. - `\\"query <product_name>\\"`: Returns the quantity of the product. If the product does not exist, return `0`. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of commands. - The next `n` lines contain the commands as described above. # Output: - For each `\\"query\\"` command, return the result as an integer. # Example: ```python def warehouse_operations(commands): # Your code here # Example usage: commands = [ \\"add apple 10\\", \\"update apple 20\\", \\"query apple\\", \\"remove apple\\", \\"query apple\\" ] assert warehouse_operations(commands) == [20, 0] ``` # Note: - You can assume that the product names consist of lowercase alphabetic characters and have a maximum length of 10. - The quantities are positive integers less than or equal to 10^9.","solution":"def warehouse_operations(commands): inventory = {} result = [] for command in commands: parts = command.split() action = parts[0] product_name = parts[1] if action == \\"add\\": quantity = int(parts[2]) if product_name not in inventory: inventory[product_name] = quantity elif action == \\"remove\\": if product_name in inventory: del inventory[product_name] elif action == \\"update\\": quantity = int(parts[2]) if product_name in inventory: inventory[product_name] = quantity elif action == \\"query\\": result.append(inventory.get(product_name, 0)) return result"},{"question":"Polycarp is organizing a city-wide programming contest and wants to distribute T-shirts to participants. He has N different types of T-shirts. Each T-shirt type has a limited supply and a specific size associated with it. Polycarp wants to maximize the number of participants who receive a T-shirt that is a good fit for them. Each participant has a preferred T-shirt size, and sizes are considered to be compatible in a specified range. Specifically, a T-shirt is a good fit for a participant if the size of the T-shirt is within ±d of the participant\'s preferred size. Given the availability of each T-shirt type and the size preference of each participant, determine the maximum number of participants that can receive a T-shirt that fits them well. Input: The first line contains three integers N, P, and d (1 ≤ N, P ≤ 1000, 0 ≤ d ≤ 100), where N is the number of different T-shirts, P is the number of participants, and d is the maximum allowed difference between a T-shirt size and a participant\'s preferred size. The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 100), where ai is the size of the i-th T-shirt type. The third line contains P integers b1, b2, ..., bP (1 ≤ bi ≤ 100), where bi is the preferred T-shirt size of the i-th participant. Output: Print a single integer, the maximum number of participants that can receive a T-shirt that fits them well. Example: Input 4 5 2 1 3 5 7 2 4 3 8 6 Output 4 Explanation: Here, the T-shirt sizes are [1, 3, 5, 7] and the participants\' preferred sizes are [2, 4, 3, 8, 6]. - Participant 1 (size 2) can take T-shirt type 1 (size 1) or type 2 (size 3). - Participant 2 (size 4) can take T-shirt type 2 (size 3) or type 3 (size 5). - Participant 3 (size 3) can take T-shirt type 2 (size 3). - Participant 4 (size 8) can take T-shirt type 4 (size 7). - Participant 5 (size 6) can take T-shirt type 3 (size 5) or type 4 (size 7). By distributing the T-shirts optimally, four participants can get a T-shirt that fits them well.","solution":"def max_participants_with_tshirts(N, P, d, t_shirt_sizes, preferred_sizes): # Sort both t-shirt sizes and participant preferred sizes t_shirt_sizes.sort() preferred_sizes.sort() # Initialize pointers for t_shirts and participants i, j = 0, 0 matched_count = 0 # Use two-pointer technique to find valid matches while i < N and j < P: if abs(t_shirt_sizes[i] - preferred_sizes[j]) <= d: matched_count += 1 i += 1 j += 1 elif t_shirt_sizes[i] < preferred_sizes[j]: i += 1 else: j += 1 return matched_count"},{"question":"You are given an array of integers arr of length n. You need to find the number of ways to split this array into two non-empty contiguous subarrays such that the sum of elements in the left subarray is greater than the sum of elements in the right subarray. The array indices are 1-based. Input: - The first line of the input contains a single integer n (2 ≤ n ≤ 10^5) — the length of the array. - The second line contains n integers arr_1, arr_2, ..., arr_n (1 ≤ arr_i ≤ 10^9) — the elements of the array. Output: - Print a single integer, the number of ways to split the array into two such subarrays. Example: Input: 5 10 4 2 1 1 Output: 4 Explanation: The ways to split the array into two non-empty contiguous subarrays such that the sum of the left subarray is greater than the right subarray are: - Split between 1st and 2nd element: [10] | [4, 2, 1, 1] (10 > 8) - Split between 2nd and 3rd element: [10, 4] | [2, 1, 1] (14 > 4) - Split between 3rd and 4th element: [10, 4, 2] | [1, 1] (16 > 2) - Split between 4th and 5th element: [10, 4, 2, 1] | [1] (17 > 1)","solution":"def count_splits(n, arr): Returns the number of ways to split the array such that the sum of elements in the left subarray is greater than the sum of elements in the right subarray. total_sum = sum(arr) left_sum = 0 count = 0 for i in range(n - 1): left_sum += arr[i] right_sum = total_sum - left_sum if left_sum > right_sum: count += 1 return count"},{"question":"You are organizing data from various weather monitoring stations, which record data on a daily basis. Each station logs the temperature for a given day. Your task is to find the station with the maximum average temperature over a given number of days. For each test case, you are given the number of stations, the number of days each station recorded temperatures, and the recorded temperatures for each station. Then you need to determine which station has the highest average temperature over the given period. # Input - The first line contains an integer `t` (1 ≤ `t` ≤ 100), the number of test cases. - For each test case: - The first line contains two integers `n` and `d` (1 ≤ `n` ≤ 100, 1 ≤ `d` ≤ 365), the number of stations and the number of days, respectively. - Each of the next `n` lines contains `d` integers representing the daily temperatures recorded by a station. # Output For each test case, print a single line containing the 1-indexed number of the station with the highest average temperature. If multiple stations have the same average temperature, choose the station with the smallest index. # Example Input ``` 2 3 4 25 30 28 35 20 22 24 26 31 29 30 32 2 3 20 21 19 23 25 22 ``` Output ``` 3 2 ``` # Explanation In the first test case, the three stations have the following average temperatures: 29.5, 23, and 30.5. Station 3 has the highest average temperature. In the second test case, the two stations have the following average temperatures: 20, 23.33. Station 2 has the highest average temperature.","solution":"def find_station_with_max_avg_temp(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] temperatures = test_cases[i][1] max_avg = float(\'-inf\') best_station = -1 for station_index in range(n): avg_temp = sum(temperatures[station_index]) / d if avg_temp > max_avg: max_avg = avg_temp best_station = station_index + 1 results.append(best_station) return results"},{"question":"Farmer John\'s farm has n cows and m chickens. Each cow and chicken has a certain level of friendliness f. Farmer John wants to pair up cows and chickens in such a way that each pair consists of one cow and one chicken, and the total friendliness of all pairs is maximized. However, a cow and a chicken can only be paired if their friendliness levels satisfy the condition: the absolute difference between their friendliness levels is at most k. You are given the friendliness levels of the cows and chickens along with the maximum allowed difference k. Determine the maximum number of pairs that can be formed under the given condition. Input Format: - The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100,000; 0 ≤ k ≤ 1,000,000). - The second line contains n integers, the friendliness levels of the n cows. - The third line contains m integers, the friendliness levels of the m chickens. Output Format: - Output a single integer, the maximum number of pairs that can be formed. Example: Input: 4 5 1 3 1 4 2 3 5 4 1 2 Output: 4 Explanation: One possible pairing of cows and chickens satisfying the friendliness constraint could be: - Cow with friendliness 3 and chicken with friendliness 4 - Cow with friendliness 1 and chicken with friendliness 2 - Cow with friendliness 4 and chicken with friendliness 5 - Cow with friendliness 2 and chicken with friendliness 3 This results in a total of 4 pairs being formed. Example 2: Input: 3 3 0 2 3 4 5 6 7 Output: 0 Explanation: Since the allowed difference is 0, no cow and chicken can be paired since all their friendliness levels differ by more than 0.","solution":"def max_pairs(n, m, k, cow_friendliness, chicken_friendliness): Finds the maximum number of pairs that can be formed from cows and chickens with friendly levels within a given difference k. Args: n (int): number of cows m (int): number of chickens k (int): allowed maximum difference in friendliness levels cow_friendliness (list): friendliness levels of the cows chicken_friendliness (list): friendliness levels of the chickens Returns: int: the maximum number of pairs cow_friendliness.sort() chicken_friendliness.sort() pairs = 0 i, j = 0, 0 while i < n and j < m: if abs(cow_friendliness[i] - chicken_friendliness[j]) <= k: pairs += 1 i += 1 j += 1 elif cow_friendliness[i] < chicken_friendliness[j]: i += 1 else: j += 1 return pairs"},{"question":"You are operating a drone delivery service in a city that is represented as a grid with n rows and m columns. The drone can move in four directions: up, down, left, and right, but it must avoid certain restricted areas that are specified in the grid. The grid is provided as an array of strings of length n, where each string contains m characters. The characters can be: - \'.\' indicating a free cell - \'#\' indicating a restricted cell Your task is to find the shortest path (minimum number of moves) from the starting point to the destination point. If no such path exists, return -1. The drone starts at cell (r1, c1) and needs to reach cell (r2, c2). The first line of the input contains two integers n and m (2 leq n, m leq 2000): the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. The last line contains four integers r1, c1, r2, c2 (1 leq r1, r2 leq n, 1 leq c1, c2 leq m): the starting and the destination coordinates. Output a single integer denoting the minimum number of moves required to reach the destination from the starting position. If it is not possible to reach the destination, output -1. # Example Input ``` 5 5 ..... .#. ..... .#. ..... 1 1 5 5 ``` Output ``` 8 ```","solution":"from collections import deque def shortest_path(n, m, grid, start, destination): (r1, c1) = start (r2, c2) = destination r1, c1, r2, c2 = r1 - 1, c1 - 1, r2 - 1, c2 - 1 # Adjust for 0-indexing if grid[r1][c1] == \'#\' or grid[r2][c2] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(r1, c1, 0)]) # (row, col, steps) visited = set() visited.add((r1, c1)) while queue: row, col, steps = queue.popleft() if (row, col) == (r2, c2): return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m: if grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"You are working on a project that involves analyzing sentences for palindrome properties. A sentence is a palindrome if it reads the same backward as forward when you ignore spaces, punctuation, and the case of the letters. Your task is to write a function that determines if a given sentence is a palindrome. Given a string `s` containing letters, digits, spaces, and punctuation, return `true` if `s` is a palindrome and `false` otherwise. The comparison should be case-insensitive, and you should ignore spaces and punctuation. # Input The input is a single string `s` (1 ≤ |s| ≤ 1000). # Output Print `true` if the input string is a palindrome, otherwise print `false`. # Example Input: ``` A man, a plan, a canal: Panama ``` Output: ``` true ``` Input: ``` race a car ``` Output: ``` false ``` # Note In the first example, when ignoring spaces, punctuation, and case, the string \\"A man, a plan, a canal: Panama\\" becomes \\"amanaplanacanalpanama\\", which reads the same backward as forward. Thus, the output is `true`. In the second example, when ignoring spaces and punctuation, the string \\"race a car\\" becomes \\"raceacar\\", which does not read the same backward as forward. Therefore, the output is `false`.","solution":"def is_palindrome(s): Determine if a given sentence is a palindrome. A sentence is a palindrome if it reads the same backward as forward when ignoring spaces, punctuation, and case. Parameters: s (str): Input string containing letters, digits, spaces, and punctuation Returns: bool: True if the input string is a palindrome, else False import re # Use regex to remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"You are given a string \\"s\\" consisting of lowercase Latin letters and a character \\"c\\". You need to determine the shortest distance from each character in the string to the character \\"c\\". The distance between two indices i and j in the string is abs(i - j), where abs is the absolute value. Write a function that receives a string \\"s\\" and a character \\"c\\", and returns a list of integers where the i-th integer represents the shortest distance from the i-th character of \\"s\\" to the character \\"c\\". For example, if the string is \\"loveleetcode\\" and the character is \'e\', your function should return [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]. Constraints: - The length of the string \\"s\\" will be at least 1 and at most 10^4. - The string \\"s\\" will only contain lowercase Latin letters. - The character \\"c\\" will appear at least once in the string \\"s\\". Function Signature: ```python def shortestToChar(s: str, c: str) -> List[int]: ``` Input: - s (str) : The input string consisting of lowercase Latin letters. - c (str) : The character to find the shortest distance to (it is guaranteed to appear at least once). Output: - List[int] : A list of integers where each integer represents the shortest distance from the corresponding character in \\"s\\" to the character \\"c\\". Example: ```python print(shortestToChar(\\"loveleetcode\\", \'e\')) # Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] ```","solution":"def shortestToChar(s: str, c: str) -> list[int]: Returns a list of integers where the i-th integer represents the shortest distance from the i-th character of `s` to the character `c`. n = len(s) result = [float(\'inf\')] * n last_c_position = -float(\'inf\') # Forward pass to find shortest distances for i in range(n): if s[i] == c: last_c_position = i result[i] = min(result[i], abs(i - last_c_position)) # Backward pass to find shortest distances last_c_position = float(\'inf\') for i in range(n - 1, -1, -1): if s[i] == c: last_c_position = i result[i] = min(result[i], abs(i - last_c_position)) return result"},{"question":"You are given a stack which allows two types of operations: 1. `push(x)`: Push value `x` onto the stack. 2. `pop()`: Remove the top value from the stack and print it. Additionally, the stack starts empty and contains a special operation: 3. `med()`: Print the median value of all elements currently in the stack. The median of a list of numbers is the middle value when they are sorted. If the list has an even number of elements, the median is the average of the two middle values. You are given a sequence of `n` operations, and you need to execute each operation in the given order. Each operation is one of the above types. Each test contains multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100), denoting the number of test cases, followed by the description of the test cases. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 100,000), the number of operations. Each of the next `n` lines contains one of the following operations: - `push x` where `x` is an integer (−100,000 ≤ x ≤ 100,000) - `pop` - `med` The sum of `n` over all test cases does not exceed 100,000. For each test case, print the result of each `pop` and `med` operation on a new line. If a `pop` operation is called when the stack is empty, print \\"Empty\\". If a `med` operation is called when the stack is empty, print \\"Empty\\". Example: Input: ``` 2 5 push 1 push 2 med pop med 6 push 3 push 5 push 8 med pop med ``` Output: ``` 1.5 2 1 5 4 ```","solution":"class StackWithMedian: def __init__(self): self.stack = [] self.sorted_stack = [] def push(self, x): from bisect import bisect_left, insort self.stack.append(x) pos = bisect_left(self.sorted_stack, x) insort(self.sorted_stack, x) def pop(self): if not self.stack: print(\\"Empty\\") return \\"Empty\\" x = self.stack.pop() self.sorted_stack.remove(x) print(x) return x def med(self): if not self.stack: print(\\"Empty\\") return \\"Empty\\" length = len(self.sorted_stack) if length % 2 == 0: median = (self.sorted_stack[length // 2 - 1] + self.sorted_stack[length // 2]) / 2 else: median = self.sorted_stack[length // 2] print(median) return median def process_commands(commands): stack = StackWithMedian() results = [] for command in commands: if command.startswith(\\"push\\"): _, value = command.split() stack.push(int(value)) elif command == \\"pop\\": result = stack.pop() if result != \\"Empty\\": results.append(result) elif command == \\"med\\": result = stack.med() if result != \\"Empty\\": results.append(result) return results def execute_test_cases(test_cases): results = [] for commands in test_cases: results.extend(process_commands(commands)) return results"},{"question":"A surge protector for a laboratory has been designed to control the usage of expensive and fragile equipment. The surge protector has a timer system to automatically turn off the appliances to prevent overheating and electrical malfunctions after a certain period. The usage time for each appliance is specified in minutes, and it cycles through the appliances based on the sequence you provide. Given a sequence of usage times (in minutes) and the total operation time for the surge protector, determine the order in which the appliances will turn off. Each appliance operates in the order they appear in the sequence and restarts the sequence once it reaches the end. The protector stops operating when the total time elapses. Write a function `surge_protector(usage_times, t)` that takes two arguments: 1. `usage_times` - a list of integers, where each integer represents the time (in minutes) an appliance can operate before turning off. 2. `t` - an integer representing the total operation time (in minutes) for the surge protector. Your function should return a list of integers representing the sequence of appliances (indexed starting from 1) as they turn off due to the timer elapsing. # Input - The first line contains a single integer `n` (1 le n le 100) — the number of appliances. - The second line contains `n` space-separated integers where each integer `u_i` (1 le u_i le 100) is the usage time for the i-th appliance. - The third line contains a single integer `t` (1 le t le 10^5) — the total operation time for the surge protector. # Output - Print a list of integers representing the sequence of appliances (indexed starting from 1) that get turned off as the total time elapses. # Example **Input:** ``` 3 10 20 30 90 ``` **Output:** ``` [1, 2, 3, 1, 2] ``` **Explanation:** 1. In the first 10 minutes appliance 1 will be turned off. 2. In the next 20 minutes appliance 2 will be turned off. 3. In the next 30 minutes appliance 3 will be turned off. 4. In the following 10 minutes appliance 1 will be turned off again. 5. Finally, in the last 20 minutes appliance 2 will be turned off. Note that there are 90 minutes in total, and the sequence restarts after reaching the end of the given list of appliances.","solution":"def surge_protector(usage_times, t): total_time = 0 off_sequence = [] while total_time < t: for i, usage in enumerate(usage_times): if total_time < t: off_sequence.append(i + 1) total_time += usage else: break return off_sequence"},{"question":"You are given a list of `n` integers representing the height of blocks, where each block has a width of 1 unit. Your goal is to determine the maximum amount of rainwater that can be trapped between the blocks after raining. Each integer in the list represents the height of the block in units. Water can only be trapped between two larger blocks and the in-between blocks are acting as containers for the water. Write a function `maxWater(height: List[int]) -> int` that takes a list of integers as input and outputs the maximum amount of trapped rainwater. # Function Signature ```python def maxWater(height: List[int]) -> int: ``` # Input - The first line contains an integer `n` `(0 ≤ n ≤ 10^5)`, the number of blocks. - The second line contains `n` space-separated integers, where each integer `height[i]` `(0 ≤ height[i] ≤ 10^4)` represents the height of the `i-th` block. # Output - Output a single integer representing the maximum amount of water that can be trapped. # Example Input ``` 6 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output ``` 6 ``` Explanation To visualize the example, the elevation map is: ``` | | | | | | |_|_| | | | ``` Between the first and last blocks of height 1, 3 units of water can be trapped. Between the second block of height 2 and the block of height 3, 1 unit of water can be trapped, between the last block of height 2 and the block before the last, 2 units of water can be trapped. So, a total of 6 units of water are trapped. Notes - If there are less than 3 blocks, no water can be trapped. - The given list may contain all zero elements, in which case no water can be trapped.","solution":"from typing import List def maxWater(height: List[int]) -> int: if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 max_water = 0 left_max, right_max = height[left], height[right] while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) max_water += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) max_water += right_max - height[right] return max_water"},{"question":"Ivan participates in a game show where he is given a target number and an array of integers. His goal is to determine the minimum number of elements he needs to add up to exactly match the target number. He can pick each number from the array as many times as needed. Write a function to help him achieve this goal. Function Signature: ```python def min_elements_to_target(arr: List[int], target: int) -> int: ``` **Input:** - The first line contains an integer `n` (1 le n le 100) — the number of elements in the array. - The second line contains `n` integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the elements of the array. - The third line contains a single integer `target` (1 le target le 1000). **Output:** - Print a single integer representing the minimum number of elements required to sum up to the target. If it\'s not possible to reach the target, print `-1`. **Example:** ```plaintext Input 5 1 2 3 4 5 11 Output 3 Input 3 3 4 7 2 Output -1 ``` **Explanation:** In the first example, one possible solution is 5 + 4 + 2 = 11, thus needing 3 elements. In the second example, it\'s not possible to reach the target number 2 using any combinations of the given array elements. Therefore, the output is `-1`.","solution":"def min_elements_to_target(arr, target): This function returns the minimum number of elements required to sum up to the target. If it\'s not possible to reach the target, it returns -1. dp = [float(\'inf\')] * (target + 1) dp[0] = 0 # Base case: 0 elements needed to make 0 for i in range(1, target + 1): for x in arr: if x <= i: dp[i] = min(dp[i], dp[i - x] + 1) return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"You are managing a garden with a grid layout of flowers. Some of the flowers are special and need extra sunlight to bloom. Each hour, you can direct a beam of sunlight to an entire row or column, allowing the flowers in that row or column to bloom. However, some flowers are blocked by obstacles (like trees or rocks) and cannot receive sunlight directly. The beam can still pass over these obstacles but they stay as obstacles. Your goal is to make all special flowers bloom using the minimum number of sunlight beams. However, it is not always possible to bloom all special flowers due to these obstacles. The first line will contain two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the garden grid. The following n lines contain m characters each. Each character is one of the following: - \'.\' representing an empty flower spot, - \'S\' representing a special flower, - \'#\' representing an obstacle. Output the minimum number of beams needed to bloom all special flowers if possible. If it is not possible, output `-1`. Examples: Input 1: 3 3 .S. .#. .S. Output 1: 1 Input 2: 4 4 S.#. ..#S .#S. SSSS Output 2: 4","solution":"def min_sunlight_beams(n, m, garden): rows_with_s = [False] * n cols_with_s = [False] * m for i in range(n): for j in range(m): if garden[i][j] == \'S\': rows_with_s[i] = True cols_with_s[j] = True row_beams_needed = sum(rows_with_s) col_beams_needed = sum(cols_with_s) # If no S in rows or columns, return -1 as we cannot beam sunlight to bloom all special flowers if row_beams_needed == 0 or col_beams_needed == 0: return -1 return min(row_beams_needed, col_beams_needed) # Reading input def read_input(): n, m = map(int, input().strip().split()) garden = [] for _ in range(n): garden.append(input().strip()) return n, m, garden if __name__ == \\"__main__\\": n, m, garden = read_input() print(min_sunlight_beams(n, m, garden))"},{"question":"Harry is organizing a gardening competition in a circular garden. The garden has a circular walking path with n unique trees planted along it, each located at a distinct position. The garden can be visualized as a circle with these trees as points on the circumference. Harry wants to select some consecutive trees to form a segment such that the heights of the trees in this segment form a strictly increasing sequence followed by a strictly decreasing sequence. Such a sequence of tree heights resembles a mountain, with the middle tree being the peak. Given the number of trees and their respective heights, help Harry determine the length of the longest segment that forms such a `mountain`. If no such segment exists, print `0`. The first line contains a single integer n (3 le n le 10^5) — the number of trees in the garden. The second line contains n integers h_1, h_2, ..., h_n (1 le h_i le 10^9) — the heights of the trees, in clockwise order along the walking path. Print a single integer: the length of the longest segment that forms a `mountain`, or `0` if no such segment exists. In the first example, the longest mountain segment is formed by trees at positions [3, 4, 5, 6, 7] with heights [2, 4, 7, 5, 3], hence the answer is `5`. In the second example, there is no valid mountain segment, hence the answer is `0`. **Example 1**: ``` 7 1 3 2 4 7 5 3 ``` **Output**: ``` 5 ``` **Example 2**: ``` 5 5 4 3 2 1 ``` **Output**: ``` 0 ```","solution":"def longest_mountain(n, heights): if n < 3: return 0 longest = 0 i = 1 while i < n - 1: if heights[i - 1] < heights[i] > heights[i + 1]: left = i - 1 while left > 0 and heights[left - 1] < heights[left]: left -= 1 right = i + 1 while right < n - 1 and heights[right] > heights[right + 1]: right += 1 longest = max(longest, right - left + 1) i = right else: i += 1 return longest"},{"question":"A local library is hosting a word game challenge. Participants are given a string of lowercase English letters and a dictionary of valid words. The objective is to determine the longest valid word in the dictionary that can be formed using the letters of the given string. Each letter in the given string can only be used as many times as it appears in the string. You are provided with a string `S` and a list of words representing the dictionary. Your task is to find and print the longest word in the dictionary that can be formed using the letters in `S`. If there are multiple such words of the same length, print the lexicographically smallest one. If no valid word can be formed, print an empty string. The first line of input contains a string `S` consisting of lowercase English letters (1 ≤ |S| ≤ 100). The second line contains an integer `n` (1 ≤ n ≤ 100), the number of words in the dictionary. Each of the next `n` lines contains a single word consisting of lowercase English letters, which represents a word in the dictionary. Each word\'s length is between 1 and 100, inclusive. Print the longest valid word that can be formed. If there are ties, print the lexicographically smallest one. If no valid word can be formed, print an empty string. **Examples:** Input: ``` aabbcc 5 abc aabb abccba bca aa ``` Output: ``` abccba ``` Input: ``` hello 3 he hello ohell ``` Output: ``` hello ``` Input: ``` xyz 4 apple banana cherry date ``` Output: ``` ``` In the first example, the longest word that can be formed is \\"abccba\\". In the second example, \\"hello\\" can be formed and is also the longest word. In the third example, no valid word can be formed from the given letters.","solution":"def can_form(word, char_count): Checks whether the given word can be formed from the characters in char_count with sufficient number of each character. word_count = {} for char in word: if char in word_count: word_count[char] += 1 else: word_count[char] = 1 for char in word_count: if char not in char_count or word_count[char] > char_count[char]: return False return True def longest_valid_word(S, words): char_count = {} for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 valid_words = [] for word in words: if can_form(word, char_count): valid_words.append(word) if not valid_words: return \\"\\" valid_words.sort(key=lambda w: (-len(w), w)) return valid_words[0]"},{"question":"David is a biologist researching the spread of diseases in a population. He has a list of n individuals and the days on which they got infected. Now, he wants to analyze the spread of the disease by finding out the longest subsequence of days such that the infection spread continuously without any gap greater than 1 day. Given a list of n unique integers representing the days on which individuals got infected, help David determine the length of the longest subsequence of days with continuous infections. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of days on which the infections occurred. The second line contains n unique integers d1, d2, ..., dn (1 ≤ di ≤ 10^9) representing the days on which the infections occurred. Output a single integer, the length of the longest subsequence of continuous infection days. **Example:** Input: ``` 6 2 5 6 3 1 4 ``` Output: ``` 6 ``` Explanation: The days on which the infections occurred are [2, 5, 6, 3, 1, 4]. When sorted, this gives a sequence of continuous days [1, 2, 3, 4, 5, 6]. Thus, the longest subsequence of continuous infection days is of length 6.","solution":"def longest_continuous_infection_days(n, days): Returns the length of the longest subsequence of days with continuous infections. Parameters: n (int): Number of days infections occurred. days (list of int): List of days when infections occurred. Returns: int: Length of the longest subsequence of continuous infection days. days_set = set(days) max_length = 0 for day in days: if day - 1 not in days_set: current_day = day current_length = 1 while current_day + 1 in days_set: current_day += 1 current_length += 1 max_length = max(max_length, current_length) return max_length # Example Usage n = 6 days = [2, 5, 6, 3, 1, 4] print(longest_continuous_infection_days(n, days)) # Output: 6"},{"question":"A bank is developing a new transaction system. Each transaction is represented by a set of integer tuples. A tuple `(a, b, c)` means that `a` units of currency are transferred from a user with id `b` to a user with id `c`. The system must analyze whether there is any cyclic transaction pattern, where money eventually returns to the originating user in a cycle. You are given a total of `n` users and `m` transactions. You need to determine if there is any cycle in the transactions. # Input: - The first line contains two integers `n` (2 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 2 * 10^5), the number of users and the number of transactions respectively. - Each of the next `m` lines contains three integers `a`, `b`, and `c` (1 ≤ a ≤ 10^9, 1 ≤ b, c ≤ n, b ≠ c), representing a transaction where `a` units of currency are transferred from user `b` to user `c`. # Output: - Print \\"Yes\\" if there is a cycle; otherwise, print \\"No\\". # Example: Input: ``` 4 5 5 1 2 10 2 3 7 3 4 3 4 2 6 2 1 ``` Output: ``` Yes ``` In the example above, there is a cycle: 1 -> 2 -> 3 -> 4 -> 2. # Constraints: - The problem needs an efficient cycle detection algorithm for directed graphs because of the large constraints on `n` and `m`. - Consider using Depth-First Search (DFS) or Union-Find with path compression and cycle detection for an optimal solution.","solution":"def has_cycle(n, m, transactions): from collections import defaultdict # Create adjacency list for graph representation graph = defaultdict(list) for a, b, c in transactions: graph[b].append(c) # Helper function for DFS def dfs(v, visited, rec_stack): visited[v] = True rec_stack[v] = True for neighbour in graph[v]: if not visited[neighbour]: if dfs(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: return True rec_stack[v] = False return False # Initialize visited and recursion stack visited = [False] * (n + 1) rec_stack = [False] * (n + 1) # Perform DFS from every node to detect cycle for node in range(1, n + 1): if not visited[node]: if dfs(node, visited, rec_stack): return \\"Yes\\" return \\"No\\""},{"question":"In a distant galaxy, a farmer has a large plot of land represented by a grid of size n × m. Each cell in the grid either contains a crop or is empty. To protect the crops, the farmer employs a set of drones to patrol the grid. Each drone, when deployed, can move any number of cells in one of the four cardinal directions (up, down, left, right) until it reaches the edge of the grid or an empty cell. Your task is to determine the minimum number of drones required such that each crop cell is patrolled by at least one drone. A drone can only start from a cell containing a crop. The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the test cases follows. Each test case begins with two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m characters. Each character is either \'C\' or \'.\', representing a crop cell and an empty cell, respectively. For each test case, print a single integer representing the minimum number of drones required. Example: Input: 2 3 3 C.C .CC C.C 2 2 CC CC Output: 3 1 Explanation: In the first test case, one possible solution is to place the drones at (1,1), (2,2), and (3,1). These drones will cover all the crop cells. In the second test case, a single drone placed at any of the four crop cells will cover the entire grid as all the cells contain crops.","solution":"def incoming_crops(grid, n, m): visited = [[False]*m for _ in range(n)] drones_count = 0 def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or visited[x][y] or grid[x][y] == \'.\': return visited[x][y] = True # Move in all four cardinal directions dfs(x-1, y) dfs(x+1, y) dfs(x, y-1) dfs(x, y+1) for i in range(n): for j in range(m): if grid[i][j] == \'C\' and not visited[i][j]: # A new connected component of crops, hence a new drone is needed drones_count += 1 dfs(i, j) return drones_count def min_drones(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] results.append(incoming_crops(grid, n, m)) return results"},{"question":"In an ancient land, there existed a peculiar form of hieroglyph-based communication, used by scribes to encode important messages for future civilizations. This language consists of a sequence of n symbols, where each symbol is represented by a unique non-negative integer. To decrypt a message, one needs to convert the sequence of symbols into its minimal lexicographical permutation that must also be a valid sequence as per the hieroglyphic rules. The rules state that each symbol must occur a specified number of times within the sequence. Given an integer n (the number of unique symbols) and an initial sequence of length p consisting of these symbols, your task is to transform this sequence to the minimal lexicographical permutation that satisfies the hieroglyphic rules. Input: - The first line contains the integer n (1 ≤ n ≤ 100) — the number of unique symbols. - The second line contains n integers, where the i-th integer represents the number of times the symbol i appears in the sequence (sum of these integers is equal to p). - The third line contains the initial sequence consisting of p integers (0 ≤ integer value < n). Output: - Print the minimal lexicographical permutation of the sequence while adhering to the specified frequencies of each symbol. Example: Input: 3 2 1 1 2 0 0 1 Output: 0 0 1 2 Explanation of the example: - The initial sequence is \'2 0 0 1\'. - The minimal lexicographical permutation with 2 instances of \'0\', 1 instance of \'1\', and 1 instance of \'2\' is \'0 0 1 2\'.","solution":"def minimal_lexicographical_permutation(n, frequencies, sequence): Returns the minimal lexicographical permutation of the sequence with given symbol frequencies. :param n: Number of unique symbols. :param frequencies: List denoting the number of occurrences for each symbol. :param sequence: The initial sequence of symbols. :return: The minimal lexicographical permutation of the sequence as a list of integers. # Create a list to hold the sorted sequence sorted_sequence = [] # Append each symbol to the list as many times as specified in frequencies for symbol, freq in enumerate(frequencies): sorted_sequence.extend([symbol] * freq) return sorted_sequence # Example execution of the solution # n = 3 # frequencies = [2, 1, 1] # sequence = [2, 0, 0, 1] # Output should be: [0, 0, 1, 2] print(minimal_lexicographical_permutation(3, [2, 1, 1], [2, 0, 0, 1]))"},{"question":"David has recently started learning Python and he is very interested in automating mundane tasks using his newfound skills. One day, he decided to write a program to help his friend George, who manages a small library. George needs a system to keep track of the books that are currently borrowed by the members of the library and when they are expected to return them. George has a list of books, each of which can be borrowed by library members. Every borrowed book has a unique ID, the name of the borrower, and the return date. The return date is expressed as the number of days from today. George keeps records of books that have been borrowed in the form of a list of strings. Each string in the list has the format \\"BookID_Borrower_ReturnDays\\", where: - BookID is a unique identifier for the book, consisting of alphanumeric characters without spaces. - Borrower is the name of the person who borrowed the book. - ReturnDays is an integer representing the number of days until the book should be returned. David wants to write a program that will process this list and produce a summary report for George. The report should provide the following details: 1. Total number of books borrowed. 2. A list of books that are due to be returned today (i.e., those with ReturnDays equal to 0). **Function Specification:** Implement the function `generate_borrowed_books_report(records: List[str]) -> Tuple[int, List[str]]`, where: - `records` is a list of strings representing the books currently borrowed. - The function returns a tuple. The first element of the tuple is an integer representing the total number of books borrowed. The second element is a list of strings, each string containing the `BookID` of the books that are due to be returned today. **Example:** ```python from typing import List, Tuple def generate_borrowed_books_report(records: List[str]) -> Tuple[int, List[str]]: total_books = len(records) due_today = [record.split(\'_\')[0] for record in records if int(record.split(\'_\')[2]) == 0] return (total_books, due_today) # Example usage records = [ \\"B001_John_5\\", \\"B002_Alice_0\\", \\"B003_Bob_2\\", \\"B004_Dave_0\\" ] print(generate_borrowed_books_report(records)) # Output: (4, [\'B002\', \'B004\']) ``` **Constraints:** 1. The number of records will not exceed 1000. 2. The `ReturnDays` for any book will be a non-negative integer and will not exceed 365. 3. Each `BookID` and `Borrower` name will consist of alphanumeric characters without spaces and will not exceed 20 characters in length.","solution":"from typing import List, Tuple def generate_borrowed_books_report(records: List[str]) -> Tuple[int, List[str]]: Process a list of borrowed book records and produce a summary report. Args: records (List[str]): List of borrowed book records in the format \\"BookID_Borrower_ReturnDays\\" Returns: Tuple[int, List[str]]: Tuple containing the total number of books borrowed and a list of BookIDs of books due to be returned today. total_books = len(records) due_today = [record.split(\'_\')[0] for record in records if int(record.split(\'_\')[2]) == 0] return (total_books, due_today)"},{"question":"Maria is playing a game with a sequence of integers. Initially, she has a sequence of length n. In each move, she can choose any two adjacent elements and replace them with their sum. The game ends when only one element is left in the sequence. The goal is to minimize the number of moves required to make the sequence end up with only one element left. Given a sequence of n integers, determine the minimum number of moves Maria needs to make the sequence consist of only one element. The first line contains an integer n (2 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Print a single integer — the minimum number of moves required to reduce the sequence to a single element. Example: Input: 4 1 2 3 4 Output: 3 Explanation: In the first move, Maria can choose the pair (1, 2) and replace them with their sum 3, resulting in the sequence [3, 3, 4]. In the second move, she can choose the pair (3, 3) and replace them with their sum 6, resulting in the sequence [6, 4]. In the third and final move, she can choose the pair (6, 4) and replace them with their sum 10, resulting in the sequence [10].","solution":"def minimum_moves_to_one_element(n, sequence): Returns the minimum number of moves required to reduce the sequence to one element. # The minimum number of moves required to reduce the sequence to one element # will always be the length of the sequence minus one. return n - 1"},{"question":"In a distant kingdom, there is a magic tree with n nodes and n-1 edges, forming a perfect connected tree. Each node represents a city, and each edge signifies a magical road between two cities. One day, the king decides to celebrate the kingdom\'s prosperity by lighting up some of the edges with colorful lights. However, to add excitement to the festival, he wants the lighting to be unique in such a way that no subtree of exactly size k nodes has all its edges lit up. Given the tree in the form of an adjacency list, your task is to determine whether it is possible to light up some edges such that no subtree of size exactly k has all its edges lit up. If it is possible, print \\"YES\\" and describe one such valid set of edges to light up. If it is not possible, print \\"NO\\". Input: - The first line contains two integers n (number of nodes, 2 leq n leq 10^4) and k (subtree size, 1 leq k leq n). - The next n-1 lines each contain two integers u and v representing an edge between nodes u and v. Output: - If it is possible to light up edges according to the given constraints, print \\"YES\\". On the next line, print the edges in any order as pairs of integers u and v. - If it is not possible, print \\"NO\\". # Example Input: ``` 7 3 1 2 1 3 3 4 3 5 4 6 4 7 ``` Output: ``` YES 1 2 3 4 ``` In the above example, it\'s possible to light edges (1, 2) and (3, 4). There is no subtree of size exactly 3 where all the edges are lit up.","solution":"def can_light_edges(n, k, edges): Determines if it is possible to light up some edges such that no subtree of size exactly k nodes has all its edges lit up, and returns the result accordingly. if k == 1: return \\"NO\\" # Only light every second edge of the input (just an example strategy) m = len(edges) lit_edges = [] for i in range(0, len(edges)): if i % 2 == 0: lit_edges.append(edges[i]) # Generate the output as required output = \\"YESn\\" + \\"n\\".join(f\\"{u} {v}\\" for u, v in lit_edges) return output # Example usage: # edges = [(1, 2), (1, 3), (3, 4), (3, 5), (4, 6), (4, 7)] # print(can_light_edges(7, 3, edges))"},{"question":"You are given an array of integers and need to perform a sequence of operations on it. The operations are of two types: 1. **Update Operation**: Given an index and a value, update the element at the specified index to the new value. 2. **Range Sum Query**: Given a range [l, r], return the sum of the elements in the range. Your task is to implement these operations efficiently. # Input - The first line contains two integers `n` and `q` (1 ≤ `n` ≤ 10^5, 1 ≤ `q` ≤ 10^5) — the number of elements in the array and the number of operations. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the initial array elements. - Each of the next `q` lines contains one of the following two types of operations: - `1 x v` (1 ≤ x ≤ n, 1 ≤ v ≤ 10^9) — update `ax` to `v`. - `2 l r` (1 ≤ l ≤ r ≤ n) — output the sum of the elements in the range [l, r]. # Output For each operation of the second type, output a single integer — the sum of elements in the specified range. # Example Input ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 2 5 1 5 5 2 1 5 ``` Output ``` 6 21 22 ``` # Notes In the example, the initial array is [1, 2, 3, 4, 5]. The sequence of operations and their results are: - Query the sum from index 1 to 3: `1 + 2 + 3 = 6` - Update the element at index 3 to 10: array becomes [1, 2, 10, 4, 5] - Query the sum from index 2 to 5: `2 + 10 + 4 + 5 = 21` - Update the element at index 5 to 5: array becomes [1, 2, 10, 4, 5] (no change) - Query the sum from index 1 to 5: `1 + 2 + 10 + 4 + 5 = 22` Efficiently handle both types of operations using data structures like Segment Trees or Fenwick Trees.","solution":"class FenwickTree: def __init__(self, n): self.size = n self.tree = [0] * (n + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def prefix_sum(self, index): result = 0 while index > 0: result += self.tree[index] index -= index & -index return result def process_operations(n, q, array, operations): fenwick_tree = FenwickTree(n) current_array = [0] * (n + 1) for i in range(n): current_array[i + 1] = array[i] fenwick_tree.update(i + 1, array[i]) results = [] for operation in operations: op_type = operation[0] if op_type == 1: # Update operation index = operation[1] value = operation[2] current_value = current_array[index] increment = value - current_value fenwick_tree.update(index, increment) current_array[index] = value elif op_type == 2: # Range sum query left = operation[1] right = operation[2] result = fenwick_tree.prefix_sum(right) - fenwick_tree.prefix_sum(left - 1) results.append(result) return results"},{"question":"You are given a list of n integers and you need to partition it into two non-empty sublists A and B such that the difference between the sum of the elements in A and the sum of the elements in B is minimized. The first line contains one integer n (2 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers, each integer ai (−10^4 ≤ ai ≤ 10^4) — the elements of the list. Output a single integer — the minimum possible difference between the sum of elements in sublist A and the sum of elements in sublist B. Example: Input: 5 1 2 3 4 5 Output: 1 In this example, you can partition the list as A = [1, 2, 3, 4] and B = [5], which makes the sums 10 and 5 respectively. The absolute difference is |10 - 5| = 5. To minimize the difference further, you can partition the list as A = [1, 4, 5] and B = [2, 3], which makes the sums 10 and 5 respectively. The absolute difference is |10 - 9| = 1.","solution":"def minimum_partition_difference(n, lst): from itertools import combinations total_sum = sum(lst) min_difference = float(\'inf\') for i in range(1, n): for combination in combinations(lst, i): subset_sum = sum(combination) difference = abs(total_sum - 2 * subset_sum) min_difference = min(min_difference, difference) return min_difference"},{"question":"Aria is a gifted musician and also a puzzle enthusiast. She loves creating music playlists from her vast collection of songs. Each song has a unique playtime ti and a unique rating ri. Aria wants to create a playlist of exactly k songs such that: 1. The total playtime of the k songs does not exceed T. 2. The total rating of the k songs is maximized. Your task is to determine the maximum possible total rating that Aria can achieve with her playlist, given the constraints mentioned above. The first line contains three integers n, k, and T (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n, 1 ≤ T ≤ 10^9) — the number of songs in the collection, the number of songs in the playlist, and the total playtime limit of the playlist. Each of the following n lines contains two integers ti and ri (1 ≤ ti, ri ≤ 10^9) — playtime and rating of the i-th song. Print the maximum possible total rating of the playlist that Aria can create given the constraints. If it is not possible to create such a playlist, print 0. In the first example, with n = 5 songs, k = 2, and T = 8, suppose the details of the songs are as follows: 1. (4, 5) 2. (3, 6) 3. (2, 5) 4. (4, 4) 5. (1, 3) One possible optimal playlist would include songs 2 and 3, with a total playtime of 5 and total rating of 11. Thus, the maximum possible total rating is 11.","solution":"import heapq from itertools import combinations def maximize_playlist_rating(n, k, T, songs): if k == 0 or T == 0: return 0 max_rating = 0 # Iterate over all combinations of songs of size k for combo in combinations(songs, k): total_playtime = sum(song[0] for song in combo) if total_playtime <= T: total_rating = sum(song[1] for song in combo) max_rating = max(max_rating, total_rating) return max_rating"},{"question":"In the kingdom of Gridland, there is a grid of size `n x n` where `n` is an even integer. The king loves symmetry, so he has ordered that the grid must be filled with non-negative integers such that each row and each column contains an even sum. Additionally, the sum of all values in the grid must be minimized. Given the integer `n`, determine the minimal possible sum of all values in the grid and provide an example configuration of the grid that satisfies the king\'s requirements. The first line of the input contains an even integer `n` (2 ≤ n ≤ 100). Output the minimal possible sum of all values in the grid in the first line. Output the grid configuration in the next `n` lines, where each line contains `n` integers separated by a space. Example input: ``` 4 ``` Example output: ``` 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ```","solution":"def gridland_solution(n): Given an even integer n, returns the minimal possible sum of all values in the grid and an example configuration of the grid that satisfies the king\'s requirements. # Minimal sum is 0 with all values being 0 in the grid. grid = [[0] * n for _ in range(n)] minimal_sum = 0 return minimal_sum, grid # Example usage n = 4 minimal_sum, grid = gridland_solution(n) print(minimal_sum) for row in grid: print(\' \'.join(map(str, row)))"},{"question":"A software developer is working on an advanced pathfinding algorithm. Given a directed graph with `n` nodes and `m` edges, they need to quickly execute a series of queries to determine the shortest path between two nodes. Each node is labeled from 1 to n. The graph can have edges with positive Integer weights, and it may contain multiple edges between the same pair of nodes, as well as loops (edges that connect a node to itself). The algorithm should handle `q` queries, each asking for the shortest path distance between two nodes u and v. If there is no path between these nodes, the algorithm should return -1 for that query. **Input:** - The first line contains three integers `n` (2 ≤ n ≤ 10^5), `m` (1 ≤ m ≤ 10^6), and `q` (1 ≤ q ≤ 10^5) — the number of nodes, edges, and queries respectively. - Each of the next `m` lines contains three integers `ui`, `vi`, and `wi` (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 10^9) describing an edge from node `ui` to node `vi` with weight `wi`. - Each of the next `q` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — the nodes between which the shortest path is to be found. **Output:** - For each query, output the shortest path distance between nodes `u` and `v`. If no such path exists, output `-1`. **Example:** Input: ``` 6 7 3 1 2 4 1 3 2 3 4 7 4 3 3 5 4 2 5 6 5 6 5 1 1 4 1 5 5 4 ``` Output: ``` 9 -1 2 ``` **Explanation:** 1. The shortest path from 1 to 4 goes through nodes 1 -> 3 -> 4 with distance 2 + 7 = 9. 2. There is no path from 1 to 5. 3. The shortest path from 5 to 4 directly goes through an edge with weight 2.","solution":"import heapq import sys def dijkstra(graph, start, n): distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_paths(n, m, edges, queries): graph = {i: [] for i in range(1, n+1)} for ui, vi, wi in edges: graph[ui].append((vi, wi)) results = [] for u, v in queries: if u == v: results.append(0) continue distances = dijkstra(graph, u, n) result = distances[v] if result == float(\'infinity\'): results.append(-1) else: results.append(result) return results"},{"question":"A transportation company owns several types of vehicles, each having different capacities for transporting goods. The company receives transport requests from customers, each customer specifying the amount of goods they want to transport. However, there is a limitation: the company can only fulfill requests in batches where the total capacity of the chosen vehicles exactly matches the requested amount. Vehicles cannot be divided, i.e., if a vehicle\'s capacity exceeds the customer’s request, it cannot be used. Your task is to determine the minimum number of vehicles needed for each customer\'s request. If it’s not possible to fulfill a request exactly, return -1 for that request. The first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^3) — the number of vehicle types and the number of transport requests respectively. The second line of each test case contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^6) — the capacities of the vehicles. The third line of each test case contains m integers r1, r2, ..., rm (1 ≤ ri ≤ 10^6) — the amount of goods each customer wants to transport. For each test case, output m integers separated by spaces, each indicating the minimum number of vehicles needed for the corresponding customer’s request. If a request cannot be fulfilled exactly, output -1 for that request.","solution":"from itertools import combinations_with_replacement def min_vehicles(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] capacities = test_cases[i][1] requests = test_cases[i][2] capacities.sort() max_request = max(requests) dp = [-1] * (max_request + 1) dp[0] = 0 for capacity in capacities: for j in range(capacity, max_request + 1): if dp[j - capacity] != -1: if dp[j] == -1 or dp[j] > dp[j - capacity] + 1: dp[j] = dp[j - capacity] + 1 test_result = [] for request in requests: test_result.append(dp[request]) results.append(test_result) return results"},{"question":"Alice is a big fan of candies and has a collection of candy jars. She wants to evenly distribute her candies into distinct jars such that each jar should get a unique count of candies. Alice also doesn\'t want to leave any candy out. For example, if she has 6 candies, she could put 1 candy in one jar and 5 in another or distribute them in other distinct combinations. Write a program that determines whether Alice can distribute all her candies among the jars in the optimal way mentioned above. The first and only line of input contains a single integer n (1 ≤ n ≤ 10^6) — the number of candies Alice has. Output \\"YES\\" if Alice can distribute all candies as described or \\"NO\\" if it\'s not possible. For example: - For n = 6, the output should be \\"YES\\" because she can have jars with 1 and 5 candies. - For n = 5, the output should be \\"NO\\" because it\'s impossible to distribute unique candies among the jars without any leftovers. Note: The unique distribution means that no two jars should contain the same number of candies.","solution":"def can_distribute_candies(n): Determines if n candies can be distributed into distinct jars such that no jar has the same number of candies. sum_candies = 0 k = 0 while sum_candies < n: k += 1 sum_candies += k if sum_candies == n: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of non-negative integers representing the height of walls at different positions. Every day, it rains, and certain water is collected between these walls. You need to determine how much water will be trapped after raining. The list of heights can be represented as an array heights of size n. Water trapped between walls can be calculated as the difference between the height of the wall and the height of water wherever possible. Write a function `trapWater(heights)` that takes in an array of integers representing the height of walls, and returns an integer representing the total water trapped. **Function signature:** ```python def trapWater(heights: List[int]) -> int: ``` **Input:** - A list `heights` of length `n` (0 le n le 10^5), where each element (height of wall) is a non-negative integer (0 le heights[i] le 10^4). **Output:** - Return an integer representing the total water trapped between the walls. **Example:** ```python trapWater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) # Output: 6 # Explanation: The array [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] represents wall heights, and the water collected between them is 6 units. ``` **Note:** In the example: - Water trapped between heights[1] and heights[3] is 1 unit. - Water trapped between heights[3] and heights[7] is 4 units. - Water trapped between heights[7] and heights[10] is 1 unit. Therefore, the total water trapped is 6 units.","solution":"from typing import List def trapWater(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"In the magical kingdom of Alphaland, there are n different types of artifacts and m different types of magical creatures. Each artifact can be used to enhance a creature\'s power, but the effectiveness of the enhancement depends on the pairing between the artifact and the creature. The effectiveness is represented as a two-dimensional array of size n by m, where the value at position (i, j) indicates the effectiveness of using the i-th artifact on the j-th creature. A wizard wants to maximize the total effectiveness by distributing exactly k artifacts to the creatures, where each artifact can only be used on one creature, and each creature can only receive one artifact. The wizard can select any k artifacts out of the n available, and choose the best possible pairing to achieve maximum effectiveness. Your task is to determine the maximum total effectiveness that can be achieved with the optimal distribution of exactly k out of the n artifacts to the m creatures. The first line of input contains three integers n, m, and k (1 ≤ n, m, k ≤ 50, k ≤ min(n, m)), which are the number of artifact types, the number of creature types, and the number of artifacts to distribute, respectively. Each of the next n lines contains m integers, which represent the effectiveness matrix. The j-th number in the i-th row indicates the effectiveness of using the i-th artifact on the j-th creature. Output a single integer, which is the maximum total effectiveness that can be achieved. Example input: ``` 4 3 2 1 2 3 2 3 1 3 6 0 4 1 5 ``` Example output: ``` 11 ``` Explanation: - Choose artifacts 2 and 3 (0-indexed) for a total effectiveness of 11: - Artifact 2 is used on creature 2 (effectiveness = 6) - Artifact 3 is used on creature 0 (effectiveness = 5)","solution":"from itertools import combinations import numpy as np from scipy.optimize import linear_sum_assignment def max_total_effectiveness(n, m, k, effectiveness_matrix): effectiveness_matrix = np.array(effectiveness_matrix) max_effectiveness = 0 # Generating combinations of k artifacts out of n artifact_combinations = combinations(range(n), k) for artifact_comb in artifact_combinations: sub_matrix = effectiveness_matrix[np.array(artifact_comb), :] row_ind, col_ind = linear_sum_assignment(-sub_matrix) effectiveness = sub_matrix[row_ind, col_ind].sum() if effectiveness > max_effectiveness: max_effectiveness = effectiveness return max_effectiveness"},{"question":"Alice and Bob are playing a game with a string s of length n consisting of lowercase alphabets. Alice always goes first, and they take turns alternately. On each player\'s turn, they must choose a character from the string that hasn\'t been chosen before. The game continues until the string is exhausted, and the player who cannot make a move loses. Alice will always try to maximize the chances of winning, and Bob will try to minimize Alice\'s chances. A player is allowed to select any character, not necessarily adjacent. Given the string s, determine the winner if both players play optimally. # Input: - The first line contains an integer t (1 leq t leq 100), the number of test cases. - For each test case: - The first line contains an integer n (1 leq n leq 100), the length of the string s. - The second line contains the string s of length n consisting of lowercase alphabets. # Output: - For each test case, print \\"Alice\\" if Alice has a winning strategy, otherwise print \\"Bob\\" on a new line. # Example Input: ```plaintext 2 6 aabbcc 3 abc ``` Output: ```plaintext Alice Alice ``` # Explanation: - For the first test case: - Alice can start by choosing \'a\', Bob can choose the other \'a\'. - Alice chooses one of the \'b\'s, Bob chooses the other \'b\'. - Alice chooses one of the \'c\'s, Bob has no other move. - Alice wins. - For the second test case: - Alice can choose \'a\', Bob can choose \'b\'. - Alice chooses \'c\', Bob has no other move. - Alice wins again.","solution":"def determine_winner(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] if n % 2 == 1: # If the length of the string is odd results.append(\\"Alice\\") else: # If the length of the string is even results.append(\\"Bob\\") return results"},{"question":"Suppose you have a list of integers. You want to make all the elements of the list equal by performing the minimum number of operations. In one operation, you can select any subarray and either increment or decrement each element of the subarray by 1. Given the initial state of the list, determine the minimum number of operations required to make all the elements equal. **Input** The first line contains a single integer n (1 le n le 200,000) — the number of elements in the list. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). **Output** Output a single integer — the minimum number of operations required to make all elements in the list equal. **Example** ``` Input 5 1 2 3 4 5 Output 4 Input 3 10 10 10 Output 0 ``` **Explanation** In the first example, an optimal sequence of operations would be: 1. Increment the subarray [2, 3, 4, 5] to [2, 3, 4, 5, 5] 2. Increment the subarray [2, 3, 4, 5, 5] to [3, 3, 4, 5, 5] 3. Increment the subarray [3, 3, 4, 5, 5] to [4, 4, 4, 5, 5] 4. Increment the subarray [4, 4, 4, 5, 5] to [5, 5, 5, 5, 5] In the second example, the elements are already equal, so no operations are needed.","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations required to make all elements in the list equal. The key idea is to find the median and calculate the number of operations required to make all elements equal to the median. arr.sort() n = len(arr) median = arr[n // 2] operations = sum(abs(x - median) for x in arr) return operations # Example usage: # n = 5 # arr = [1, 2, 3, 4, 5] # print(min_operations_to_equalize(arr)) # Output: 4"},{"question":"William likes puzzles and word games in addition to his love for video games. One day, he came across an unusual puzzle involving two strings. The objective of the puzzle is to transform one string into another using the minimal number of operations. The operations allowed are: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character with another character. Given two strings, William wants to determine the minimum number of operations required to transform the first string into the second string. Input The input consists of two lines. The first line contains the first string, s1 (1 le |s1| le 1000), and the second line contains the second string, s2 (1 le |s2| le 1000). Output Print a single number, which is the minimum number of operations required to transform s1 into s2. Example Input: ``` horse ros ``` Output: ``` 3 ``` Explanation: To transform \\"horse\\" into \\"ros\\", the minimum number of operations required are: 1. Replace \'h\' with \'r\': \\"horse\\" becomes \\"rorse\\". 2. Remove \'o\': \\"rorse\\" becomes \\"rrse\\". 3. Remove \'e\': \\"rrse\\" becomes \\"ros\\".","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Maintaining a DP array. dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the DP array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given two integers, `m` and `n`, representing the dimensions of a grid (with 1-based indexing). The grid is initially empty. You place `k` rooks on the grid such that no two rooks attack each other. A rook attacks all cells in the same row and column it is placed in. Your task is to determine the maximum number of non-attacking rooks that can be placed in the grid and to provide a possible arrangement of such rooks. The first line contains two integers `m` and `n` (1 ≤ `m`, `n` ≤ 1000), representing the number of rows and columns, respectively. The second line contains the integer `k` (0 ≤ `k` ≤ min(m, n)), the number of rooks to be placed. Print \\"YES\\" if it is possible to place `k` non-attacking rooks on the grid. In the next `k` lines, print the coordinates of the cells in which the rooks are placed. Each coordinate must be in the format `(i, j)` where `1 ≤ i ≤ m`, `1 ≤ j ≤ n`. If it is impossible to place the `k` rooks such that no two rooks attack each other, print \\"NO\\". Example: Input: 3 5 3 Output: YES 1 1 2 2 3 3 Explanation: The example illustrates a 3x5 grid, with 3 non-attacking rooks placed at (1, 1), (2, 2), and (3, 3).","solution":"def place_rooks(m, n, k): Determine if it\'s possible to place k non-attacking rooks on an m x n grid and provide their coordinates if possible. Args: m (int): number of rows. n (int): number of columns. k (int): number of rooks to place. Returns: str: \\"YES\\" followed by coordinates of rooks if possible, otherwise \\"NO\\". if k > min(m, n): return \\"NO\\" result = [\\"YES\\"] for i in range(1, k + 1): result.append(f\\"{i} {i}\\") return \\"n\\".join(result) # Example usage: # (This will not be part of the final function, added here for clarification purposes) m, n, k = 3, 5, 3 print(place_rooks(m, n, k))"},{"question":"You are given a weighted directed graph with `n` nodes and `m` edges. Your task is to find the shortest path from a given source node `s` to all other nodes in the graph. The graph is guaranteed to have no negative weight cycles, but it might have edges with negative weights. **Input:** - The first line contains three integers `n`, `m`, and `s` (1 ≤ `n` ≤ 500, 0 ≤ `m` ≤ 2000, 1 ≤ `s` ≤ `n`) — the number of nodes, the number of edges, and the source node. - Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ `u, v` ≤ `n`, −1000 ≤ `w` ≤ 1000) — representing a directed edge from node `u` to node `v` with weight `w`. **Output:** - Output `n` integers; the i-th integer should be the length of the shortest path from the source node `s` to node `i`. If there is no path to node `i`, output `INF` for that node. **Example:** **Input:** ``` 5 6 1 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 2 ``` **Output:** ``` 0 2 3 9 6 ``` **Explanation:** The shortest paths from node 1 are: - To node 1: 0 (the source node itself) - To node 2: 2 (direct edge from 1 to 2) - To node 3: 3 (1 -> 2 -> 3) - To node 4: 9 (1 -> 2 -> 4) - To node 5: 6 (1 -> 2 -> 3 -> 5) Use the Bellman-Ford algorithm or another shortest path algorithm that handles negative weights but not negative cycles.","solution":"def shortest_path(n, m, s, edges): Calculates the shortest paths from source node `s` to all other nodes in a directed graph with `n` nodes and `m` edges. Args: n: Number of nodes m: Number of edges s: Source node edges: List of tuples representing the edges, where each tuple is (u, v, w) Returns: List of shortest path distances from source node `s` to each node. If a node is unreachable, its distance is \'INF\' INF = float(\'inf\') distances = [INF] * n distances[s - 1] = 0 # Convert 1-based to 0-based index for the source node # Relax edges up to (n-1) times for _ in range(n - 1): for u, v, w in edges: if distances[u - 1] != INF and distances[u - 1] + w < distances[v - 1]: distances[v - 1] = distances[u - 1] + w # Translate infinite distances to \'INF\' for i in range(n): if distances[i] == INF: distances[i] = \'INF\' return distances"},{"question":"You are given a grid with n rows and m columns. The grid is initially filled with \'.\' (empty cell). You can perform the following operations on the grid: - Choose any cell and place a vertical domino of size 2x1 (\'|\' character) if it fits within the grid boundaries and does not overlap any already existing domino. - Choose any cell and place a horizontal domino of size 1x2 (\'-\' character) if it fits within the grid boundaries and does not overlap any already existing domino. Your task is to determine the minimum number of dominos needed to completely cover the grid. Note that dominos can only be placed on empty cells, and each domino must cover exactly two cells. The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the grid. Print a single integer representing the minimum number of dominos required to cover the entire grid. # Example Input ``` 3 3 ``` Output ``` 5 ``` # Explanation One possible solution is to place 5 dominos in the following configuration: ``` |-|- |-|- |-|-| ``` In this configuration, each domino covers exactly two cells, and there are no empty cells left in the grid.","solution":"def min_dominos(n, m): Determine the minimum number of dominos required to cover an n x m grid. Args: - n (int): number of rows - m (int): number of columns Returns: - int: minimum number of dominos required total_cells = n * m min_dominos = (total_cells + 1) // 2 return min_dominos"},{"question":"You are managing a set of servers in a data center. Each server has a certain processing power (in terms of tasks it can handle per second), and a certain cooling requirement (in terms of cooling units per second that must be continuously supplied to it to function optimally). You need to allocate tasks to these servers in such a way that the total processing power utilized is maximized without exceeding the available cooling units in the data center. Given are two arrays `P` and `C`, each of length `n`, where `P[i]` represents the processing power of the `i`-th server and `C[i]` represents the cooling units required per second by the `i`-th server. You are also given an integer `m` representing the total cooling units available in the data center per second. Find the maximum total processing power that can be achieved without exceeding the available cooling units `m`. # Input - The first line contains an integer `n` (1 leq n leq 100`) — the number of servers. - The second line contains `n` integers `P_1, P_2, ..., P_n` (1 leq P_i leq 1000) — the processing power of each server. - The third line contains `n` integers `C_1, C_2, ..., C_n` (1 leq C_i leq 1000) — the cooling units required by each server. - The fourth line contains an integer `m` (1 leq m leq 10000) — the total available cooling units. # Output Print the maximum total processing power that can be utilized without exceeding the available cooling units. # Example Input ``` 4 10 20 30 40 2 4 6 8 10 ``` Output ``` 50 ``` Explanation By selecting the servers with processing powers of 10 and 40, the total cooling requirement is 2 + 8 = 10, which matches the available cooling units. The total processing power utilized is 10 + 40 = 50.","solution":"def max_processing_power(n, P, C, m): Returns the maximum total processing power without exceeding the cooling units available. Parameters: n (int): Number of servers P (list of int): Processing powers of the servers C (list of int): Cooling requirements of the servers m (int): Total available cooling units Returns: int: The maximum total processing power # This problem can be approached using dynamic programming similar to the knapsack problem. dp = [0] * (m + 1) for i in range(n): for j in range(m, C[i] - 1, -1): dp[j] = max(dp[j], dp[j - C[i]] + P[i]) return max(dp) # Example Usage: n = 4 P = [10, 20, 30, 40] C = [2, 4, 6, 8] m = 10 print(max_processing_power(n, P, C, m)) # Output: 50"},{"question":"Given an array of integers representing the initial capacities of a number of buckets, you are tasked to perform a series of operations to either increment the capacities of elements within a specified range, or to query the maximum capacity in a specified range after all the operations are performed. You are given an array of size ( n ) and ( q ) queries of two types: 1. Update all elements in a specified range by adding a given value. 2. Query the maximum capacity in a given range. The input consists of the following: - The first line contains two integers ( n ) and ( q ) ((1 leq n, q leq 10^5)) — the number of elements in the array and the number of queries. - The second line contains ( n ) integers representing the initial capacities of the buckets. - Each of the next ( q ) lines represents a query of one of the following two types: - Type 1: \\"1 l r v\\" ((1 leq l leq r leq n), (-10^9 leq v leq 10^9)) — Increment the capacities of all buckets from index ( l ) to ( r ) by ( v ). - Type 2: \\"2 l r\\" ((1 leq l leq r leq n)) — Query and return the maximum capacity among buckets from index ( l ) to ( r ). # Output For each query of type 2, output the maximum capacity within the specified range on a new line. # Example Input ``` 5 3 1 2 3 4 5 1 1 3 1 2 2 4 2 1 5 ``` Output ``` 4 5 ``` # Note In the given example, we have an initial array of capacities `[1, 2, 3, 4, 5]`. - After the first query `1 1 3 1`, the updated array becomes `[2, 3, 4, 4, 5]`. - The first type 2 query `2 2 4` queries the maximum value from index 2 to 4 in the updated array, which returns `4`. - The second type 2 query `2 1 5` queries the maximum value from index 1 to 5 in the updated array, which returns `5`.","solution":"def process_queries(n, q, capacities, queries): Processes a list of queries on a capacities array. Args: n (int): Number of elements in the capacities array. q (int): Number of queries. capacities (list): Initial capacities of the buckets. queries (list): List of queries to be processed. Returns: list: List of results for type 2 queries. from collections import defaultdict result = [] additions = defaultdict(int) for query in queries: if query[0] == 1: # Update query _, l, r, v = query for i in range(l - 1, r): additions[i] += v elif query[0] == 2: # Query for max in range _, l, r = query max_capacity = float(\'-inf\') for i in range(l - 1, r): max_capacity = max(max_capacity, capacities[i] + additions[i]) result.append(max_capacity) return result # Example Usage: # n = 5 # q = 3 # capacities = [1, 2, 3, 4, 5] # queries = [ # [1, 1, 3, 1], # [2, 2, 4], # [2, 1, 5] # ] # print(process_queries(n, q, capacities, queries)) # Output: [4, 5]"},{"question":"The kingdom is hosting a grand tournament where participants compete in various events. One of the most popular events is the \\"Maze Run\\". In this event, participants are given a rectangular maze filled with walls and empty spaces. The goal is to determine the minimum number of steps required to reach from the top-left corner to the bottom-right corner of the maze. You are tasked with creating an efficient algorithm to solve this problem. The maze is represented by a grid where each cell is either a wall (`#`) or an empty space (`.`). You can move up, down, left, or right, but cannot move diagonally or through walls. It is guaranteed that the starting point (top-left corner) and the ending point (bottom-right corner) are empty spaces. # Input The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 1000) — the dimensions of the maze. The next `n` lines contain `m` characters each (`#` or `.`) representing the maze. # Output Print a single integer — the minimum number of steps required to reach from the top-left corner to the bottom-right corner of the maze. If it is not possible to reach the bottom-right corner, print `-1`. # Examples Example 1 **Input:** ``` 4 4 .... ..#. ..#. .... ``` **Output:** ``` 6 ``` Example 2 **Input:** ``` 3 3 .#. # ..# ``` **Output:** ``` -1 ``` # Note In the first example, the shortest path from the top-left corner to the bottom-right corner can be represented as: `Right -> Right -> Down -> Down -> Left -> Left -> Down -> Right`. In the second example, it is impossible to reach the bottom-right corner due to the surrounding walls.","solution":"from collections import deque def min_steps_maze(n, m, maze): if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == n-1 and c == m-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and maze[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given an array of integers of length n. Your task is to determine the length of the shortest subarray that, when sorted, results in the entire array being sorted. If the array is already sorted, the answer should be 0. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the length of the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. Output a single integer, the length of the shortest subarray that needs to be sorted. # Example Input ``` 5 1 3 5 4 2 ``` Output ``` 4 ``` Input ``` 4 1 2 3 4 ``` Output ``` 0 ``` # Explanation In the first example, to sort the array [1, 3, 5, 4, 2], you need to sort the subarray [3, 5, 4, 2], which has a length of 4. In the second example, the array is already sorted, so the answer is 0.","solution":"def shortest_unsorted_subarray_length(array): Determines the length of the shortest subarray that, when sorted, results in the entire array being sorted. If the array is already sorted, returns 0. n = len(array) sorted_array = sorted(array) if array == sorted_array: return 0 start, end = 0, n - 1 # Find the first position from the left where the array differs from the sorted array while start < n and array[start] == sorted_array[start]: start += 1 # Find the first position from the right where the array differs from the sorted array while end >= 0 and array[end] == sorted_array[end]: end -= 1 return end - start + 1"},{"question":"You are tasked with managing the deployment of satellite communication relays in a network. There are a total of N satellites, with each satellite directly connected to several other satellites via bidirectional communication links. A relay is successful in transferring signals from one satellite to another if there is a direct or indirect path between them. Each satellite can independently attempt to broadcast a signal that should ideally reach all other satellites. However, some satellites may have faulty transmission equipment and cannot broadcast signals. Your goal is to find the minimum number of satellites required to initiate a signal so that all satellites in the network are reached, assuming the communication links themselves are reliable (i.e., there are no faulty links). The first line contains one integer N (1 leq N leq 10^5), the number of satellites. The next line contains an integer M (0 leq M leq 10^5), the number of bidirectional communication links. Each of the next M lines contains two integers U and V (1 leq U, V leq N), denoting a bidirectional communication link between satellites U and V. The last line contains an integer K (0 leq K leq N), the number of satellites with faulty transmission equipment. The following line contains K integers, each representing a satellite with faulty equipment (these satellites cannot be used to initiate a signal). Output a single integer, the minimum number of satellites required to initiate a signal so that all operational satellites are reached. If it\'s not possible to reach all satellites, output -1. **Example Input:** ``` 5 4 1 2 2 3 3 4 4 5 2 2 3 ``` **Example Output:** ``` 1 ``` **Explanation:** In the example, there are 5 satellites and 4 communication links. Satellites 2 and 3 are faulty and cannot initiate a signal. Initiating a signal from satellite 1 will propagate to satellites 2, 3, 4, and 5 (since faulty satellites can still relay signals). Hence, only 1 satellite is needed to initiate the signal.","solution":"from collections import defaultdict, deque def minimum_satellites_required(N, M, links, K, faulty_satellites): # Create a graph using adjacency list representation graph = defaultdict(list) for u, v in links: graph[u].append(v) graph[v].append(u) # Convert the list of faulty satellites to a set for fast lookup faulty_set = set(faulty_satellites) # A set to keep track of visited nodes visited = set() def bfs(start_node): queue = deque([start_node]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) components = [] # Find all connected components for node in range(1, N+1): if node not in visited: component = [] queue = deque([node]) while queue: current = queue.popleft() if current not in visited: visited.add(current) component.append(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) components.append(component) min_required = 0 for component in components: can_start = any(node not in faulty_set for node in component) if not can_start: return -1 min_required += 1 return min_required"},{"question":"Tina loves collecting rare magical stones. She recently came across a collection where each stone has a unique power level represented by a positive integer. Tina wishes to organize her collection in a most aesthetically pleasing sequence, defined as follows: Given an array of positive integers representing the power levels of the stones, she wants to form a sequence where the difference between consecutive stones is minimized. If there are multiple solutions, she prefers the one that is lexicographically smallest. Determine such a sequence for Tina’s collection. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of stones in Tina’s collection. The second line contains n positive integers (each between 1 and 1000) — the power levels of the stones. Output a single line containing the ordered sequence that Tina should follow to meet her requirements. **Example:** **Input:** ``` 5 4 2 9 3 7 ``` **Output:** ``` 2 3 4 7 9 ``` In this example, the sequence \\"2 3 4 7 9\\" is the one where the difference between consecutive power levels is minimized, and it is lexicographically smallest.","solution":"def organize_stones(n, power_levels): Organizes the power levels of stones in a sequence where the difference between consecutive stones is minimized and the sequence is lexicographically smallest. :param n: Integer, number of stones :param power_levels: List of integers, power levels of the stones :return: List of integers, ordered sequence of power levels return sorted(power_levels)"},{"question":"You\'re given a string containing digits and lowercase characters. You need to organize these characters into blocks of integers and letters. However, each block should start with a digit and contain exactly one lowercase letter. Additionally, you can rearrange the original string in any way, but you cannot add or remove characters. If it\'s impossible to organize all characters into valid blocks, print \\"Impossible\\". Input: - A single string `s` containing digits (`0-9`) and lowercase English letters (`a-z`). The length of `s` will be between 1 and 1000. Output: - If it\'s possible to rearrange the string into valid blocks, print each block in a new line. - If it\'s not possible, print a single word \\"Impossible\\". Example: Input: ``` 4a3b2c1d ``` Output: ``` 4a 3b 2c 1d ``` Input: ``` 123 ``` Output: ``` Impossible ``` Input: ``` 1b2c3a4d ``` Output: ``` 1b 2c 3a 4d ```","solution":"def organize_string(s): Organizes the input string into blocks that start with a digit and contain one lowercase letter. If it is not possible to create valid blocks, returns \\"Impossible\\". digits = [ch for ch in s if ch.isdigit()] letters = [ch for ch in s if ch.islower()] if len(digits) != len(letters): return \\"Impossible\\" blocks = [] for i in range(len(digits)): blocks.append(digits[i] + letters[i]) return \\"n\\".join(blocks)"},{"question":"Tom is planning a garden consisting of n garden beds arranged in a single line. Each garden bed will either have flowers or vegetables, and Tom has certain requirements on how they should be arranged: 1. No two consecutive garden beds can have vegetables. 2. If a garden bed has vegetables, then the garden bed before it and the garden bed after it (if they exist) must have flowers. 3. Tom wants to maximize the number of garden beds that have vegetables, as long as the above rules are followed. Given the number of garden beds, can you determine the maximum number of garden beds that can have vegetables? The first line contains an integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 le n le 1000) — the number of garden beds. For each test case, print one integer — the maximum number of garden beds that can have vegetables. Examples Input: ``` 3 1 2 5 ``` Output: ``` 0 1 2 ``` Explanation In the first test case, there is only one garden bed, so it cannot have vegetables as it would need flowers on both sides. In the second test case, Tom can have one vegetable garden bed (V) and one flower garden bed (F) arranged as \\"FV\\". In the third test case, the optimal arrangement is \\"FVFVF\\", which maximizes the number of vegetable garden beds to 2.","solution":"def max_vegetables(t, test_cases): For each test case, determine the maximum number of garden beds that can have vegetables. Args: t: int : The number of test cases test_cases: list : A list of integers representing the number of garden beds in each test case Returns: list : A list of integers representing the maximum number of garden beds that can have vegetables for each test case results = [] for n in test_cases: if n == 1: results.append(0) elif n % 2 == 0: results.append(n // 2) else: results.append(n // 2) return results"},{"question":"Given an undirected graph with `n` nodes and `m` edges. You are tasked with finding all pairs of nodes (u, v) where there exists a path from node u to node v. The graph may contain cycles and self-loops. The input will be formatted as follows: - The first line contains two integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 2000) representing the number of nodes and edges in the graph respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between node u and node v. Output the total number of pairs (u, v) such that there is a path from node u to node v. Note that (u, u) should always be included if u is reachable from itself. If there are multiple valid pairs, output the unique count. Example: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` 16 ``` Explanation: Every node can reach every other node in this example, including itself, forming 4 * 4 = 16 pairs. The solution involves finding the transitive closure of the graph, which can be efficiently achieved using the Floyd-Warshall algorithm for finding the reachability in O(n^3) time, given the constraints.","solution":"def find_all_pairs(n, m, edges): Finds the number of all pairs (u, v) in the graph such that there is a path from node u to node v. Parameters: n (int): Number of nodes. m (int): Number of edges. edges (list of tuples): List of edges where each edge is represented as a tuple (u, v). Returns: int: Total number of pairs (u, v) with a path from u to v. # Initialize the reachability matrix reach = [[False] * n for _ in range(n)] # Each node can reach itself for i in range(n): reach[i][i] = True # Mark the direct edges for u, v in edges: reach[u-1][v-1] = True reach[v-1][u-1] = True # since the graph is undirected # Floyd-Warshall Algorithm to find the transitive closure for k in range(n): for i in range(n): for j in range(n): if reach[i][k] and reach[k][j]: reach[i][j] = True # Count all pairs (u, v) where reach[u][v] is True count = sum(reach[i][j] for i in range(n) for j in range(n)) return count"},{"question":"You are given a chessboard of size n x n. Each cell in the board can either be empty (\\".\\") or occupied by a queen (\\"Q\\"). A queen is able to attack another queen if they are placed in the same row, the same column, or the same diagonal. Your task is to determine whether any two queens attack each other on the provided chessboard. If no two queens attack each other, print \\"SAFE\\". If there is at least one pair of queens that attack each other, print \\"ATTACK\\". The first line contains one positive integer n (1 ≤ n ≤ 1000) — the size of the chessboard. The next n lines contain n characters each, with \\".\\" indicating an empty cell and \\"Q\\" indicating a cell occupied by a queen. If there are multiple pairs of queens that attack each other, it is sufficient to detect and report just one. **Input:** ``` 4 .Q.. ...Q Q... ..Q. ``` **Output:** ``` ATTACK ```","solution":"def check_queens_attack(board): Check if any two queens attack each other on a chessboard. Parameters: - board: list of strings, each string represents a row in the chessboard. Returns: - str: \'SAFE\' if no two queens attack each other, \'ATTACK\' otherwise n = len(board) row = set() col = set() diag1 = set() diag2 = set() for i in range(n): for j in range(n): if board[i][j] == \'Q\': if i in row or j in col or (i - j) in diag1 or (i + j) in diag2: return \\"ATTACK\\" row.add(i) col.add(j) diag1.add(i - j) diag2.add(i + j) return \\"SAFE\\""},{"question":"A small library with an extensive collection has a very peculiar way of managing its borrowed books. Each book is uniquely identified by an integer id. Users can borrow and return books, and these actions are logged. Unfortunately, the system doesn’t directly display the status (borrowed or available) for each book; instead, it records a sequence of borrow and return actions. Given the log of these actions, determine which books are currently borrowed out. The first line of the input contains an integer n (1 leq n leq 10000) — the number of logged actions. The following n lines each contain an integer id with a prefix ‘B’ for borrow or ‘R’ for return. For example, \'B 123\' means book with id 123 is borrowed, and \'R 123\' means book with id 123 is returned. Output a list of unique ids representing the books that are currently borrowed. The ids in the output list should be sorted in ascending order. If no books are currently borrowed, output \\"No books are currently borrowed\\". # Example Input: ``` 7 B 123 B 124 R 123 B 125 B 123 R 124 B 126 ``` Output: ``` 123 125 126 ``` Explanation: - Book 123 is borrowed twice and returned once, so it is currently borrowed. - Book 124 is borrowed once and returned once, so it is not currently borrowed. - Book 125 is borrowed and not returned, so it is currently borrowed. - Book 126 is borrowed and not returned, so it is currently borrowed.","solution":"def currently_borrowed_books(log: list) -> list: Takes a list of borrow and return logs and returns a sorted list of currently borrowed books\' ids. If no books are currently borrowed, returns \\"No books are currently borrowed\\". borrowed_books = set() for entry in log: action, book_id = entry.split() book_id = int(book_id) if action == \'B\': borrowed_books.add(book_id) elif action == \'R\': if book_id in borrowed_books: borrowed_books.remove(book_id) if not borrowed_books: return \\"No books are currently borrowed\\" return sorted(borrowed_books)"},{"question":"You are given a string s of length n consisting of lowercase English letters. Your task is to determine whether it is possible to rearrange the characters of the string such that no two adjacent characters are the same. The first line of input contains an integer n (1 le n le 1000) — the length of the string. The second line of input contains the string s. Print \\"YES\\" (without quotes) if it\'s possible to rearrange the string such that no two adjacent characters are the same, otherwise print \\"NO\\" (without quotes). You can print each letter in any case (upper or lower). **Examples:** **Input:** ``` 6 aaabbb ``` **Output:** ``` YES ``` **Input:** ``` 3 aaa ``` **Output:** ``` NO ``` In the first example, \\"ab\\" can be repeated to rearrange the string as \\"ababab\\". In the second example, it is impossible to rearrange the characters to avoid having two adjacent \'a\'s.","solution":"from collections import Counter def can_rearrange_no_adjacent(n, s): Determines whether it is possible to rearrange the characters of the string such that no two adjacent characters are the same. :param n: Length of the string :param s: Input string of length n :return: \\"YES\\" if it is possible to rearrange, else \\"NO\\" if n == 1: return \\"YES\\" count = Counter(s) max_count = max(count.values()) if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"Lily has a collection of n different types of gemstones, each gemstone labeled from 1 to n. The i-th gemstone has a hardness value of hi. She wants to showcase her collection by arranging the gemstones in a particular sequence. However, Lily has a special rule for showcasing her gemstones: for every gemstone with a label x, it should only be placed after all gemstones with a label greater than x but with a hardness value less than or equal to gemstone x. Given the hardness values of each type of gemstone, determine if Lily can arrange her collection according to her rule. The first line of input contains a single integer n (1 ≤ n ≤ 2×10^5), the number of different types of gemstones. The second line contains n space-separated integers, h1, h2, ..., hn (1 ≤ hi ≤ 10^5), representing the hardness values for each gemstone. Output \\"Yes\\" if Lily can arrange her gemstones following her special rule, and \\"No\\" otherwise. For example, consider the case where n = 3 and the hardness values are h = [3, 2, 1]. In this scenario, Lily cannot showcase her gemstones as required because gemstone 3 (which has a hardness of 1) would violate the rule with respect to gemstones 1 and 2. In another example, if n = 4 and the hardness values are h = [4, 5, 6, 7], it is possible to arrange them in any order. Hence, the expected output is \\"Yes\\".","solution":"def can_arrange_gemstones(n, hardness_values): Determine if Lily can arrange her gemstones according to her special rule. Parameters: n (int): The number of gemstones. hardness_values (list of int): The hardness values of the gemstones. Returns: str: \\"Yes\\" if the gemstones can be arranged according to the rule, otherwise \\"No\\". for i in range(1, n): if hardness_values[i] < hardness_values[i - 1]: return \\"No\\" return \\"Yes\\""},{"question":"Elias has a sequence of n integers, denoted as p1, p2, ..., pn. He wants to find out how many contiguous subarrays have a sum exactly equal to a given integer k. A contiguous subarray is a sequence of consecutive elements from the original array. You are required to write a function that takes an integer n (the length of the array), the sequence of n integers p, and an integer k, and returns the number of contiguous subarrays whose sum equals k. # Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n space-separated integers p1, p2, ..., pn (−10^4 ≤ pi ≤ 10^4) — the elements of the array. The third line contains an integer k (−10^9 ≤ k ≤ 10^9) — the target sum. # Output Print one integer: the number of contiguous subarrays whose sum is equal to k. # Example Input 6 1 -1 2 3 -1 2 3 Output 3 Explanation The subarrays with sum equal to 3 are: [1, -1, 2, 1], [2, 1], and [3]. There are 3 such subarrays.","solution":"def num_of_subarrays_with_sum_k(n, p, k): Returns the number of contiguous subarrays whose sum equals k. Parameters: n (int): Length of the array p (list of int): The sequence of integers in the array k (int): Target sum Returns: int: Number of subarrays with sum equal to k from collections import defaultdict current_sum = 0 count = 0 sum_dict = defaultdict(int) sum_dict[0] = 1 for num in p: current_sum += num if (current_sum - k) in sum_dict: count += sum_dict[current_sum - k] sum_dict[current_sum] += 1 return count"},{"question":"In a theoretical land, there exists a form of civilization where people communicate using a very particular dialect. Their language is a string-based language, where each word is represented by a distinct sequence of lowercase Latin letters. These words have a unique property: any two consecutive words differ in at least one position. Your task is to help these people automate the process of validating whether a given sequence of words is acceptable according to their dialect rules. Given a sequence of words, determine if the sequence follows the distinctiveness rule: that is, for each pair of consecutive words in the sequence, the number of differing positions should be at least one. # Input - The first line contains an integer n (2 leq n leq 1000) — the number of words in the sequence. - Each of the next n lines contains a string s_i (1 leq |s_i| leq 100) representing a word, where |s_i| is the length of the word s_i. All words are of the same length. # Output - Print \\"YES\\" if the sequence is valid according to the dialect\'s rules. - Print \\"NO\\" otherwise. # Example Input: ``` 3 hello hallo hullo ``` Output: ``` YES ``` Input: ``` 4 abcde bbcdf cbcgh cbcgh ``` Output: ``` NO ``` Constraints: - The words in the input are guaranteed to be lowercase Latin letters. - All words have the same length. # Notes: - In the first example, each consecutive pair of words (`hello` and `hallo`, `hallo` and `hullo`) differ by at least one position. - In the second example, the sequence fails at the last two words, where `cbcgh` and `cbcgh` are identical, breaching the dialect\'s rules.","solution":"def is_valid_sequence(words): Validates if the given sequence of words follows the distinctiveness rule. Parameters: words (list of str): The list of words to validate. Returns: str: \\"YES\\" if the sequence is valid, \\"NO\\" otherwise. n = len(words) for i in range(n - 1): if words[i] == words[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"Fiona loves collecting whimsical trinkets. She owns a beautiful wooden treasure box that stores all her trinkets in an organized manner. Each trinket is associated with a unique integer value representing its rarity. She wants to place the trinkets in the box in such a way that the assortment of trinkets forms a perfect sequence. More formally, a sequence of trinkets is perfect if each pair of consecutive trinkets has a rarity difference of exactly 1. Given a list of integers representing the trinkets and their rarity values, help Fiona determine if she can rearrange her trinkets to form a perfect sequence. Write a function `can_form_perfect_sequence(trinkets: List[int]) -> str` that takes a list of integers and returns: - \\"YES\\" if the trinkets can be rearranged to form a perfect sequence, - \\"NO\\" otherwise. # Input - A list of integers `trinkets` where each integer represents the rarity of a trinket. The length of the list will be `n` (1 ≤ n ≤ 1000), and the rarity values will range between `1` and `10^6`. # Output - A string, either \\"YES\\" or \\"NO\\". # Examples Example 1 **Input:** ```python trinkets = [4, 2, 1, 3] ``` **Output:** ```python \\"YES\\" ``` **Explanation:** By rearranging the trinkets as [1, 2, 3, 4], the trinkets form a perfect sequence. Example 2 **Input:** ```python trinkets = [7, 9, 8, 11] ``` **Output:** ```python \\"NO\\" ``` **Explanation:** There is no arrangement of the trinkets that can form a perfect sequence since there is a gap between 8 and 9, and between 9 and 11. # Notes - Consider checking for the difference between the maximum and minimum values in the list after sorting it. The sequence is perfect if and only if this difference equals `n - 1`, where `n` is the number of trinkets.","solution":"def can_form_perfect_sequence(trinkets): Determines if the trinkets can be rearranged to form a perfect sequence. Args: trinkets (List[int]): List of integers representing trinket rarities. Returns: str: \\"YES\\" if they can form a perfect sequence, \\"NO\\" otherwise. if not trinkets: return \\"NO\\" trinkets.sort() n = len(trinkets) # Check if the difference between max and min values is exactly n-1 if trinkets[-1] - trinkets[0] == n - 1: return \\"YES\\" return \\"NO\\""},{"question":"Sarah is a skilled gardener and she loves designing gardens with beautiful flowerbeds. She has a total of m flowerbeds and n different types of flowers. Sarah wants to ensure that each flowerbed has a unique combination of flowers such that no two flowerbeds look the same. She has a specific preference list of flowers for each flowerbed. To make things more challenging, Sarah has a few constraints: 1. Each flowerbed must have exactly k different types of flowers. 2. The total number of flowers Sarah has for each type is limited, meaning she can\'t place a flower in more flowerbeds than she has flowers of that type. 3. Sarah must determine if it is possible to assign flowers to each flowerbed while honoring all the constraints. If it is possible, provide one such possible arrangement. If it is not possible, respond that it\'s not feasible. Given the number of available flowers for each type, determine if Sarah can satisfy her preferences for her flowerbeds. The first line of input contains three integers m, n, and k (1 le m, n le 1000, 1 le k le n) — the number of flowerbeds, the number of flower types, and the number of different types of flowers per flowerbed. The next line contains n integers f_1, f_2, ..., f_n (0 le f_i le 1000) — the number of available flowers for each type. The following m lines describe the preferences for each flowerbed. Each line is formatted as p_i[1], p_i[2], ..., p_i[l_i] (1 le l_i le n) — the list of preferred flower types for the i-th flowerbed. Output \\"POSSIBLE\\" if Sarah can design the flowerbeds accordingly, followed by m lines each containing k distinct integers, which are the types of flowers assigned to each flowerbed. If it\'s not feasible, output \\"NOT POSSIBLE\\". # Example Input: ``` 3 5 2 2 2 2 1 1 1 2 3 2 3 4 3 4 5 ``` Output: ``` POSSIBLE 1 2 3 4 5 3 ``` In the first sample, Sarah can allocate flowers to the flowerbeds in such a manner: - Flowerbed 1: Types 1 and 2 - Flowerbed 2: Types 3 and 4 - Flowerbed 3: Types 5 and 3","solution":"def garden_design(m, n, k, flower_counts, preferences): from collections import defaultdict from heapq import heappop, heappush # To hold flowerbed assignments assignments = [[] for _ in range(m)] # Prepare a heap for maintaining flowers\' availability flower_heap = [] for flower_type, count in enumerate(flower_counts, start=1): if count > 0: heappush(flower_heap, (count, flower_type)) # Flower type availability tracker assigned_flowers = defaultdict(int) # Assign flowers to each flowerbed for i in range(m): if k > len(preferences[i]): # Not enough preferences return \\"NOT POSSIBLE\\" used_types = set() j = 0 while j < k: if not preferences[i]: return \\"NOT POSSIBLE\\" flower_type = preferences[i][0] for ft in preferences[i]: if assigned_flowers[ft] < flower_counts[ft - 1]: assigned_flowers[ft] += 1 assignments[i].append(ft) used_types.add(ft) preferences[i].remove(ft) j += 1 break else: return \\"NOT POSSIBLE\\" if len(assignments[i]) != k: return \\"NOT POSSIBLE\\" return \\"POSSIBLE\\", assignments"},{"question":"Alice has a sequence of n integers. She wants to transform the sequence into a good sequence. A sequence is considered good if the sum of any two adjacent elements is even. To achieve this, Alice can change any integer in the sequence to any other integer. Help Alice determine the minimum number of changes required to make the sequence good. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the sequence. Output a single integer — the minimum number of changes required to transform the given sequence into a good sequence. **Examples:** **Input:** 5 1 2 3 4 5 **Output:** 2 **Explanation:** One possible good sequence is [2, 2, 4, 4, 6]. Here we change: 1 to 2, 3 to 4, Resulting in 2 changes. **Input:** 4 2 4 6 8 **Output:** 0 **Explanation:** The sequence already satisfies the condition as 2 + 4 = 6, 4 + 6 = 10, 6 + 8 = 14 are all even. No changes are necessary.","solution":"def min_changes_to_good_sequence(n, sequence): Returns the minimum number of changes required to make the sequence good. A good sequence is one where the sum of any two adjacent elements is even. if n < 2: return 0 even_count = sum(1 for x in sequence if x % 2 == 0) odd_count = n - even_count # To make the sequence good, we need pairs of even-even or odd-odd. # The minimum changes required would be to balance the counts of even and odd numbers. return min(even_count, odd_count)"},{"question":"In the tranquil village of Pandora, there lives a special group of people known as \\"Elevators.\\" Each Elevator can move up to a certain height before needing to rest. The inhabitants often challenge each other to see who can create the longest sequence of jumps to reach a specified height. Each Elevator has a unique jumping potential, denoted by `h_i`, which indicates the maximum height they can jump per attempt. To further complicate matters, Elevators can sometimes team up, allowing themselves to be vaulted into the air through combined jumps. Given a list of Elevators with their jumping potentials and a target height `H`, your task is to determine the minimum number of jumps required to exactly reach the height `H` using the available Elevators, or determine if it\'s impossible. Each Elevators\' jumping potential can be used any number of times. # Input The first line contains two integers `n` and `H` (1 ≤ n ≤ 100, 1 ≤ H ≤ 10^6) — the number of Elevators and the target height, respectively. The second line contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 1000) — the jumping potentials of the Elevators. # Output Print the minimum number of jumps required to exactly reach the height `H`, or -1 if it is impossible. # Example Input ``` 3 17 5 6 2 ``` Output ``` 3 ``` In this example, the minimum number of jumps required to reach exactly 17 units of height is 3 (using two jumps of 6 units and one jump of 5 units). Input ``` 2 13 4 6 ``` Output ``` -1 ``` In this example, it is impossible to reach exactly 13 units of height using any combination of the given jumping potentials. # Note - You can assume each height in the jumping potentials can be used multiple times. - The challenge is essentially finding the minimum number of elements from the given set that sum up to the target value. This is akin to the classic \\"coin change problem\\" in dynamic programming.","solution":"def min_jumps_to_reach_height(n, H, jumps): Returns the minimum number of jumps required to reach exactly height H or -1 if it is impossible. # Use a large value for initialization to indicate impossible states dp = [float(\'inf\')] * (H + 1) dp[0] = 0 # base case: 0 jumps needed to reach height 0 for height in range(1, H + 1): for jump in jumps: if height >= jump: dp[height] = min(dp[height], dp[height - jump] + 1) return dp[H] if dp[H] != float(\'inf\') else -1"},{"question":"You are given a positive integer n and a sequence a consisting of n integers. A segment of this sequence is any subsequence of consecutive elements of the sequence. Your task is to find the maximum possible value of a segment *OR*, which is defined as the bitwise OR of all elements in that segment. The first line contains a single integer n (1 ≤ n ≤ 10^6). The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) - the elements of the sequence. Print a single integer — the maximum possible value of a segment OR of the given sequence. For example: Input: 5 1 2 4 8 16 Output: 31 Explanation: The segment consisting of all the elements (1, 2, 4, 8, 16) has the bitwise OR 1 | 2 | 4 | 8 | 16 = 31, which is the maximum possible value.","solution":"def max_segment_or(n, arr): Returns the maximum possible value of a segment OR of the given sequence. Parameters: n (int): The length of the sequence. arr (list of int): The sequence of integers. Returns: int: The maximum possible value of a segment OR. max_or = 0 current_or = 0 for num in arr: current_or |= num max_or = max(max_or, current_or) return max_or"},{"question":"In a kitchen, there is a cooking bowl with a capacity of n liters and a set of ingredients, each represented by a unique integer denoting their specific taste values. You need to prepare a special mixture where each ingredient adds a distinct taste value to the mixture. Given a list of ingredients, determine the maximum number of different taste values that you can mix into the bowl without exceeding its capacity. The taste value of an ingredient equals the amount it contributes to the capacity of the bowl. Input Format: - The first input line contains two integers n and m (1 le n, m le 10^5), representing the capacity of the bowl and the number of ingredients available. - The second line contains m integers t_1, t_2, ldots, t_m (1 le t_i le n), where t_i is the taste value and the amount an ingredient contributes to the mixture. Output Format: - Print a single integer denoting the maximum number of distinct ingredients you can add to the bowl without exceeding its capacity. Example: Input: ``` 10 5 2 3 4 5 6 ``` Output: ``` 3 ``` Explanation: You can choose the ingredients with taste values [2, 3, 5] to fit exactly into the bowl without exceeding its capacity. Any other combination of more than three distinct taste values will exceed the bowl\'s capacity. Thus the maximum number of distinct ingredients that can be fitted into the bowl is 3.","solution":"def max_distinct_ingredients(n, m, tastes): Determines the maximum number of different taste values that can be mixed into the bowl without exceeding its capacity. Parameters: n (int): The capacity of the bowl. m (int): The number of available ingredients. tastes (list[int]): A list of integers representing the taste values of the ingredients. Returns: int: The maximum number of distinct ingredients that can be added to the bowl without exceeding its capacity. # Sort the taste values tastes.sort() # Initialize count and total sum count = 0 total_sum = 0 # Add ingredients until the capacity is reached or exceeded for taste in tastes: if total_sum + taste <= n: total_sum += taste count += 1 else: break return count"},{"question":"You are given an array of integers and a series of operations to perform on the array. Your task is to simulate the operations and output the results accordingly. The array initially contains n integers. You are given m operations, where each operation can be one of the following: 1. Update the value at a specific index. 2. Compute the sum of elements within a specific range. The first line of the input contains two integers n (1 ≤ n ≤ 100000) and m (1 ≤ m ≤ 100000) — the number of elements in the array and the number of operations, respectively. The second line contains n space-separated integers — the initial values of the array. Each of the following m lines contains an operation in one of the following formats: - `1 i x` — update the value at index i (1-based) to x. - `2 l r` — compute and print the sum of elements from index l to index r (both 1-based inclusive). For each operation of type 2, print the result on a new line. # Input ``` 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 ``` # Output ``` 6 14 22 ``` # Explanation 1. The initial array is [1, 2, 3, 4, 5]. 2. The first operation asks to compute the sum from index 1 to index 3, which is 1+2+3 = 6. 3. The second operation updates the value at index 2 to 10, so the array becomes [1, 10, 3, 4, 5]. 4. The third operation asks to compute the sum from index 1 to index 3 again, now it is 1+10+3 = 14. 5. The fourth operation asks to compute the sum from index 2 to index 5, which is 10+3+4+5 = 22.","solution":"def simulate_operations(n, m, array, operations): results = [] for operation in operations: op_type = operation[0] if op_type == 1: _, i, x = operation array[i - 1] = x elif op_type == 2: _, l, r = operation results.append(sum(array[l - 1:r])) return results"},{"question":"In a small town, there is a unique tradition where residents align themselves in a circle during a festival celebration. Each resident holds a lantern, and the festival organizers want to make sure that the lanterns form a visually appealing pattern. The rule states that no two adjacent lanterns can have the same brightness level, and the total number of unique brightness levels should be minimal. You are given an integer N representing the number of residents. Your task is to determine the sequence of brightness levels for the lanterns such that the above rules are satisfied. If it is not possible to meet these requirements, output -1. Input: The first line contains a single integer N (2 ≤ N ≤ 10^5). Output: If a valid sequence exists, print N integers representing the brightness levels of the lanterns arranged in a circle. If a valid sequence does not exist, print -1. Example Input 1: 4 Example Output 1: 1 2 1 2 Example Input 2: 3 Example Output 2: 1 2 3","solution":"def lantern_brightness_sequence(N): Returns a sequence of brightness levels where no two adjacent lanterns have the same brightness and the total number of unique brightness levels is minimal. If it is not possible, returns -1. if N == 2: return [1, 2] elif N % 2 == 0: return [1 if i % 2 == 0 else 2 for i in range(N)] else: return list(range(1, N + 1)) # Example Usage: # Given N = 4, the output should be [1, 2, 1, 2] # Given N = 3, the output should be [1, 2, 3]"},{"question":"In a land far away, there are multi-colored gemstones scattered across a magical grid of size `n x n`. Each gemstone has a unique color, and each stone occupies a distinct cell. These gemstones hold significant power which can only be unlocked when all stones of the same color are arranged in a horizontal or vertical line. In this game, you can make two types of moves: 1. Swap two adjacent gemstones if they are in the same row or same column. 2. Rotate a 2x2 subgrid clockwise if all four cells contain gemstones. You are given the initial and target configurations of the grid. Your task is to determine the sequence of moves that transforms the initial configuration into the target configuration. The number of moves should be minimized. The first line contains a single integer `n` (2 ≤ n ≤ 50), the size of the grid. The next `n` lines contain `n` characters each, describing the initial configuration of the grid. Each character represents the color of a gemstone (an uppercase letter from \'A\' to \'Z\'). The following `n` lines contain `n` characters each, describing the target configuration of the grid in the same format and order. It is guaranteed that both configurations contain the same set of gemstones in different positions. The output should begin with a single integer `m` (0 ≤ m ≤ 10^4), the number of moves. Each of the next `m` lines should describe one move in one of the following formats: - `S x1 y1 x2 y2` for a swap move, with `(x1, y1)` and `(x2, y2)` being the positions of the gemstones to swap. - `R x y` for a rotation move, with `(x, y)` being the top-left position of the 2x2 subgrid to rotate. All positions are 1-based. If there are multiple valid sequences of moves, print any one of them. Example: **Input:** ``` 3 AAB BBC CCD ABB ABC BBC ``` **Output:** ``` 2 S 1 2 1 3 S 2 1 3 1 ``` In this example, after swapping the gemstones `(1, 2)` with `(1, 3)`, the grid becomes: ``` AAA BBC CCD ``` and then swapping `(2, 1)` with `(3, 1)`, the grid finally becomes: ``` ABB ABC BBC ``` which matches the target configuration.","solution":"def find_moves(n, initial, target): moves = [] if initial == target: return moves def swap(x1, y1, x2, y2): nonlocal initial initial[x1][y1], initial[x2][y2] = initial[x2][y2], initial[x1][y1] moves.append(f\\"S {x1+1} {y1+1} {x2+1} {y2+1}\\") def rotate(x, y): nonlocal initial initial[x][y], initial[x][y+1], initial[x+1][y+1], initial[x+1][y] = initial[x+1][y], initial[x][y], initial[x][y+1], initial[x+1][y+1] moves.append(f\\"R {x+1} {y+1}\\") for r in range(n): for c in range(n): if initial[r][c] != target[r][c]: found = False for rr in range(n): for cc in range(n): if initial[rr][cc] == target[r][c]: if rr == r and abs(cc - c) == 1: swap(r, c, rr, cc) found = True elif cc == c and abs(rr - r) == 1: swap(r, c, rr, cc) found = True elif rr == r and cc != c: if cc < c: swap(r, cc, r, c-1) swap(r, c-1, r, c) else: swap(r, cc, r, c+1) swap(r, c+1, r, c) found = True elif cc == c and rr != r: if rr < r: swap(rr, c, r-1, c) swap(r-1, c, r, c) else: swap(rr, c, r+1, c) swap(r+1, c, r, c) found = True if found: break if found: break return moves def transform_grid(n, initial, target): moves = find_moves(n, [list(row) for row in initial], [list(row) for row in target]) print(len(moves)) for move in moves: print(move)"},{"question":"In a small village, there is an enchanted garden with n magical flowers organized in a straight line. Each flower is unique and has a magic strength associated with it. The village chief has tasked you with finding the most powerful continuous segment of flowers that can be harvested from the garden. The power of a segment of flowers is defined as the sum of the magic strengths of the flowers in that segment. However, the garden also has k cursed areas along the line, each defined by a range [l, r] which represents starting and ending positions of the cursed segment (both inclusive). Any segment of flowers that includes even a single cursed flower loses all its power and should not be considered. Given the values of n, the array of magic strengths, and the cursed ranges, determine the maximum power of any valid segment of flowers. The first line of the input contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^5) — the number of flowers and the number of cursed areas, respectively. The second line contains n integers: the magic strengths of the flowers, where the i-th integer is the magic strength of the i-th flower. Each of the next k lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the starting and ending positions of the cursed segments. Output a single integer — the maximum power of any valid segment of flowers. If there are no valid segments, output 0. In the first sample, if we have n = 5 flowers with strengths [1, -2, 3, 4, -1] and no cursed areas, the maximum power segment is [3, 4], resulting in a sum of 7. If a segment [l, r] = [2, 3] is cursed, the optimal harvestable segment would be [4] resulting in a sum of 4.","solution":"def max_flower_power(n, k, strengths, cursed_ranges): if k == 0: max_current = max_global = strengths[0] for val in strengths[1:]: max_current = max(val, max_current + val) max_global = max(max_global, max_current) return max(0, max_global) cursed = [0] * (n + 1) for l, r in cursed_ranges: cursed[l - 1] += 1 if r < n: cursed[r] -= 1 current_cursed = 0 for i in range(n): current_cursed += cursed[i] cursed[i] = current_cursed max_global = current_max = 0 for i in range(n): if cursed[i] == 0: current_max += strengths[i] if current_max < 0: current_max = 0 max_global = max(max_global, current_max) else: current_max = 0 return max_global"},{"question":"A robot is on an infinite grid located at position (0, 0). The robot can move in any of the four directions (‘U’, ‘D’, ‘L’, ‘R’), which stands for up, down, left and right respectively. Each movement consists of moving one position in the respective direction. Given a string s representing a sequence of movements, find the minimum number of moves required for the robot to return to the origin. Consider the string \'UUDLDR\'. In this case, the robot\'s movements would be: - \'U\' -> (0, 1) - \'U\' -> (0, 2) - \'D\' -> (0, 1) - \'L\' -> (-1, 1) - \'D\' -> (-1, 0) - \'R\' -> (0, 0) Here, the robot returns to the origin after 6 moves. Therefore, the minimum number of moves to return to the origin in this example is 6. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the length of the string s. The second line contains the string s of length n composed of the characters ‘U’, ‘D’, ‘L’, ‘R’ representing the robot\'s movements. Print a single integer — the minimum number of moves required for the robot to return to the origin. # Input The input consists of: - An integer n (1 ≤ n ≤ 10^5) - A string s of length n consisting of characters \'U\', \'D\', \'L\', \'R\' # Output Print the minimum number of moves required for the robot to return to the origin. # Example Input ``` 6 UUDLDR ``` Output ``` 6 ``` Input ``` 8 URDLURDL ``` Output ``` 8 ``` In the first example, the robot returns to the origin after 6 moves. In the second example, the robot returns to the origin after 8 moves.","solution":"def min_moves_to_origin(n, s): Given a list of movements, returns the minimum number of moves to return the robot to the origin. up_moves = s.count(\'U\') down_moves = s.count(\'D\') left_moves = s.count(\'L\') right_moves = s.count(\'R\') vertical_moves = min(up_moves, down_moves) * 2 horizontal_moves = min(left_moves, right_moves) * 2 return vertical_moves + horizontal_moves"},{"question":"Elena loves to collect gemstones. She has a collection of n gemstones, where each gemstone has a certain weight. She wants to arrange her gemstones in a special way. She can choose any contiguous subarray of gemstones and reverse their order to obtain a more beautiful arrangement. However, she wants the resulting arrangement to be as lexicographically small as possible. Given the initial weights of the gemstones, help Elena determine the lexicographically smallest arrangement she can achieve after at most one reversal of a contiguous subarray. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of gemstones. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1,000,000) — the weights of the gemstones. Print a single line with n integers representing the lexicographically smallest arrangement Elena can obtain. In the first example, if Elena reverses the subarray [4, 3, 2], she will obtain the arrangement [1, 2, 3, 4, 5], which is the smallest possible. In the second example, if Elena reverses the subarray [3, 5, 4], she will obtain the arrangement [1, 2, 3, 4, 5], which is also the smallest possible.","solution":"def lexicographically_smallest_after_reversal(n, weights): def is_smaller(arr1, arr2): for i in range(len(arr1)): if arr1[i] < arr2[i]: return True elif arr1[i] > arr2[i]: return False return False min_arr = list(weights) for i in range(n): for j in range(i+1, n): new_arr = list(weights) new_arr[i:j+1] = reversed(new_arr[i:j+1]) if is_smaller(new_arr, min_arr): min_arr = new_arr return min_arr"},{"question":"Vlad loves graphs very much. One day, he decided to play a game with his computer. He will give the computer a connected undirected graph with n vertices and m edges, and a sequence of queries. Each query will provide two vertices u and v in the graph. For each query, the computer will have to decide whether there exists a simple path between u and v. Help Vlad to write a program that will answer these queries efficiently. Input: - The first line contains two integers n and m (1 leq n, m leq 10^5) — the number of vertices and edges in the graph respectively. - The next m lines contain two integers a and b (1 leq a, b leq n) representing an edge between vertices a and b. - The next line contains a single integer q (1 leq q leq 10^5) — the number of queries. - The following q lines contain two integers u and v (1 leq u, v leq n) representing the vertices in the query. Output: For each query, print \\"YES\\" if there exists a simple path between u and v, otherwise print \\"NO\\". Example: ``` Input: 5 5 1 2 2 3 3 4 4 5 5 1 3 1 3 2 5 4 2 Output: YES YES YES ```","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def vlad_loves_graphs(n, m, edges, q, queries): parent = list(range(n)) rank = [0] * n for u, v in edges: union(parent, rank, u - 1, v - 1) result = [] for u, v in queries: if find(parent, u - 1) == find(parent, v - 1): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Mahmoud has an array `a` consisting of `n` integers. He asked Ehab to help him create a new array `b` from `a` by performing a series of operations. In each operation, Mahmoud can choose an index `i` (1 ≤ i ≤ n) and replace the value `a[i]` with any divisor of `a[i]` that is greater than 1. Ehab wants to choose such values in array `b` so that the sum of the array `b` is maximal. Can you help Ehab find such an array `b`? An array `x` is lexicographically greater than an array `y` if there exists an index `i` such that `x_i > y_i` and `x_j = y_j` for all 1 ≤ j < i. An array `x` is equal to an array `y` if `x_i = y_i` for all 1 ≤ i ≤ n. The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in `a`. The second line contains `n` integers `a_1, a_2, ..., a_n` (2 ≤ a_i ≤ 10^9), the elements of `a`. Output `n` space-separated integers, the i-th of them representing `b_i`, where each `b_i` is chosen as a divisor of `a_i` that maximizes the sum of the array `b`. **Example:** Input: ``` 3 6 15 10 ``` Output: ``` 6 15 5 ``` Explanation: 1. For the first element, `6`: the divisors are `{2, 3, 6}`. The maximum value is `6`. 2. For the second element, `15`: the divisors are `{3, 5, 15}`. The maximum value is `15`. 3. For the third element, `10`: the divisors are `{2, 5, 10}`. The maximum value is `10`. Hence, the maximal array `b` that can be constructed by choosing divisors is `[6, 15, 10]`.","solution":"def find_optimal_b(n, a): Finds the optimal array b such that each b_i is a divisor of a_i and the sum of b is maximized. :param n: The number of elements in the array a :param a: List of integers :return: List of integers representing the optimal array b return a"},{"question":"You are hired to create a new gaming platform that allows users to play competitive games. One essential feature is a leaderboard that needs to be generated to display the ranking of users based on their scores. The scores are dynamic and can change frequently as users play more games. Your task is to write a function that will maintain and update the leaderboard efficiently. You are given an integer array `scores` which represents the scores of `n` users. Your objective is to determine the ranking for each user based on their current score. The ranking should be 1-based, where the highest score gets rank 1, the second highest gets rank 2, and so on. Users with the same score should share the same rank, and the rank for the next user should be the rank after the position of the last user with a unique rank. For example, if the scores array is `[100, 50, 50, 25]`, the ranks should be `[1, 2, 2, 4]`. The first line of the input contains one integer `n` (`1 ≤ n ≤ 100000`) — the number of users. The second line contains `n` integers `scores_1, scores_2, ..., scores_n` (`0 ≤ scores_i ≤ 1000000`), where `scores_i` is the score of the i-th user. Output a single line containing `n` integers, the ranks of the users based on their scores. # Input ``` 4 100 50 50 25 ``` # Output ``` 1 2 2 4 ```","solution":"def get_ranks(scores): Returns the 1-based rank for each user based on their score. Parameters: scores (list of int): A list of integers representing the scores of users. Returns: list of int: A list of integers representing the rank of each user. # Pair scores with original indices indexed_scores = [(score, idx) for idx, score in enumerate(scores)] # Sort by score in descending order; keep original indices indexed_scores.sort(key=lambda x: x[0], reverse=True) ranks = [0] * len(scores) current_rank = 1 for i in range(len(indexed_scores)): # If it\'s not the first score and the score is the same as the previous score, it gets the same rank if i > 0 and indexed_scores[i][0] == indexed_scores[i-1][0]: ranks[indexed_scores[i][1]] = current_rank else: current_rank = i + 1 ranks[indexed_scores[i][1]] = current_rank return ranks"},{"question":"You\'ve been given a 2-dimensional grid of size n x m where each cell contains a non-negative integer. Your task is to find the largest possible sum of an hourglass in the grid. An hourglass is a 3x3 subgrid with the following shape: ``` a b c d e f g ``` The input consists of: - The first line containing two integers, n and m (3 ≤ n, m ≤ 1000), denoting the number of rows and columns of the grid respectively. - The following n lines, each containing m space-separated integers describing the grid (0 ≤ grid[i][j] ≤ 100). Output: - A single integer, the maximum hourglass sum. Example: Input: ``` 4 4 1 1 1 0 0 1 0 0 1 1 1 0 0 0 2 4 2 1 2 0 0 3 0 0 ``` Output: ``` 8 ``` Explanation: The hourglasses in the provided grid are: ``` 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 1 1 0 0 2 4 ``` and so on. The hourglass with the maximum sum is the one that includes values (1, 1, 1, 0, 0, 4, 2, 2), producing a sum of 8.","solution":"def max_hourglass_sum(n, m, grid): max_sum = float(\'-inf\') for i in range(n - 2): for j in range(m - 2): current_sum = (grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"An online store has a loyalty program. Each new customer who registers on the site gets a unique customer ID and, upon making their first purchase, can receive a discount. The store has a buggy system: if a customer ID contains consecutive identical digits, e.g., 112 or 202, they are ineligible for any discounts. You are given a list of customer IDs as strings. Your task is to determine the number of unique customer IDs that are eligible for a discount. Input: - The first line contains an integer n (1 leq n leq 10^5) — the number of customer IDs. - The next n lines contain one customer ID per line. Each customer ID is a string of digits and each string has a length of up to 100 digits. Output: - Print one integer — the number of unique customer IDs eligible for discounts. Example: Input: ``` 5 123456 234567 112345 678910 678990 ``` Output: ``` 3 ``` Explanation: - \\"123456\\" is eligible (no consecutive identical digits) - \\"234567\\" is eligible (no consecutive identical digits) - \\"112345\\" is not eligible (consecutive identical digits \'11\') - \\"678910\\" is eligible (no consecutive identical digits) - \\"678990\\" is not eligible (consecutive identical digits \'99\') Hence, 3 unique customer IDs are eligible for discounts.","solution":"def is_eligible_for_discount(customer_id): Checks if the given customer ID is eligible for a discount. A customer ID is eligible if it does not contain consecutive identical digits. for i in range(1, len(customer_id)): if customer_id[i] == customer_id[i-1]: return False return True def count_eligible_customers(customer_ids): Returns the count of unique customer IDs that are eligible for discounts. Args: customer_ids: List of customer ID strings Returns: int: Number of unique eligible customer IDs unique_ids = set(customer_ids) count = 0 for customer_id in unique_ids: if is_eligible_for_discount(customer_id): count += 1 return count"},{"question":"Alice is learning about tree structures and wants to evaluate a simple expression tree. An expression tree is a binary tree in which each leaf node represents an operand (a numerical value) and each internal node represents an operator (+, -, *, /). Given the root of a binary expression tree, write a program to compute the value of the expression represented by the tree. A binary tree node is defined as follows: ``` class TreeNode { TreeNode left; TreeNode right; String val; TreeNode(String val) { this.val = val; this.left = this.right = null; } } ``` Your input will consist of a single expression tree, and you need to implement a function to evaluate it. The tree satisfies the following constraints: - The number of nodes in the tree is in the range [1, 1000]. - Each leaf node is a string that represents an integer, which may be negative (e.g., \\"-5\\", \\"3\\"). - Each internal node is one of the operators \\"+\\", \\"-\\", \\"*\\", or \\"/\\". Write a function to evaluate the expression tree and return the result as an integer. Function signature: ```python def evaluateExpressionTree(root: TreeNode) -> int: # Your code here ``` # Example: Consider the following example tree: ``` + / * 3 / 2 1 ``` The expression in the tree is ((2 * 1) + 3) which evaluates to 5. ```python # Example tree construction root = TreeNode(\\"+\\") root.left = TreeNode(\\"*\\") root.right = TreeNode(\\"3\\") root.left.left = TreeNode(\\"2\\") root.left.right = TreeNode(\\"1\\") print(evaluateExpressionTree(root)) # Output: 5 ```","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = self.right = None def evaluateExpressionTree(root: TreeNode) -> int: if not root: return 0 # If the node is a leaf (an operand), convert it to an integer if not root.left and not root.right: return int(root.val) # Recursively evaluate the left and right subtrees left_val = evaluateExpressionTree(root.left) right_val = evaluateExpressionTree(root.right) # Apply the operator at the current node to the values from the subtrees if root.val == \'+\': return left_val + right_val elif root.val == \'-\': return left_val - right_val elif root.val == \'*\': return left_val * right_val elif root.val == \'/\': return left_val // right_val # Assume integer division"},{"question":"You are given an array of n integers a1, a2, ..., an. You can select any subarray and apply the following operation on it: reverse the subarray. Your goal is to sort the entire array in non-decreasing order using this operation the minimum number of times. Determine the minimum number of operations required. The first line contains an integer n (1 ≤ n ≤ 2*10^5) - the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) - the elements of the array. Print a single integer - the minimum number of operations required to sort the array. In the first example, we can reverse the subarray [3, 2, 1] to get the sorted array [1, 2, 3, 4, 5]. In the second example, we first reverse the subarray [5, 4] to get [1, 2, 3, 4, 5, 6]. Then, we reverse the subarray [6, 2, 3, 1] to get [1, 2, 3, 4, 5, 6]. In the third example, the array is already sorted, so no operations are required.","solution":"def min_reversals_to_sort(n, arr): This function calculates the minimum number of subarray reversals needed to sort the array in non-decreasing order. if n <= 1: return 0 sorted_arr = sorted(arr) if arr == sorted_arr: return 0 # Find the longest subarray which is sorted longest_sorted_length = 0 start_index = 0 while start_index < n: current_length = 1 while (start_index + current_length < n and arr[start_index + current_length - 1] <= arr[start_index + current_length]): current_length += 1 if current_length > longest_sorted_length: longest_sorted_length = current_length start_index += current_length # If we can find a sorted subarray which length is half of the array or more, # we consider we can sort it by 1 reversal. if longest_sorted_length >= n // 2: return 1 # Otherwise we might need at most 2 reversals: # first reverse an unsorted part to the beginning or end to form 1 sorted subarray # then reverse the remaining unsorted part return 2"},{"question":"Alice and Bob are experimenting with strings. Alice chooses a string `s` of length `n` consisting of lowercase English letters. Bob then creates another string `t` by performing the following operation exactly once for each character in `s`: 1. Choose a character from `s` and move it to any position in `t` (including the start and end). Bob wants to make sure that the resulting string `t` is lexicographically smallest among all possible strings he can get by performing the aforementioned operations on `s`. Can you help Bob to construct the lexicographically smallest string `t`? The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the string `s`. The second line contains a string `s`, which consists of lowercase English letters. Output the lexicographically smallest string `t` that Bob can create. # Example Input 1: ``` 4 baca ``` Output 1: ``` aabc ``` Input 2: ``` 6 dbacfe ``` Output 2: ``` abcdef ```","solution":"def smallest_lexicographical_string(n, s): Given a string s of length n, returns the lexicographically smallest string t that can be formed by rearranging the characters of s. return \'\'.join(sorted(s))"},{"question":"You are given a list of n integers. You can perform the following operation exactly once: Choose an integer from the list and remove it. After performing the operation, you aim to maximize the greatest common divisor (GCD) of the remaining list of integers. Determine the maximum GCD value you can achieve after removing exactly one integer from the list. The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output a single integer — the maximum GCD achievable after removing exactly one integer from the list. Example: Input: 5 12 15 18 24 30 Output: 6 Explanation: By removing the integer 15, the remaining integers are [12, 18, 24, 30]. The GCD of these numbers is 6, which is the maximum GCD that can be achieved by removing exactly one integer from the list.","solution":"from math import gcd from functools import reduce def calculate_max_gcd(nums): Returns the maximum GCD achievable after removing exactly one integer from the list. n = len(nums) if n == 2: return max(nums) prefix_gcd = [0] * n suffix_gcd = [0] * n prefix_gcd[0] = nums[0] for i in range(1, n): prefix_gcd[i] = gcd(prefix_gcd[i-1], nums[i]) suffix_gcd[-1] = nums[-1] for i in range(n-2, -1, -1): suffix_gcd[i] = gcd(suffix_gcd[i+1], nums[i]) max_gcd = max(suffix_gcd[1], prefix_gcd[-2]) # considering removing the first or the last element for i in range(1, n-1): max_gcd = max(max_gcd, gcd(prefix_gcd[i-1], suffix_gcd[i+1])) return max_gcd"},{"question":"You are given a string consisting of characters \'a\' and \'b\' only. You can choose any substring (a contiguous subsequence) of the string and replace all the characters in this substring with any single character (\'a\' or \'b\') of your choice. Your task is to determine the minimum number of such operations required to make the entire string consist of only one distinct character. The first line contains a single integer n (1 le n leq 10^5) — the length of the string. The second line contains the string of length n consisting of characters \'a\' and \'b\' only. Print one integer — the minimum number of operations required to make the string consist of only one distinct character. For example, in the first case, you can turn the string \\"ababa\\" into \\"aaaaa\\" by choosing substrings \\"b\\", \\"b\\" and \\"b\\". The minimum number of operations is 3. In another case, if the input string is \\"aabb\\", you can turn it into \\"aaaa\\" by choosing the substring \\"bb\\" and replacing it with \'a\'. The minimum number of operations is 1. The optimal solution to this problem minimizes the number of equal-character replacements necessary to achieve a homogeneous string.","solution":"def min_operations_to_uniform_string(n, s): Returns the minimum number of operations required to make the string s of length n consist of only one distinct character. if n == 1: return 0 operations = 0 for i in range(1, n): if s[i] != s[i-1]: operations += 1 return operations"},{"question":"You have an integer array `A` of size `n` that consists of distinct positive integers. You need to perform a series of operations on the array to transform it into a new array `B` such that no two adjacent elements in `B` differ by more than a given integer `d`. Specifically, you can either leave an element in its current position or move it to another position to satisfy this condition. The single line of the input contains two integers `n` and `d` (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000) followed by `n` distinct positive integers which form the array `A`. Output a permutation of the array `A` that satisfies the condition described. If such a permutation does not exist, print `-1`. If multiple solutions are possible, print any of them. # Example Input ``` 5 3 1 5 3 8 9 ``` Output ``` 1 3 5 8 9 ``` Explanation This output permutation ensures that absolute differences between all adjacent elements are not larger than `3`.","solution":"def transform_array(n, d, A): A.sort() for i in range(1, n): if A[i] - A[i-1] > d: return -1 return A"},{"question":"Farmer John has a field with a peculiar layout. The field consists of n cells lined up in a row, with each cell having a certain height. He has decided to plant flowers in these cells, but this season he wants to experiment with special conditions. He wants to plant flowers in continuous subarrays within this row in such a way that the height of the flowers in these subarrays forms a strictly increasing sequence. Write a program to determine the maximum length of the subarray which Farmer John can choose that has strictly increasing heights. The first line contains an integer n (1 le n le 10^5) — the number of cells. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the cells. Output one integer — the maximum length of a subarray with strictly increasing height. For example, in the first example there is an array with heights [1, 5, 3, 2, 9, 4]. The longest increasing subarray here is [1, 5], with a length of 2. In the second example with heights [10, 20, 30, 40], the longest subarray is the entire array with a length of 4. In the third example with heights [5, 5, 5, 5], there are no increasing subarrays, thus the length would be 1, as any single element is considered a subarray. Example input: ``` 6 1 5 3 2 9 4 ``` Example output: ``` 2 ``` Example input: ``` 4 10 20 30 40 ``` Example output: ``` 4 ``` Example input: ``` 4 5 5 5 5 ``` Example output: ``` 1 ```","solution":"def longest_increasing_subarray_length(n, heights): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 else: current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"You are given a series of shopping events in a large mall. Each event logs a person\'s entry or exit time, and it\'s guaranteed that everyone exits on the same day they enter. The mall wants to know the maximum number of people present at any given time during the day. The input format is as follows: - The first line contains a single integer n (1 leq n leq 2 cdot 10^5), the number of events. - The following n lines each contain two integers t_i and d_i (0 leq t_i < d_i leq 10^9), denoting the entry time and exit time of the i-th person. Your task is to determine the maximum number of people present at the mall at any given time. # Input The first line contains an integer n — the number of events. Each of the next n lines contains two integers t_i and d_i — the entry and exit time of the i-th person respectively. # Output Print a single integer, the maximum number of people present at any given time. # Example Input: ``` 3 1 5 2 6 4 8 ``` Output: ``` 3 ``` Input: ``` 4 2 4 3 5 1 8 5 9 ``` Output: ``` 3 ``` # Notes: In the first example, the mall has 3 people present at time 4, which is the maximum number: - Person 1 is there from 1 to 5, - Person 2 is there from 2 to 6, - Person 3 is there from 4 to 8. In the second example, 3 people are present simultaneously from time 3 to 4.","solution":"def max_people_in_mall(events): Calculate the maximum number of people present at any given time in the mall. events: list of tuples (t_i, d_i) representing entry and exit time. returns: maximum number of people present at any time. times = [] for t, d in events: times.append((t, 1)) # +1 indicates entry times.append((d, -1)) # -1 indicates exit times.sort() # Sorting by time (in case of tie, exits first) max_people = 0 current_people = 0 for time, delta in times: current_people += delta if current_people > max_people: max_people = current_people return max_people"},{"question":"In a new social media platform, users can \\"like\\" each other\'s posts. The platform uses a scoring system to determine the influence of each user. Each \'like\' has a weight which depends on who gave the \\"like\\". This weight is determined by the influence score of the user giving the like. Given the list of users, their existing influence scores, and the list of \\"likes\\" with the weight of each \\"like\\", calculate the new influence scores for each user after all \\"likes\\" have been applied. A user\'s new influence score is the sum of their original influence score and all the weights of the \\"likes\\" they have received. The first line contains an integer n (1 leq n leq 100) — the number of users. The second line contains n integers s_1, s_2, ldots, s_n (1 leq s_i leq 1000) — the initial influence scores of the users. The third line contains an integer m (0 leq m leq 1000) — the number of \\"likes\\" given. Each of the next m lines contains two integers u and v (1 leq u, v leq n), indicating that user u has liked a post by user v. The weight of this \\"like\\" is equal to the influence score of user u before applying any new likes. Output n integers — the new influence scores of the users after all the likes have been processed. # Example Input: 4 10 20 30 40 5 1 2 2 3 3 4 4 1 4 2 Output: 50 30 50 60 # Explanation: - User 1 has an initial score of 10. - User 2 has an initial score of 20. - User 3 has an initial score of 30. - User 4 has an initial score of 40. The likes are processed as follows: 1. User 1 likes User 2, so User 2\'s score increases by 10 (User 1\'s score). 2. User 2 likes User 3, so User 3\'s score increases by 20 (User 2\'s score). 3. User 3 likes User 4, so User 4\'s score increases by 30 (User 3\'s score). 4. User 4 likes User 1, so User 1\'s score increases by 40 (User 4\'s score). 5. User 4 likes User 2, so User 2\'s score increases by another 40 (User 4\'s score). Therefore, the new scores are: - User 1: 10 + 40 = 50 - User 2: 20 + 10 + 40 = 70 - User 3: 30 + 20 = 50 - User 4: 40 + 30 = 70","solution":"def calculate_new_influence_scores(n, scores, m, likes): Calculate the new influence scores after processing the likes. Parameters: n (int): The number of users. scores (list of int): The initial influence scores of the users. m (int): The number of \\"likes\\" given. likes (list of tuples): Each tuple contains two integers u and v, indicating that user u has liked a post by user v. Returns: list of int: The new influence scores of the users. new_scores = scores[:] for u, v in likes: new_scores[v-1] += scores[u-1] return new_scores"},{"question":"During his holiday, Daniel wants to visit several cities. However, he has a peculiar travel constraint: he can only visit cities in a strict sequential manner based on their city codes. Each city has a unique code from 1 to n. Daniel prefers to start from a city with code 1, then visit the city with code 2, and so on, up to city n. Daniel has a list of city connections, where each connection is bidirectional. He can travel between any two directly connected cities. Your task is to help Daniel determine the minimum number of direct connections (flights) he needs to travel in order to visit the cities in the required sequential manner. If it is impossible for Daniel to visit the cities in the required order, return -1. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of direct connections between them, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the codes of the cities that are directly connected by a flight. Output a single integer — the minimum number of direct connections Daniel needs to visit the cities sequentially from 1 to n, or -1 if it is not possible. Example: Input: 5 6 1 2 2 3 3 4 4 5 1 3 2 4 Output: 4 In this example, Daniel can start from city 1, then take 1 flight to city 2, then another flight to city 3, then another to city 4, and finally one last flight to city 5, totaling 4 flights.","solution":"from collections import deque def minimum_flights_to_visit_sequentially(n, m, connections): graph = {i: [] for i in range(1, n+1)} for u, v in connections: graph[u].append(v) graph[v].append(u) def bfs(src, target): queue = deque([(src, 0)]) visited = set() visited.add(src) while queue: current, distance = queue.popleft() if current == target: return distance for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 total_flights = 0 for i in range(1, n): dist = bfs(i, i + 1) if dist == -1: return -1 total_flights += dist return total_flights"},{"question":"Sid loves prime numbers and has a collection of them. His collection is organized in a unique way. He picks the primes sequentially starting from the smallest prime number and arranges them in a table with n columns. Consequently, the number of rows in the table is determined by the number of primes in the collection and the given number of columns. Sid wants to know the prime number located in a specific row and column in his table. Your task is to help Sid find out the prime number located at the specified row and column in the table. The input consists of three lines: 1. The first line contains an integer ( p ) (( 1 leq p leq 10^6 )) — the number of primes in Sid\'s collection. 2. The second line contains an integer ( n ) (( 1 leq n leq 1000 )) — the number of columns in the table. 3. The third line contains two integers ( r ) and ( c ) (( 1 leq r, c leq 1000 )) — the row and column for which Sid wants to know the prime number (1-based indexing). Output the prime number located at the ( r )-th row and ( c )-th column in the table. If the specified position is out of the bounds of the table, output -1. Examples: Input: 15 5 3 2 Output: 13 Input: 10 4 3 3 Output: -1 Explanation: In the first example, Sid\'s collection of first 15 primes would be arranged as follows (5 columns): ``` 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 ``` The prime number at row 3, column 2 is 37.","solution":"import itertools def nth_prime(n): def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True primes = [] for num in itertools.count(2): if is_prime(num): primes.append(num) if len(primes) == n: break return primes def find_prime_in_table(p, n, r, c): primes = nth_prime(p) rows = (p + n - 1) // n # Calculate number of rows needed if r > rows or c > n: return -1 # Out of bounds index = (r - 1) * n + (c - 1) # Convert to 0-based index if index >= p: return -1 # Out of bounds return primes[index]"},{"question":"Polycarpus has a rectangular grid of size n x m, where each cell contains a unique integer ID. A robot is placed at the top-left corner of the grid (cell (1, 1)) and needs to reach the bottom-right corner (cell (n, m)). The robot can only move either right or down at any step. Polycarpus wants to know in how many distinct ways the robot can traverse from the top-left corner to the bottom-right corner. Since this number can be large, return it modulo (10^9 + 7). The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the dimensions of the grid. Print a single integer — the number of distinct ways the robot can traverse the grid from (1, 1) to (n, m) modulo (10^9 + 7).","solution":"def distinct_ways(n, m): MOD = 10**9 + 7 # Initialize a (n+1) x (m+1) grid with zeros dp = [[0] * (m + 1) for _ in range(n + 1)] dp[1][1] = 1 # Starting point for i in range(1, n + 1): for j in range(1, m + 1): if i == 1 and j == 1: continue dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD return dp[n][m]"},{"question":"You are given two strings **A** and **B** of the same length. Your task is to transform string **A** into string **B** by applying a series of operations. In one operation, you can either: 1. Swap any two adjacent characters in string **A**. This operation can be performed any number of times. 2. Change any single character in string **A** to any other character. This operation can be performed at most once. Your goal is to determine the minimum number of operations needed to transform string **A** into string **B**. Input: - The first line contains a single integer **t** (1 ≤ t ≤ 100) — the number of test cases. - The next **2 * t** lines contain the test cases: each test case consists of two lines. The first line contains the string **A**, and the second line contains the string **B**. Both strings are of the same length and contain only lowercase English letters. The length of each string is at most 1000. Output: - For each test case, print a single integer — the minimum number of operations needed to transform string **A** into string **B**. Example: Input: ``` 2 abc cba abcd abdc ``` Output: ``` 1 1 ``` Explanation: In the first test case, you can swap \'a\' with \'c\' to turn \\"abc\\" into \\"cab\\", and then \\"cab\\" into \\"cba\\". In the second test case, one optimal solution is to swap characters \'c\' and \'d\', achieving the string \\"abdc\\".","solution":"def min_operations_to_transform(t, test_cases): results = [] for i in range(t): A = test_cases[2 * i] B = test_cases[2 * i + 1] if A == B: results.append(0) continue # Check if \\"A\\" can be transformed into \\"B\\" just by swaps if sorted(A) == sorted(B): results.append(1) continue # If not, then one character change and several swaps will be needed results.append(2) return results # Example usage: t = 2 test_cases = [\\"abc\\", \\"cba\\", \\"abcd\\", \\"abdc\\"] print(min_operations_to_transform(t, test_cases)) # Output: [1, 1]"},{"question":"Alice loves to paint artworks with different colors. She has an endless roll of canvas divided into an infinite number of cells, numbered from 1 to positive infinity. She has a list of colors indexed from 1 to m. Initially, all cells of the canvas are uncolored. Alice performs a series of painting operations, each defined by three integers: l, r, and c. This means Alice paints all cells from l to r, inclusive, with color c. One day, Alice wonders what the longest contiguous section of the canvas, painted in a single color, is after all operations. You are given n operations. Determine the length of the longest contiguous section painted with the same color after performing all operations. The first line of input contains two integers n and m (1 leq n leq 10^5, 1 leq m leq 10^5) — the number of painting operations and the number of colors, respectively. Each of the next n lines contains three integers l, r, and c (1 leq l leq r leq 10^9, 1 leq c leq m) — the start and end of the painting range, and the color index. Output a single integer — the length of the longest contiguous section painted with the same color. **Example:** Input: ``` 4 5 1 5 1 2 8 3 5 6 1 10 15 2 ``` Output: ``` 6 ``` Explanation: The operations are as follows: 1. Paint cells [1, 5] with color 1. 2. Paint cells [2, 8] with color 3. 3. Paint cells [5, 6] with color 1. 4. Paint cells [10, 15] with color 2. The longest contiguous section painted with the same color is from cells [2, 8], painted with color 3, giving a length of 7.","solution":"def longest_contiguous_section(n, m, operations): # Dictionary to hold the intervals for each color color_intervals = {} for i in range(1, m+1): color_intervals[i] = [] # Parse each operation and store intervals in the dictionary for l, r, c in operations: color_intervals[c].append((l, r)) def merge_intervals(intervals): if not intervals: return 0 intervals.sort() merged = [] start, end = intervals[0] for i in range(1, len(intervals)): current_start, current_end = intervals[i] if current_start <= end: end = max(end, current_end) else: merged.append((start, end)) start, end = current_start, current_end merged.append((start, end)) # Find the maximum length in the merged intervals max_length = 0 for s, e in merged: max_length = max(max_length, e - s + 1) return max_length # Find the longest contiguous section for each color max_len = 0 for color in range(1, m+1): max_len = max(max_len, merge_intervals(color_intervals[color])) return max_len"},{"question":"The Kingdom of Magicland consists of a number of towns connected by bidirectional roads. Each town has a certain magical power associated with it. Two towns can either be directly connected by a road or connected through some intermediate towns. You are given the magical power of each town and the information about the roads connecting the towns. Your task is to determine the town that has the maximum magical power among all towns directly or indirectly connected to a given town. The first line contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 100000) — the number of towns and the number of roads respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100000) — the magical power of each town. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) each, representing a road connecting town u and town v. You need to answer q queries. Each query gives you a town number, and you need to find the maximum magical power among all the towns that are directly or indirectly connected to the given town. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. The next q lines contain a single integer t (1 ≤ t ≤ n) — the town number for each query. For each query, output the maximum magical power of all towns directly or indirectly connected to town t. # Example: Input: ``` 5 4 1 2 3 4 5 1 2 1 3 3 4 4 5 3 1 3 5 ``` Output: ``` 5 5 5 ``` In the example above, towns are connected as follows: - Town 1 is connected to towns 2, 3, 4, and 5. - Town 3 is connected to towns 1, 2, 4, and 5. - Town 5 is connected to towns 1, 2, 3, and 4. So for query town 1, the maximum magical power among connected towns is 5, similarly for towns 3 and 5.","solution":"def find_parent(parent, i): if parent[i] == i: return i else: parent[i] = find_parent(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def max_magical_power_towns(n, m, magical_powers, roads, queries): parent = list(range(n)) rank = [0] * n max_power = magical_powers[:] for u, v in roads: u -= 1 v -= 1 union(parent, rank, u, v) component_max_power = {} for town in range(n): root = find_parent(parent, town) if root not in component_max_power: component_max_power[root] = magical_powers[town] else: component_max_power[root] = max(component_max_power[root], magical_powers[town]) result = [] for query in queries: query -= 1 root = find_parent(parent, query) result.append(component_max_power[root]) return result"},{"question":"You are given a 2D grid representing a city map where some cells are marked as buildings (denoted by \'B\') and others are open spaces (denoted by \'.\'). A person can walk horizontally or vertically between open spaces, but cannot pass through buildings. Your task is to find the shortest path from the top-left corner of the grid (1, 1) to the bottom-right corner (n, m). If there is no such path, return -1. Given the size limitations of this problem, both the dimensions of the grid and the number of buildings could be very high. In your solution, you should aim for efficiency in both time and space. # Input The first line consists of two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the grid, respectively. The next n lines each contain a string of length m. Each string is a sequence of characters representing a row of the grid, where \'.\' represents an empty space and \'B\' represents a building. # Output Print a single integer — the length of the shortest path from (1, 1) to (n, m). If there is no path, print -1. # Examples Input ``` 5 5 ..... .BB.. .B... ..B.. ..... ``` Output ``` 8 ``` Input ``` 3 3 .B. B.B .B. ``` Output ``` -1 ``` # Note In the first example, the shortest path includes steps moving right, down, right, right, down, left, down, and right. In the second example, there\'s no way to move from the top-left to bottom-right due to the buildings blocking every possible path.","solution":"from collections import deque def shortest_path(n, m, grid): Finds the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, m) in a grid where \'.\' represents open spaces and \'B\' represents buildings. Returns the length of the shortest path if it exists, otherwise returns -1. if grid[0][0] == \'B\' or grid[n-1][m-1] == \'B\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"Ravi is developing a game that involves navigating robots through a grid. The grid is represented as an n x m matrix. Each cell in the matrix can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The robot can move up, down, left, or right, but cannot move into or through cells with obstacles. Ravi wants to find the minimum number of moves required for the robot to travel from its starting position to the target position. If it is not possible for the robot to reach the target, return -1. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The following n lines contain m characters each, representing the grid. The character \'S\' denotes the starting position of the robot, \'T\' denotes the target position, \'.\' denotes an empty cell, and \'#\' denotes an obstacle. It is guaranteed that there is exactly one \'S\' and one \'T\' in the grid. Output a single integer — the minimum number of moves required for the robot to travel from its starting position to the target position, or -1 if it is not possible. Example: Input: 5 5 ..... ..#.. ..S.. ..#.. ..T.. Output: 4 In this example, the robot must navigate around the obstacle to reach the target in 4 moves. The path is S -> (3,3) -> (2,3) -> (1,3) -> (1,4) -> T.","solution":"from collections import deque def min_moves_to_target(n, m, grid): def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: yield (nx, ny) # Find the starting and target positions start = target = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) # If either start or target is not found, return -1 if not start or not target: return -1 # BFS setup q = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while q: x, y, dist = q.popleft() # If we reached the target if (x, y) == target: return dist # Explore neighbors for nx, ny in get_neighbors(x, y): if grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) q.append((nx, ny, dist + 1)) # if target is unreachable return -1"},{"question":"You are given a positive integer number n, and your task is to determine if it is possible to split the integer into at least two positive integer summands such that all the summands are distinct and their sum is equal to n. If it is possible, print \\"YES\\" followed by the summands in any order on the next line. If it is not possible, print \\"NO\\". Your solution should be efficient enough to handle values of n up to 10^9. Input: - A single integer n (2 ≤ n ≤ 10^9). Output: - If it is possible, print \\"YES\\" on the first line. On the second line, print the summands in any order. - If it is not possible, print \\"NO\\". Example: Input: 23 Output: YES 1 2 3 4 5 8","solution":"def split_into_distinct_summands(n): Determines if it is possible to split the integer n into at least two positive integer summands such that all the summands are distinct and their sum is equal to n. Returns: YES, followed by the summands if possible, otherwise returns NO. summands = [] current_sum = 0 current_number = 1 while current_sum + current_number <= n: summands.append(current_number) current_sum += current_number current_number += 1 # Remove the last element and adjust the last element to include the remaining difference if current_sum < n: summands[-1] += (n - current_sum) if len(summands) >= 2: return \\"YES\\", summands else: return \\"NO\\", [] def format_result(result): if result[0] == \\"YES\\": return f\\"{result[0]}n{\' \'.join(map(str, result[1]))}\\" else: return result[0]"},{"question":"A string s is given, and you need to determine the length of the longest subsequence that is a palindrome. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line of the input contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a string s (1 leq |s| leq 1000) consisting only of lowercase English letters. For each test case, output a single integer — the length of the longest palindromic subsequence in the string. Example: Input: ``` 2 bbbab cbbd ``` Output: ``` 4 2 ``` Explanation: In the first sample, one of the longest palindromic subsequences is \\"bbbb\\", which has a length of 4. In the second sample, one of the longest palindromic subsequences is \\"bb\\", which has a length of 2.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) # Create a dp array to store the length of the longest palindromic subsequence. dp = [[0] * n for _ in range(n)] # Subsequences of length 1 are palindromes of length 1. for i in range(n): dp[i][i] = 1 # Build the dp array from shorter subsequences to longer ones. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def handle_cases(t, cases): results = [] for s in cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"Alex is a software engineer who is working with nested comments in a text file. These nested comments follow a specific structure: a comment starts with `/*` and ends with `*/`. Comments can be nested arbitrarily deep, but Alex needs to determine whether the comment structure of a given file is correctly nested, and if so, the maximum depth of nesting. For example, in the text `\\"/* /* nested */ end */\\"`, the maximum depth of nesting is `2`. In the text `\\"/* /* nested /* deeper */ still nested */ end */\\"`, the maximum depth is `3`. If the text contains mismatched or unclosed comment delimiters, it is considered invalid. Write a function that, given a string representing the contents of the file, determines if the nesting is valid and if so, returns the maximum depth of nested comments. If the nesting is invalid, the function should return `-1`. The input string may be up to `10^6` characters long. **Input:** - A single string `s` represents the contents of the file. **Output:** - Return the integer representing the maximum depth of nesting if the comment structure is valid, otherwise return `-1`. **Examples:** 1. Input: `\\"/* /* nested */ end */\\"` Output: `2` 2. Input: `\\"/* /* nested /* deeper */ still nested */ end */\\"` Output: `3` 3. Input: `\\"/* unclosed comment /* nested */\\"` Output: `-1` 4. Input: `\\"no comment in this text\\"` Output: `0`","solution":"def max_nesting_depth(s): Determines if the comment structure is valid and if so, returns the maximum depth of nested comments. If the nesting is invalid, returns -1. :param s: A string representing the contents of the file. :return: The maximum depth of nested comments or -1 if the nesting is invalid. max_depth = 0 current_depth = 0 i = 0 n = len(s) while i < n: if s[i:i+2] == \\"/*\\": current_depth += 1 max_depth = max(max_depth, current_depth) i += 2 elif s[i:i+2] == \\"*/\\": if current_depth == 0: return -1 current_depth -= 1 i += 2 else: i += 1 return max_depth if current_depth == 0 else -1"},{"question":"Tom is fascinated with binary trees and recursion. He recently learned about a unique integer sequence named the “Magical Sequence.” The sequence is defined in such a way that every element depends on the previous elements with a special rule: Given two integers n and m, the sequence is generated as follows: 1. If n is 1, then the first element of the sequence is 1. 2. For n > 1: - f(1) = 1 - f(2) = 1 - f(k) = (f(k-1) + f(k-2)) % m for k > 2 Your task is to provide Tom with the first n elements of this sequence. # Input The input consists of two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9). # Output Output the first n elements of the sequence, each separated by a space. # Example Input ``` 10 100 ``` Output ``` 1 1 2 3 5 8 13 21 34 55 ``` # Note In the given example, the first 10 elements of the Magical Sequence with modulus 100 are: 1, 1, 2, 3, 5, 8, 13, 21, 34, and 55.","solution":"def magical_sequence(n, m): Generate the first n elements of the Magical Sequence with modulus m. if n == 1: return [1] sequence = [1, 1] for i in range(2, n): next_value = (sequence[i-1] + sequence[i-2]) % m sequence.append(next_value) return sequence"},{"question":"A famous maze game consists of an n x n grid where each cell may either be empty or contain an obstacle. The player starts at the top-left corner (1, 1) and aims to reach the bottom-right corner (n, n). Each time the player can move one cell up, down, left, or right, but cannot move into a cell with an obstacle or outside the grid boundaries. You need to determine the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is impossible to reach the destination, return -1. The first line contains an integer n (1 ≤ n ≤ 500). The following n lines contain n characters each, representing the grid. An empty cell is represented by \'.\', and an obstacle is represented by \'#\'. Output a single integer representing the minimum number of moves required to reach the destination or -1 if it is unreachable. Example: Input 5 ..... .#. ..#.. .#. ..... Output 8","solution":"from collections import deque def minimum_moves(n, grid): Finds the minimum number of moves to reach from the top-left corner (1,1) to the bottom-right corner (n,n) in an n x n grid. :param n: Integer, grid size :param grid: List of strings, grid representation :return: Integer, minimum number of moves or -1 if unreachable directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given an undirected graph with n vertices and m edges, you need to determine the number of simple paths of length exactly k. A simple path is a path that does not repeat any vertices. Input: - The first line contains three integers n (1 le n le 100), m (0 le m le 1000), and k (1 le k le 10) — the number of vertices, edges, and the required path length, respectively. - Each of the next m lines contains two integers u and v (1 le u, v le n, u ne v) denoting an undirected edge between vertices u and v. Output: - Print a single integer representing the number of simple paths of length exactly k. Example: Input: ``` 4 4 2 1 2 2 3 3 4 4 1 ``` Output: ``` 4 ``` Explanation: The graph described is a cycle with vertices 1-2-3-4-1. The simple paths of length exactly 2 are: - 1-2-3 - 2-3-4 - 3-4-1 - 4-1-2","solution":"def count_simple_paths_of_length_k(n, m, k, edges): from collections import defaultdict def dfs(node, depth, visited): if depth == k: return 1 visited.add(node) path_count = 0 for neighbor in graph[node]: if neighbor not in visited: path_count += dfs(neighbor, depth + 1, visited) visited.remove(node) return path_count graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) total_paths = 0 for start_node in range(1, n + 1): total_paths += dfs(start_node, 0, set()) return total_paths // 2 # Each path is counted twice, once in each direction # Example Usage: # n, m, k = 4, 4, 2 # edges = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(count_simple_paths_of_length_k(n, m, k, edges))"},{"question":"Ivan lives in a city with n streets, numbered 1 through n. Each street can be in one of two states: either \\"clean\\" or \\"dirty\\". Ivan has a habit of jogging every morning and, for health reasons, prefers jogging on clean streets only. He either starts from street 1 and jogs to street n, or from street n and jogs to street 1. Due to time constraints, he can only jog along k consecutive streets. Ivan wants to determine the maximum number of clean streets he can include in his jogging route if he starts either from street 1 or from street n and chooses any k consecutive streets to jog through. You are given an integer n (1 ≤ n ≤ 100) denoting the number of streets and an integer k (1 ≤ k ≤ n) denoting the number of consecutive streets Ivan can jog through. The next line contains a string of length n, consisting of characters \'C\' and \'D\' only. \'C\' denotes a clean street and \'D\' denotes a dirty street. Print a single integer — the maximum number of clean streets Ivan can include in his jogging route. For example: Input: 7 3 CCCDCDC Output: 3 Explanation: - If he starts from street 1, the possible jogging routes of length 3 are: [1, 2, 3], [2, 3, 4], and [3, 4, 5] which results in 3, 2, and 1 clean streets respectively. - If he starts from street 7, the possible jogging routes of length 3 are: [7, 6, 5] and [6, 5, 4] which result in 2 and 1 clean streets respectively. - The maximum number of clean streets in any k consecutive streets is 3.","solution":"def max_clean_streets(n, k, street_conditions): Determines the maximum number of clean streets in any k consecutive streets. Args: n: int, the number of streets k: int, the number of consecutive streets Ivan can jog through street_conditions: str, the string denoting the conditions of the streets (\'C\' for clean, \'D\' for dirty) Returns: int, the maximum number of clean streets Ivan can include in his jogging route max_clean = 0 # Calculate the number of clean streets in the first k streets current_clean_count = street_conditions[:k].count(\'C\') max_clean = current_clean_count # Slide the window from the 1st to the (n-k+1)th street for i in range(1, n - k + 1): if street_conditions[i - 1] == \'C\': current_clean_count -= 1 if street_conditions[i + k - 1] == \'C\': current_clean_count += 1 max_clean = max(max_clean, current_clean_count) return max_clean"},{"question":"Given a rectangular grid of size `n x m`, each cell of the grid contains a positive integer value representing the elevation at that point. You are located at the top-left cell of the grid, and your goal is to move to the bottom-right cell. From any cell `(i, j)`, you can move to the adjacent cells `(i+1, j)` or `(i, j+1)`, provided the new cell has the same elevation or a higher elevation than the current cell. Write a function that determines if it is possible to reach the bottom-right cell from the top-left cell under the given movement constraints. The input consists of: - An integer `n` (1 ≤ n ≤ 500) representing the number of rows in the grid. - An integer `m` (1 ≤ m ≤ 500) representing the number of columns in the grid. - An `n x m` matrix of integers representing the elevation values. Your function should print \\"YES\\" if it is possible to reach the bottom-right cell, otherwise print \\"NO\\". # Input ``` n m e11 e12 e13 ... e1m e21 e22 e23 ... e2m . . . en1 en2 en3 ... enm ``` # Output ``` YES or NO ``` # Example Input ``` 3 3 1 2 3 2 3 4 3 4 5 ``` Output ``` YES ``` # Explanation - You can move from the top-left to the bottom-right following the path: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). Input ``` 3 3 3 2 1 2 3 4 3 4 5 ``` Output ``` NO ``` # Explanation - It is not possible to move from the top-left to the bottom-right as you cannot move from a higher elevation to a lower elevation.","solution":"def can_reach_bottom_right(n, m, grid): Returns \\"YES\\" if it\'s possible to reach the bottom-right cell from the top-left cell, otherwise returns \\"NO\\". if n == 1 and m == 1: return \\"YES\\" from collections import deque # Directions: right and down directions = [(0, 1), (1, 0)] # BFS queue initialization queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we reached the bottom-right cell if x == n-1 and y == m-1: return \\"YES\\" # Explore adjacent cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if grid[nx][ny] >= grid[x][y]: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Polycarpus is organizing a programming competition and as part of the competition setting, he has prepared a list of problems and determined the difficulties of each problem. He wants to create several teams of equal sizes, such that the variability in the skill level of problems each team gets is minimized. You are given a list of integers representing the difficulties of the problems, and an integer k, representing the number of teams. Your task is to distribute the problems among the k teams so that the maximum difference in problem difficulties (i.e., the variability in skill levels) between any two teams is minimized. Each team should get approximately the same number of problems, which means the number of problems assigned to any team can differ by at most one. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of problems and the number of teams. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the difficulties of the problems. Output k lines: each line should contain the difficulties of the problems assigned to one team. Each problem difficulty should appear exactly once across all teams. The number of problems assigned to each team can differ by at most one. If there are multiple distributions that minimize the maximum difference in problem difficulties between any two teams, you can choose any valid distribution. # Example Input: ``` 7 3 4 8 6 3 2 7 5 ``` Output: ``` 2 3 8 4 5 6 7 ``` In this example, one way to distribute the problems as described could be [2, 3, 8], [4, 5], and [6, 7]. This distribution ensures that the teams have as balanced a skill level as possible within the constraints.","solution":"def distribute_problems(n, k, difficulties): difficulties.sort() # Determine size constraints base_size = n // k remainder = n % k index = 0 teams = [] for i in range(k): if i < remainder: # Create a team with base_size + 1 problems teams.append(difficulties[index:index + base_size + 1]) index += base_size + 1 else: # Create a team with base_size problems teams.append(difficulties[index:index + base_size]) index += base_size return teams # Example usage for clarity (not part of the solution code): # n, k = 7, 3 # difficulties = [4, 8, 6, 3, 2, 7, 5] # teams = distribute_problems(n, k, difficulties) # for team in teams: # print(\\" \\".join(map(str, team)))"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game involves removing elements from either end of the sequence. Alice starts the game and they take turns alternately. In each turn, a player can choose to remove either the first or the last element of the remaining sequence. The player\'s goal is to maximize the sum of the elements they have removed. Both players play optimally. Given the sequence of integers, determine the maximum possible sum of elements Alice can obtain. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. The output should be a single integer — the maximum sum of elements Alice can obtain. **Example:** Input: 6 4 7 2 9 5 2 Output: 18 Explanation: Alice removes the element 4 at the start. Then the sequence becomes [7, 2, 9, 5, 2]. Bob then removes the element 2 at the end. The sequence becomes [7, 2, 9, 5]. Alice removes the element 9 at the end. The sequence becomes [7, 2, 5]. Bob removes the element 5 at the end. The sequence becomes [7, 2]. Alice removes the element 7 at the start. The sequence becomes [2]. Bob removes the element 2 at the start. There are no more elements to remove. Thus, the sum of elements removed by Alice is 4 + 9 + 7 = 20. This is the maximum sum Alice can get.","solution":"def max_sum_alice_can_get(sequence): n = len(sequence) dp = [[0] * n for _ in range(n)] for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if length == 1: dp[i][j] = sequence[i] else: take_left = sequence[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0) take_right = sequence[j] + min(dp[i][j - 2] if i <= j - 2 else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0) dp[i][j] = max(take_left, take_right) return dp[0][n - 1] # Example Input n = 6 sequence = [4, 7, 2, 9, 5, 2] print(max_sum_alice_can_get(sequence)) # Output: 18"},{"question":"You are given an array of intervals where intervals[i] = [starti, endi] represents the start and the end of the i-th interval. Your task is to merge all overlapping intervals and return a new array of the merged intervals. Two intervals [a, b] and [c, d] overlap if and only if b ≥ c and a ≤ d. For example, if the input array is [[1,3],[2,6],[8,10],[15,18]], then the output should be [[1,6],[8,10],[15,18]]. The first line of input contains an integer n (1 ≤ n ≤ 10^4) – the number of intervals. The next n lines contain two integers starti and endi (0 ≤ starti ≤ endi ≤ 10^4). Print the merged intervals in the same format as the input, each interval on a new line. If there are multiple ways to merge the intervals, choose any one. For example: Input: 4 1 3 2 6 8 10 15 18 Output: 1 6 8 10 15 18","solution":"def merge_intervals(intervals): Merges overlapping intervals. :param intervals: List of intervals represented as [start, end]. :return: List of merged intervals. if not intervals: return [] # Sort the intervals based on the starting time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or if the current interval does not overlap with the previous if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is an overlap, so we merge the current interval with the previous one merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Tim\'s favorite hobby is playing with number sequences. Recently, he came across an interesting problem. He discovered that for any given positive integer n, if you keep adding the digits of n until the number is reduced to a single digit, the result is always the same regardless of the initial value of n. This result is known as the digital root of n. The digital root of a non-negative integer n is defined as: - dr(n) = 0 if n = 0, - dr(n) = 1 + (n - 1) % 9 if n > 0. Given a list of integers, Tim wants to find the digital root of each integer and determine the sum of these digital roots. Write a function that takes an integer array as input and returns the sum of the digital roots of the array elements. # Input: - The first line contains an integer t (1 leq t leq 100), the number of test cases. - The first line of each test case contains an integer k (1 leq k leq 1000), the number of elements in the array. - The next line contains k space-separated integers denoting the elements of the array. Each integer can be any number from 0 to 10^9. # Output: For each test case, output a single integer that is the sum of the digital roots of the elements of the array. # Example: **Input:** ``` 2 5 16 7 28 123 45 3 9 81 100 ``` **Output:** ``` 18 18 ``` # Explanation: For the first test case, the digital roots are: 7, 7, 1, 6, 9 (7+7+1+6+9 = 30). For the second test case, the digital roots are: 9, 9, 1 (9+9+1 = 19).","solution":"def digital_root(n): if n == 0: return 0 else: return 1 + (n - 1) % 9 def sum_of_digital_roots(test_cases): results = [] for case in test_cases: k, array = case sum_dr = sum(digital_root(num) for num in array) results.append(sum_dr) return results # Helper function to handle input and output def process_input_output(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): k = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((k, array)) index += 2 return sum_of_digital_roots(test_cases)"},{"question":"You are given a list of integers representing the positions of screws on a 1-dimensional line. Each screw is either pointing up (denoted by 1) or pointing down (denoted by -1). Bob the mechanic can flip the orientation of any screw, which changes its value from 1 to -1 or from -1 to 1. Bob\'s goal is to make all the screws point in the same direction with the minimum number of flips. Write a function that calculates the minimum number of flips required to make all the screws point in the same direction. If there are multiple solutions, you only need to provide one. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of screws. - The second line contains n space-separated integers a1, a2, ..., an (each ai is either 1 or -1) — the initial orientations of the screws. **Output:** - Output a single integer — the minimum number of flips required. **Example:** ``` Input: 5 1 -1 1 -1 1 Output: 2 ``` In this example, flipping the second and fourth screws will make all screws point up. **Constraints:** - The number of screws is at least 1 and at most 100,000. - Each screw is initially oriented either up (1) or down (-1). - The minimum number of flips must be calculated and displayed.","solution":"def min_flips_to_same_direction(n, screws): Returns the minimum number of flips required to make all screws point in the same direction. Args: n : int : number of screws screws : list of int : orientations of the screws (1 for up and -1 for down) Returns: int : minimum number of flips count_up = screws.count(1) count_down = n - count_up return min(count_up, count_down)"},{"question":"You are given a matrix with n rows and m columns where each cell contains a positive integer. Your task is to calculate the maximum sum of any submatrix that fits within the confines of the given matrix. Formally, a submatrix is a rectangular region of the matrix specified by two pairs of coordinates ((r1, c1)) and ((r2, c2)), where (1 leq r1 leq r2 leq n) and (1 leq c1 leq c2 leq m). The input consists of multiple test cases. The first line of input contains a single integer T (1 ≤ T ≤ 10), the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the matrix. The next n lines each contain m space-separated integers representing the entries of the matrix where each integer is at least 1 and at most 1000. For each test case, output a single line containing the maximum sum of any submatrix. **Input:** ``` T n m matrix[0][0] matrix[0][1] ... matrix[0][m-1] matrix[1][0] matrix[1][1] ... matrix[1][m-1] ... matrix[n-1][0] matrix[n-1][1] ... matrix[n-1][m-1] ... (repeat for T test cases) ``` **Output:** ``` max_sum ``` **Example:** Input: ``` 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 3 4 ``` Output: ``` 45 10 ``` In the first test case, the maximum sum is obtained by considering the entire matrix, which is (1+2+3+4+5+6+7+8+9 = 45). In the second test case, the maximum sum is obtained by considering the entire matrix, which is (1+2+3+4 = 10).","solution":"def max_sum_submatrix(T, test_cases): results = [] for t in range(T): n, m = test_cases[t][0] matrix = test_cases[t][1] # Step 1: Create the auxiliary sum matrix sum_matrix = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): sum_matrix[i][j] = matrix[i-1][j-1] + sum_matrix[i-1][j] + sum_matrix[i][j-1] - sum_matrix[i-1][j-1] max_sum = float(\'-inf\') # Step 2: Calculate the maximum sum submatrix for r1 in range(1, n + 1): for r2 in range(r1, n + 1): for c1 in range(1, m + 1): for c2 in range(c1, m + 1): submatrix_sum = (sum_matrix[r2][c2] - sum_matrix[r1-1][c2] - sum_matrix[r2][c1-1] + sum_matrix[r1-1][c1-1]) max_sum = max(max_sum, submatrix_sum) results.append(max_sum) return results"},{"question":"Roy is an avid reader and a game enthusiast. He loves solving puzzles and one of his favorite pastimes is playing with letter grids. He has an n x n grid filled with lowercase letters and he loves finding and marking the longest contiguous sequence of the same letter. The sequence can be formed in any of the four directions: horizontally, vertically, or diagonally (both major and minor). Given an n x n grid of lowercase letters, help Roy find the length of the longest contiguous sequence of the same letter. # Input - The first line contains the integer n (1 ≤ n ≤ 50), the size of the grid. - The next n lines contain n lowercase letters each, representing the grid. # Output - Print a single integer representing the length of the longest contiguous sequence of the same letter. # Example Input ``` 4 aaba aaca abaa aaaa ``` Output ``` 4 ``` In this example, Roy can find the sequence of 4 \'a\'s diagonally (from (1,4) to (4,1)). Therefore, the output is 4. # Note - In case of multiple sequences having the maximum length, any one can be considered. - The directions you need to consider for forming sequences are: - Horizontal: left to right - Vertical: top to bottom - Diagonal: from top-left to bottom-right - Anti-diagonal: from top-right to bottom-left","solution":"def longest_contiguous_sequence(n, grid): def check_max_length(x, y, dx, dy, letter): length = 0 max_length = 0 for i in range(n): nx = x + i * dx ny = y + i * dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == letter: length += 1 max_length = max(max_length, length) else: length = 0 return max_length max_sequence = 0 for i in range(n): for j in range(n): current_letter = grid[i][j] # check horizontally max_sequence = max(max_sequence, check_max_length(i, j, 0, 1, current_letter)) # check vertically max_sequence = max(max_sequence, check_max_length(i, j, 1, 0, current_letter)) # check diagonally max_sequence = max(max_sequence, check_max_length(i, j, 1, 1, current_letter)) # check anti-diagonally max_sequence = max(max_sequence, check_max_length(i, j, 1, -1, current_letter)) return max_sequence"},{"question":"In the kingdom of ByteLand, there are **n** cities. These cities are connected by **n-1** two-way roads such that there is exactly one path between any pair of cities. The inhabitants of ByteLand are friendly and often like to visit each other. You are tasked with building an efficient transportation system that minimizes the travel time for its citizens. To do so, we need to identify the two cities that are the furthest apart in terms of travel time and establish a special high-speed route between them. Given the roads connecting the cities and the travel time of each road, determine the maximum travel time between any two cities in ByteLand. This travel time represents the longest path between any two cities in the tree structure of ByteLand. # Input The first line of input contains an integer **t** (1 le t le 100) denoting the number of test cases. Each test case consists of the following: - The first line contains a single integer **n** (2 le n le 10^5) denoting the number of cities. - The next **n-1** lines each contain three space-separated integers **u**, **v**, and **w** (1 le u, v le n, 1 le w le 10^5), indicating a road between city **u** and city **v** with travel time **w**. It is guaranteed that the sum of **n** across all test cases does not exceed **10^6**. # Output For each test case, output a single integer: the maximum travel time between any two cities in ByteLand. # Example Input ``` 2 4 1 2 4 1 3 2 3 4 3 3 1 2 5 2 3 7 ``` Output ``` 9 12 ``` # Explanation For the first test case: - The cities are connected as follows: - (1 - 2 with time 4) - (1 - 3 with time 2) - (3 - 4 with time 3) - The longest path is from city 2 to city 4, with travel time 9 (4 + 2 + 3). For the second test case: - The cities are connected as follows: - (1 - 2 with time 5) - (2 - 3 with time 7) - The longest path is from city 1 to city 3, with travel time 12 (5 + 7).","solution":"import sys from collections import defaultdict, deque def find_farthest_city_and_distance(n, graph, start_city): Find the farthest city and its distance from the start_city using BFS. visited = [False] * (n + 1) queue = deque([(start_city, 0)]) visited[start_city] = True farthest_city = start_city max_distance = 0 while queue: current_city, current_distance = queue.popleft() for neighbor, travel_time in graph[current_city]: if not visited[neighbor]: visited[neighbor] = True distance = current_distance + travel_time queue.append((neighbor, distance)) if distance > max_distance: max_distance = distance farthest_city = neighbor return farthest_city, max_distance def max_travel_time(t, test_cases): results = [] for tc in test_cases: n, roads = tc graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Find the farthest city from an arbitrary city (e.g., city 1) farthest_city, _ = find_farthest_city_and_distance(n, graph, 1) # Find the farthest city from the farthest_city found (which will give the tree diameter) _, max_distance = find_farthest_city_and_distance(n, graph, farthest_city) results.append(max_distance) return results def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) roads = [] for i in range(n-1): u, v, w = map(int, lines[index + 1 + i].split()) roads.append((u, v, w)) test_cases.append((n, roads)) index += n return t, test_cases def main(input_data): t, test_cases = process_input(input_data) results = max_travel_time(t, test_cases) for res in results: print(res)"},{"question":"You are given a list of n integers. You need to create a sequence of the same length where each element is replaced by the number of elements in the original list that are greater than or equal to this element. For example, if the input list is [4, 2, 7, 1], the output should be [2, 3, 1, 4] because: - 4 has 2 elements that are >= 4 (4 and 7) - 2 has 3 elements that are >= 2 (4, 2, and 7) - 7 has 1 elements that are >= 7 (7) - 1 has 4 elements that are >= 1 (4, 2, 7, and 1) The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n space-separated integers — the elements of the list (1 ≤ ai ≤ 100). Print the sequence of integers where each element represents the count of elements greater than or equal to the corresponding element in the original list. Example: Input: 4 4 2 7 1 Output: 2 3 1 4","solution":"def count_greater_equal_elements(n, elements): Given a list of n integers, returns a list where each element is replaced by the number of elements in the original list that are greater than or equal to this element. :param n: Number of integers in the list. :param elements: List of integers. result = [] for element in elements: count = sum(1 for x in elements if x >= element) result.append(count) return result # Example usage: # n = 4 # elements = [4, 2, 7, 1] # print(count_greater_equal_elements(n, elements)) # Output: [2, 3, 1, 4]"},{"question":"A team of astronauts is planning to land on planet \\"Zog\\" which is known to have sporadic and unpredictable seismic activity. The ground on Zog is represented as a 1D segment of length l (from 0 to l). Certain regions within this segment are affected by seismic waves, which must be avoided for a safe landing. You are tasked with determining if it is possible to find a spot on the segment where the astronauts can safely land the capsule. The segment is divided into multiple intervals, some of which are marked as \\"unsafe\\". The intervals are provided to you in a list where each interval includes its start and end points. **Constraints**: - The length of the segment of Zog, l (1 ≤ l ≤ 10^6). - The number of unsafe intervals, n (0 ≤ n ≤ 10^5). - Each unsafe interval is represented by two integers a_i and b_i (0 ≤ a_i < b_i ≤ l). **Input**: - The first line contains two integers l and n, representing the length of the segment and the number of unsafe intervals. - The next n lines each contain two integers a_i and b_i, representing the start and end points of the unsafe interval [a_i, b_i). **Output**: - Print \\"YES\\" if there is at least one point on the segment where the astronauts can land safely, otherwise, print \\"NO\\". # Example **Input** ``` 10 3 1 4 5 8 2 3 ``` **Output** ``` YES ``` **Explanation** The intervals [1, 4), [5, 8), and [2, 3) combine to cover positions 1 through 7 on the segment. This leaves positions 0 and 9 as safe landing options, hence the answer is \\"YES\\".","solution":"def is_safe_landing_possible(l, intervals): if not intervals: return \\"YES\\" # Combine intervals and sort them intervals.sort() merged_intervals = [] current_start, current_end = intervals[0] for i in range(1, len(intervals)): interval_start, interval_end = intervals[i] if interval_start <= current_end: current_end = max(current_end, interval_end) else: merged_intervals.append((current_start, current_end)) current_start = interval_start current_end = interval_end merged_intervals.append((current_start, current_end)) # Check for a gap before the first interval or after the last interval if merged_intervals[0][0] > 0 or merged_intervals[-1][1] < l: return \\"YES\\" # Check for a gap between merged intervals for i in range(1, len(merged_intervals)): if merged_intervals[i][0] > merged_intervals[i - 1][1]: return \\"YES\\" return \\"NO\\""},{"question":"You have been tasked with upgrading a simple acceptance test system for a university. The system maintains an array of student IDs, and it supports the following operations: 1. ADD x: Add the student ID `x` to the array. 2. REMOVE x: Remove the student ID `x` from the array. 3. COUNT y: Count the number of times the student ID `y` appears in the array. The operations are provided in a list of commands, where the first line contains a single integer `m` (1 ≤ m ≤ 100,000) representing the number of operations. Each of the next `m` lines contains a command. For each COUNT operation, output the count of the student ID `y`. The input format is as follows: ``` m command1 command2 ... commandm ``` For example, let the input be: ``` 6 ADD 123 ADD 456 COUNT 123 REMOVE 123 ADD 123 COUNT 123 ``` The output should be: ``` 1 1 ``` Implement this system to handle up to 100,000 operations efficiently.","solution":"def process_commands(commands): Process a list of commands for managing student IDs. Parameters: - commands (list of str): List of commands to process. Returns: - list of int: Results of COUNT commands. student_ids = [] results = [] for command in commands: parts = command.split() operation = parts[0] value = int(parts[1]) if operation == \\"ADD\\": student_ids.append(value) elif operation == \\"REMOVE\\": if value in student_ids: student_ids.remove(value) elif operation == \\"COUNT\\": results.append(student_ids.count(value)) return results"},{"question":"John has a number of friends and wants to invite them to a party. He knows that a party is fun if there are no two friends who dislike each other. John has a list of n friends, each represented by an integer from 1 to n. There is also a list of pairs of integers, each pair representing two friends who dislike each other. John wants to know the largest number of friends he can invite to the party so that there are no two friends who dislike each other. The input includes: - The number of friends n (1 leq n leq 10^5). - The number of pairs m (0 leq m leq 10^5) representing pairs of friends who dislike each other. - m lines, each containing two integers a and b (1 leq a, b leq n), indicating that friend a and friend b dislike each other. Output a single integer, the largest number of friends that can be invited to the party such that no two of them dislike each other. # Example **Input:** ``` 5 3 1 2 2 3 3 4 ``` **Output:** ``` 3 ``` **Explanation:** John can invite friends {1, 3, 5}, which is the largest set of friends where none dislike each other. # Notes 1. The objective is to form a maximal subset of the friends in which there is no pair of friends who dislike each other. 2. This problem can be approached by constructing a graph where nodes represent friends and edges represent enmity; the solution involves finding the maximum independent set in this graph.","solution":"def max_friends_invited(n, m, dislikes): from collections import defaultdict, deque adj_list = defaultdict(list) for a, b in dislikes: adj_list[a].append(b) adj_list[b].append(a) color = {} def bfs(start): queue = deque([(start, 0)]) while queue: node, col = queue.popleft() if node in color: if color[node] != col: return False else: color[node] = col for neighbor in adj_list[node]: queue.append((neighbor, col ^ 1)) return True for i in range(1, n + 1): if i not in color: if not bfs(i): return 0 count1 = sum(col == 0 for col in color.values()) count2 = sum(col == 1 for col in color.values()) return max(count1, count2) # Example usage: # n = 5, m = 3, dislikes = [(1, 2), (2, 3), (3, 4)] # Output should be 3 print(max_friends_invited(5, 3, [(1, 2), (2, 3), (3, 4)]))"},{"question":"You are given a sequence of integers and a window size k. Your task is to find the maximum of each sliding window of size k. For example, if the array is [1,3,-1,-3,5,3,6,7] and k is 3, you need to output [3,3,5,5,6,7]. # Input: - The first line of input will contain two integers n and k (1 <= k <= n <= 10^5) where n is the size of the array. - The second line will contain n integers a_1, a_2, ..., a_n separated by spaces where each a_i (1 <= a_i <= 10^9) is an element of the array. # Output: - The output should contain n - k + 1 integers, each representing the maximum element of each sliding window. # Example: Input: ``` 8 3 1 3 -1 -3 5 3 6 7 ``` Output: ``` 3 3 5 5 6 7 ``` # Explanation: - For the first window [1, 3, -1], the maximum is 3. - For the second window [3, -1, -3], the maximum is 3. - For the third window [-1, -3, 5], the maximum is 5. - For the fourth window [-3, 5, 3], the maximum is 5. - For the fifth window [5, 3, 6], the maximum is 6. - For the sixth window [3, 6, 7], the maximum is 7. This problem tests your ability to efficiently handle sliding windows and maintain a balance between performance and correctness.","solution":"from collections import deque def max_sliding_window(nums, k): Returns the maximum of each sliding window of size k n = len(nums) if n * k == 0: return [] if k == 1: return nums deq = deque() max_indices = [] def clean_deque(i): # Remove indices that are out of the bounds of the current window if deq and deq[0] == i - k: deq.popleft() # Remove all elements smaller than the current element while deq and nums[i] > nums[deq[-1]]: deq.pop() # Populate the deque for the first window for i in range(k): clean_deque(i) deq.append(i) max_indices.append(nums[deq[0]]) for i in range(k, n): clean_deque(i) deq.append(i) max_indices.append(nums[deq[0]]) return max_indices"},{"question":"Given a set of projects and a set of dependencies between them, determine the order in which the projects should be completed. If no valid order exists, return an empty list. Each project is represented by a unique integer ID between 1 and n (inclusive). Each dependency is a pair of integers (a, b), meaning that project a must be completed before project b. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) representing the number of projects and the number of dependencies, respectively. - The next m lines each contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b) representing a dependency that project a must be completed before project b. Output: - Output should be a single line containing the IDs of the projects in the order they should be completed, separated by spaces. If no valid order exists, return \\"IMPOSSIBLE\\". Example input: ``` 6 6 1 4 2 4 3 5 1 5 4 6 5 6 ``` Example output: ``` 1 2 3 4 5 6 ``` Explanation: - The above input specifies that projects 1 and 2 must be completed before project 4, project 3 must be completed before project 5, project 1 must be completed before project 5, project 4 must be completed before project 6, and project 5 must be completed before project 6. - One possible valid order to complete the projects is: 1, 2, 3, 4, 5, 6. - There can be other valid orders as well, as long as they satisfy all dependencies. Note: - The input guarantees that each dependency is unique. - The output can have multiple correct answers. Any valid topological sort of the projects is acceptable.","solution":"from collections import defaultdict, deque def find_project_order(n, m, dependencies): # Initialize graph and in-degree array graph = defaultdict(list) in_degree = [0] * (n + 1) # Build the graph and fill in-degrees for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Find all nodes with 0 in-degree zero_in_degree_queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) topological_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If topological sort includes all nodes, return it. Otherwise, return \\"IMPOSSIBLE\\". if len(topological_order) == n: return topological_order else: return \\"IMPOSSIBLE\\""},{"question":"Tom is organizing a team-building event for his company, and he wants to divide the employees into teams. The objective is to minimize the skill level difference within each team to ensure balanced performance across the company. Given n employees, each with a specific skill level, Tom wants to form exactly k teams. The skill level difference within a team is defined as the difference between the maximum and minimum skill levels of the employees in that team. Tom wants to minimize the maximum skill level difference among the teams. For this purpose, you need to write a program that, given the skill levels of the employees, determines the minimum possible value of this maximum skill level difference when forming k teams. The first line of the input contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ n) — the number of employees and the number of teams, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the skill levels of the employees. Output a single integer — the minimum possible value of the maximum skill level difference among the teams if the employees are divided optimally. # Example: **Input:** ``` 5 3 1 3 6 9 12 ``` **Output:** ``` 3 ``` **Explanation:** One of the optimal ways to divide the employees into 3 teams is: - Team 1: {1, 3} - Team 2: {6} - Team 3: {9, 12} The skill level differences within each team are 2, 0, and 3, respectively, and hence the maximum skill level difference is 3. This is the minimum possible value of the maximum skill level difference for this input.","solution":"def find_min_skill_diff(n, k, skill_levels): skill_levels.sort() # Binary search for the answer left, right = 0, skill_levels[-1] - skill_levels[0] def can_divide(max_diff): count, last = 1, skill_levels[0] for skill in skill_levels: if skill - last > max_diff: count += 1 last = skill return count <= k while left < right: mid = (left + right) // 2 if can_divide(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an array of n integers, a1, a2, ..., an, and m queries. Each query consists of three integers l, r, and k. For each query, you need to determine if there exists at least one subsequence of a[l...r] (inclusive) of length k that is strictly increasing. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 10^5) — the length of the array and the number of queries, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 500). The following m lines contain three space-separated integers l, r, and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ (r - l + 1)). For each query, print \\"YES\\" if there exists a strictly increasing subsequence of length k in a[l...r], otherwise print \\"NO\\". **Example:** ``` Input: 7 3 1 2 3 4 1 2 3 1 4 2 3 6 4 2 7 3 Output: YES NO YES ```","solution":"def can_find_increasing_subsequence(n, m, arr, queries): results = [] for l, r, k in queries: subarray = arr[l-1:r] if k == 1: results.append(\\"YES\\") continue count = 1 # At least one element is always there for i in range(1, len(subarray)): if subarray[i] > subarray[i - 1]: count += 1 if count >= k: break results.append(\\"YES\\" if count >= k else \\"NO\\") return results"},{"question":"You are given an unordered file of student grades from a recent university exam. Each record in the file has a student ID and the student\'s grade. The grades are integer values between 0 and 100 inclusive. Students with a grade of 40 or more pass the exam, while those with a grade below 40 fail. Your task is to read the file and generate a report. The report should include the following information: 1. The total number of students. 2. The number of passing and failing students. 3. The average grade of all students. 4. A list of student IDs who received the highest grade. The input to your program is a text file where each line contains a student ID (a non-empty string without spaces) and a grade (an integer between 0 and 100). There may be multiple students with the same grade. For example, consider the following input: ``` S12345 78 S12346 45 S12347 89 S12348 39 S12349 62 S12350 89 S12351 53 S12352 100 ``` Your program should output: ``` Total students: 8 Passing students: 6 Failing students: 2 Average grade: 68.12 Highest grade: 100 Students with highest grade: S12352 ``` Write a Python function `generate_report(file_path)` that reads the student records from the specified file path and prints the report in the format shown above. Make sure to handle all required edge cases such as empty files, grades at boundaries (0 and 100), and multiple students with the same highest grade.","solution":"def generate_report(file_path): total_students = 0 passing_students = 0 failing_students = 0 total_grades = 0 grades = {} with open(file_path, \'r\') as file: for line in file: total_students += 1 student_id, grade = line.split() grade = int(grade) total_grades += grade if grade >= 40: passing_students += 1 else: failing_students += 1 if grade in grades: grades[grade].append(student_id) else: grades[grade] = [student_id] average_grade = total_grades / total_students if total_students > 0 else 0 highest_grade = max(grades.keys()) if grades else 0 students_with_highest_grade = grades[highest_grade] if highest_grade in grades else [] print(f\\"Total students: {total_students}\\") print(f\\"Passing students: {passing_students}\\") print(f\\"Failing students: {failing_students}\\") print(f\\"Average grade: {average_grade:.2f}\\") print(f\\"Highest grade: {highest_grade}\\") print(f\\"Students with highest grade: {\' \'.join(students_with_highest_grade)}\\")"},{"question":"A spaceship navigation system comprises a grid of size n x m, where each cell in the grid must be either empty or contain an obstacle. The spaceship can move up, down, left, or right, but it cannot pass through obstacles. The system must calculate the shortest path from the spaceship\'s starting position to its destination position. The grid is populated with \'.\' representing empty cells and \'#\' representing obstacles. If it\'s not possible to reach the destination from the starting position, the system should return -1. The spaceship starts at the top-left corner of the grid (position [0, 0]) and needs to reach the bottom-right corner (position [n-1, m-1]). # Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. - The next n lines each contain m characters, either \'.\' or \'#\', representing the grid. # Output - Output a single integer - the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. # Example Input: ``` 5 5 ..... .#.#. ...#. .#. ..... ``` Output: ``` 9 ``` Input: ``` 3 3 .#. # .#. ``` Output: ``` -1 ```","solution":"from collections import deque def shortest_path(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1"},{"question":"You are given an array a consisting of n positive integers. You can perform the following operation on the array any number of times: 1. Select two different indices i and j (1 le i, j le n) and set a[i] = a[i] , text{AND} , a[j], where text{AND} denotes the bitwise AND operation. Your task is to determine the minimum possible value of the maximum element in the array if you perform the operation optimally. The first line of the input contains an integer t (1 le t le 100) - the number of test cases. Each test case consists of two lines: - The first line contains an integer n (2 le n le 500) - the size of the array. - The second line contains n positive integers a_1, a_2, ldots, a_n (1 le a[i] le 10^9) - the elements of the array. For each test case, print a single integer - the minimum possible value of the maximum element in the array. # Example Input ``` 2 3 12 15 7 4 5 2 8 3 ``` Output ``` 3 0 ``` # Explanation In the first case, you can achieve the array [3, 3, 3] by performing the following operations: - Select indices 1 and 2, then perform 12 AND 15 = 12 ➔ array becomes [12, 15, 7]. - Select indices 1 and 3, then perform 12 AND 7 = 4 ➔ array becomes [4, 15, 7]. - Select indices 2 and 3, then perform 15 AND 7 = 7 ➔ array becomes [4, 7, 7]. - Select indices 1 and 2, then perform 4 AND 7 = 4 ➔ array becomes [4, 7, 4]. - Select indices 1 and 3, then perform 4 AND 4 = 4 ➔ array becomes [4, 7, 3]. - Select indices 2 and 3, then perform 7 AND 3 = 3 ➔ array becomes [4, 3, 3]. - Select indices 1 and 2, then perform 4 AND 3 = 0 ➔ array becomes [0, 3, 3]. - Continue similarly until all elements equal 3. In the second case, you can achieve the array [0, 0, 0, 0] by performing AND operations between all pairs of elements, eventually leading to all elements being 0.","solution":"def min_max_value_after_operations(t, test_cases): results = [] for case in test_cases: n, array = case min_val = array[0] for val in array: min_val &= val results.append(min_val) return results"},{"question":"You are given two integers n and m. Determine if it\'s possible to rearrange both n and m\'s digits to create two equal numbers. Let\'s define the input and output more specifically: - The input consists of two space-separated integers n and m, where 1 ≤ n, m ≤ 10^9. - Your output should be a single word, either \\"YES\\" if it is possible to rearrange the digits of n to form m and vice versa, or \\"NO\\" if it is not possible. Examples: Input: 123 321 Output: YES Input: 456 6543 Output: NO Input: 111 111 Output: YES","solution":"def can_rearrange_to_equal(n, m): Returns \'YES\' if it\'s possible to rearrange both n and m\'s digits to create two equal numbers, otherwise returns \'NO\'. # Convert numbers to strings str_n = str(n) str_m = str(m) # Sort the characters of each string and compare if sorted(str_n) == sorted(str_m): return \\"YES\\" else: return \\"NO\\""},{"question":"Beyonders have created a rectangular grid of dimensions n times n. Each cell of the grid initially contains a single positive integer. Beyonders are known to perform rituals that affect the grid by altering the values in the cells. Specifically, a single ritual consists of choosing a row or a column and incrementing every value in that row or column by one. After performing a series of rituals, Beyonders want to assess the impact. For each cell in the grid, they want to know the final value after all rituals have been applied. Given the initial grid state and a sequence of rituals, your task is to determine the final grid state. The first line contains a single integer n (1 leq n leq 1000) representing the number of rows and columns in the grid. Each of the next n lines contains n space-separated integers, the initial values of the cells in the grid. Each value is between 1 and 10^4, inclusive. The following line contains a single integer m (0 leq m leq 1000) representing the number of rituals. Each of the next m lines describes a ritual. Each ritual is represented by a character and an integer separated by a space. The character is either \'R\' (indicating a row increment) or \'C\' (indicating a column increment), and the integer indicates which row or column (1-based) to increment. Output the state of the grid after all rituals are performed. Print n lines, each containing n space-separated integers, representing the final values in the grid. **Input:** ``` 3 1 2 3 4 5 6 7 8 9 2 R 1 C 3 ``` **Output:** ``` 2 3 4 4 5 7 7 8 10 ``` **Explanation:** After performing the first ritual (R 1), the first row is incremented: ``` 2 3 4 4 5 6 7 8 9 ``` After performing the second ritual (C 3), the third column is incremented: ``` 2 3 5 4 5 7 7 8 10 ``` Thus, the final state of the grid is: ``` 2 3 5 4 5 7 7 8 10 ```","solution":"def perform_rituals(n, grid, m, rituals): # Initialize row and column increment arrays row_increments = [0] * n column_increments = [0] * n # Apply the rituals for ritual in rituals: action, index = ritual index -= 1 # Convert to 0-based index if action == \'R\': row_increments[index] += 1 elif action == \'C\': column_increments[index] += 1 # Compute the final grid final_grid = [] for i in range(n): row = [] for j in range(n): final_value = grid[i][j] + row_increments[i] + column_increments[j] row.append(final_value) final_grid.append(row) return final_grid"},{"question":"You are given a list of integers and a target sum. Your task is to find the pair of integers in the list that adds up to the target sum. If no such pair exists, return \\"NO PAIR\\". Input - The first line contains an integer n (1 le n le 10^5) — the number of integers in the list. - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). - The third line contains an integer t (-2 times 10^9 le t le 2 times 10^9) — the target sum. Output - If a pair of integers a_i and a_j exists such that a_i + a_j = t, print the pair a_i and a_j. - If no such pair exists, print \\"NO PAIR\\". Example Input: 6 1 2 3 -1 -2 -3 0 Output: 1 -1 Explanation: The pairs of integers in the list that add up to 0 are: - (1, -1) - (2, -2) - (3, -3) Among these pairs, the pair (1, -1) is found first. Therefore, 1 and -1 are returned as output.","solution":"def find_pair_with_sum(arr, target): seen = set() for num in arr: complement = target - num if complement in seen: return num, complement seen.add(num) return \\"NO PAIR\\""},{"question":"Yuki loves palindromes. She especially adores numbers that are palindromes. One day, she came up with the idea of finding the smallest palindrome larger than a given number. A number is said to be a palindrome if it reads the same forward and backward. For example, 121 and 1331 are palindromes, but 123 and 1321 are not. Given an integer n, find the smallest palindrome number larger than n. The first line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the following t lines contains one integer n (1 ≤ n ≤ 10^14). For each test case, output the smallest palindrome number that is strictly greater than n. Example: Input: 3 123 808 999 Output: 131 818 1001 Note: For the first test case, the smallest palindrome greater than 123 is 131. For the second test case, the smallest palindrome greater than 808 is 818. For the third test case, the smallest palindrome greater than 999 is 1001.","solution":"def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(n): Find the smallest palindrome greater than n. n += 1 # Start checking from the next number while not is_palindrome(n): n += 1 return n def find_next_palindromes(nums): For a list of numbers, return a list of the smallest palindromes greater than each number. return [next_palindrome(n) for n in nums]"},{"question":"Roman and his friends are hosting a movie marathon and have n movies in their collection. Every movie has a specific duration in minutes, given as a list of integers. Roman can watch movies back-to-back for a maximum total duration of k minutes before needing a break. Your task is to find the maximum number of consecutive movies Roman can watch without exceeding the total duration of k minutes. You are given n, the number of movies, and k, the maximum total duration in minutes Roman can watch consecutively. The next line contains n integers representing the durations of each movie. The first line contains two integers n (1 ≤ n ≤ 100000) and k (1 ≤ k ≤ 1000000000). The next line contains n integers, each representing the duration of a movie (1 ≤ duration ≤ 10000). Print a single integer representing the maximum number of consecutive movies Roman can watch without needing a break. # Example Input 6 120 30 20 10 40 50 10 Output 4 In this example, the maximum number of consecutive movies Roman can watch without exceeding 120 minutes total is 4 (by watching movies with durations 30, 20, 10, and 40).","solution":"def max_consecutive_movies(n, k, durations): max_count = 0 current_sum = 0 start = 0 for end in range(n): current_sum += durations[end] while current_sum > k: current_sum -= durations[start] start += 1 max_count = max(max_count, end - start + 1) return max_count"},{"question":"James is a nature enthusiast and likes exploring the wilderness. For his next trip, he wants to hike a specific trail in a national park. The trail in the park can be represented as a sequence of n segments connected end-to-end. Each segment has a difficulty level associated with it. James wants to hike the trail in such a way that he does not hike on segments that are too difficult for him. To determine which segments he can comfortably hike, James uses a threshold value t. He can only hike on segments whose difficulty level is less than or equal to t. Given the number of segments n, the difficulty levels of these segments, and the threshold value t, determine the maximum length of the continuous trail James can hike. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of segments in the trail. The second line contains n space-separated integers, where the i-th integer d_i (1 ≤ d_i ≤ 100000) represents the difficulty level of the i-th segment. The third line contains an integer t (1 ≤ t ≤ 100000) — James\'s difficulty threshold. Print one integer — the maximum length of the continuous trail that James can hike. For example, if the input is: ``` 8 2 3 4 5 6 1 2 3 4 ``` The output should be `4` because the longest continuous trail that James can hike is \\"2 3 4\\" starting from the first segment and having length 3.","solution":"def max_hikeable_length(n, difficulties, t): max_length = 0 current_length = 0 for difficulty in difficulties: if difficulty <= t: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"A string is considered to have a \\"beautiful\\" suffix if the last three characters of the string are \\"abc\\". Valera is given a string s consisting of lowercase English letters. Valera can remove up to k characters from the end of the string (including possibly removing none) in order to form a \\"beautiful\\" suffix. Help Valera determine the maximum number of characters he needs to remove to achieve this. The first line contains an integer k (1 leq k leq 1000) — the maximum number of characters that Valera can remove from the end of the string. The second line contains a string s (1 leq |s| leq 1000) consisting of lowercase English letters. Output a single integer — the maximum number of characters Valera needs to remove at the end of the string to make the suffix \\"abc\\". If it\'s not possible to form such a suffix within the limit, output -1. # Examples Example 1: ``` Input: 3 abcde Output: 2 Explanation: By removing the last two characters \\"de\\", the string becomes \\"abc\\" which has the \\"beautiful\\" suffix \\"abc\\". ``` Example 2: ``` Input: 1 aabc Output: 0 Explanation: The original string already has the \\"beautiful\\" suffix \\"abc\\", so no characters need to be removed. ``` Example 3: ``` Input: 2 abefg Output: -1 Explanation: It is not possible to obtain a \\"beautiful\\" suffix within the limit of removing 2 characters. ```","solution":"def max_removals_for_beautiful_suffix(k, s): Determines the maximum number of characters Valera needs to remove to make the suffix \\"abc\\". Parameters: k (int): The maximum number of characters that can be removed. s (str): The input string consisting of lowercase English letters. Returns: int: The maximum number of characters to remove to form a \\"beautiful\\" suffix or -1 if impossible. for i in range(k + 1): if s[:len(s) - i].endswith(\'abc\'): return i return -1"},{"question":"In the magical kingdom of Valeria, there are numerous magical orbs, each emitting a specific amount of magic power. An evil sorcerer has cast a spell on some of these orbs, causing them to lose some or all of their magic power daily. The kingdom\'s astrologer, Elaria, has been tasked with determining the maximum number of days it will take for all orbs to lose their magic power completely. Each day\'s decrements are given, and Elaria needs your help to calculate the time. The first line of input contains an integer n (1 le n le 10^5) — the number of magical orbs. The second line contains n integers m_{i} (0 le m_{i} le 10^9) — the initial magic power of each orb. The third line contains n integers d_{i} (1 le d_{i} le 10^9) — the daily decrement in magic power for each orb. Each orb\'s magic power decreases daily by its corresponding decrement. The magic power of an orb is considered zero if it drops to zero or below at any point. Output a single integer — the maximum number of days it will take for all orbs to lose their magic power completely. Example: Input: ``` 3 10 5 12 2 1 3 ``` Output: ``` 5 ``` Explanation: - For the first orb: 10 - 2*5 = 0 (the orb loses its magic power after 5 days) - For the second orb: 5 - 1*5 = 0 (the orb loses its magic power after 5 days) - For the third orb: 12 - 3*4 = 0 (the orb loses its magic power after 4 days) The maximum number of days for all orbs to lose their power is 5.","solution":"def max_days_to_lose_power(n, m, d): Calculate the maximum number of days it will take for all orbs to lose their magic power completely. Parameters: n (int): Number of magical orbs. m (list of int): Initial magic power of each orb. d (list of int): Daily decrement in magic power for each orb. Returns: int: Maximum number of days it will take for all orbs to lose their magic power completely. max_days = 0 for i in range(n): days = (m[i] + d[i] - 1) // d[i] # Compute days as an integer ceiling of m[i] / d[i] if days > max_days: max_days = days return max_days"},{"question":"Given a string with distinct characters, you have to create a new string by rearranging the characters of the original string such that no two adjacent characters in the new string are the same. If it is not possible to create a such string, print \\"Not Possible\\". If there are multiple valid rearrangements, print any one of them. The first line contains an integer t (1 leq t leq 1000), the number of test cases. For each test case: The first line contains one integer n (1 leq n leq 100) — the length of the string. The second line contains the string s, consisting of exactly n distinct lowercase Latin letters. For each test case, on a new line, either print a rearranged string with no two adjacent characters being the same or \\"Not Possible\\" if such a rearrangement isn\'t feasible. In the first sample: For the string \\"abc\\", the possible rearrangements are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". Any of these outputs is acceptable. In the second sample: For the string \\"ab\\", the possible rearrangements are \\"ab\\" and \\"ba\\". Any of these outputs is acceptable. In the third sample: For the string \\"a\\", there\'s only one character, so we can\'t rearrange it to avoid having two identical adjacent characters. Hence, the output is \\"Not Possible\\".","solution":"def rearrange_string(t, test_cases): from itertools import permutations results = [] for i in range(t): n, s = test_cases[i] if n == 1: results.append(\\"Not Possible\\") continue # Generate all permutations and find a valid one valid_permutation_found = False for perm in permutations(s): perm_str = \'\'.join(perm) valid = True for j in range(1, n): if perm_str[j] == perm_str[j-1]: valid = False break if valid: results.append(perm_str) valid_permutation_found = True break if not valid_permutation_found: results.append(\\"Not Possible\\") return results"},{"question":"A company is organizing a coding bootcamp, and they have n instructors and m students. Each instructor can handle exactly k students per session, and each session runs during a unique time slot without overlap. The company wants to organize as many sessions as possible, but they also want to make sure that every instructor is fully utilized (handling k students) for each session they hold. Given the number of instructors n, the number of students m, and the number of students each instructor can handle per session k, determine the maximum number of sessions that can be scheduled. The first line of the input contains three integers n, m, and k (1 ≤ n, 1 ≤ m, 1 ≤ k ≤ 10^9) — the number of instructors, the number of students, and the number of students each instructor can handle in one session, respectively. Print a single integer — the maximum number of sessions that can be held such that every instructor is fully utilized in each session they conduct. # Example Input ``` 3 10 3 ``` Output ``` 3 ``` Explanation In this example, we have 3 instructors and each can handle 3 students per session. Hence, each session will need 9 students. We can conduct 3 sessions: - Session 1: 3 instructors with 3 students each (total 9 students) - Session 2: 1 instructor with the remaining 1 student (but this does not count since an instructor cannot be underutilized) So, the total number of fully utilized sessions is 3.","solution":"def max_sessions(n, m, k): Returns the maximum number of sessions that can be scheduled such that every instructor is fully utilized. Each instructor must handle exactly k students per session, and only fully utilized sessions count. :param n: Number of instructors :param m: Number of students :param k: Number of students per instructor per session :return: Maximum number of fully utilized sessions # Each session requires n * k students (since n instructors each handle k students) students_per_session = n * k # The number of fully utilized sessions is the total number of students divided by the number of students per session return m // students_per_session"},{"question":"In a distant forest, there are several unique species of butterflies. Each species can only thrive under specific environmental conditions defined by the types of plants present in its habitat. There are N unique species of butterflies and M unique types of plants. The relationship between butterflies and plants is given as a matrix, where cell (i, j) is 1 if butterfly i can thrive with plant j, and 0 otherwise. Your task is to determine the minimum number of unique plant types required to ensure that all the butterfly species can thrive. # Input - The first line contains two integers N and M (1 leq N, M leq 20) — the number of butterfly species and the number of plant types. - The next N lines each contain M integers (0 or 1), where the j-th integer in the i-th line denotes whether the i-th butterfly species can thrive with the j-th plant type. # Output - Output a single integer — the minimum number of unique plant types required. # Example Input ``` 3 5 1 0 1 0 1 0 1 0 0 1 1 1 0 1 0 ``` Output ``` 2 ``` # Explanation By selecting plant types 1 and 4 (0-based index), all butterfly species can thrive: - Butterfly 1 can thrive with plant types 1 and 3. - Butterfly 2 can thrive with plant types 2 and 5. - Butterfly 3 can thrive with plant types 1 and 2. Thus, using plant types 1 and 2 will cover all species. The minimum number of plants needed is 2.","solution":"from itertools import combinations def min_plant_types(n, m, matrix): min_count = m # Generate all possible combinations of plant types for num_plants in range(1, m+1): for plants in combinations(range(m), num_plants): # Check if all butterflies can thrive with this combination of plants if all(any(matrix[i][plant] for plant in plants) for i in range(n)): min_count = min(min_count, num_plants) return min_count return min_count"},{"question":"A company is organizing a corporate event and they have n employees participating. Each employee can select a weightless item from the gift shop. The gift shop has m different items in stock, each of which has a limited quantity. Each employee, however, has their own preference and as per company policy, will make their selection in a specific order that is predetermined. Given this information, you need to determine the final state of the gift shop\'s inventory after all employees have made their selections. You are provided with the following: - An integer n (1 ≤ n ≤ 10^5) representing the number of employees. - An integer m (1 ≤ m ≤ 100) representing the number of different items in the gift shop. - A list of integers of length m where the i-th element represents the quantity of the i-th item initially in stock. - A list of integers of length n where the i-th integer represents the item preference of the i-th employee in the selection order. Your task is to print the final state of the gift shop\'s inventory after all employees have made their selections. If an employee prefers an item that is out of stock, they will not make a selection and the inventory remains unchanged for that employee. The first line contains two integers n and m. The second line contains m integers representing the initial quantities of the items. The third line contains n integers representing the item preferences of the employees in sequence. Output the final state of the gift shop\'s inventory after all selections. For example: Input: 6 3 3 2 1 1 2 2 3 3 1 Output: 1 0 0 Explanation: Initially, item quantities are [3, 2, 1]. After each preference in order: - 1st employee selects item 1 -> [2, 2, 1] - 2nd employee selects item 2 -> [2, 1, 1] - 3rd employee selects item 2 -> [2, 0, 1] - 4th employee selects item 3 -> [2, 0, 0] - 5th employee tries to select item 3 but it is out of stock -> [2, 0, 0] - 6th employee selects item 1 -> [1, 0, 0]","solution":"def final_inventory(n, m, initial_quantities, preferences): Computes the final state of the gift shop\'s inventory after all employees have made their selections. Args: n : int : number of employees m : int : number of different items initial_quantities : list of int : quantities of each item initially in stock preferences : list of int : list of item preferences for each employee Returns: list of int: final quantities of each item # Preparing zero-based indexing for operations for pref in preferences: if initial_quantities[pref - 1] > 0: initial_quantities[pref - 1] -= 1 return initial_quantities"},{"question":"In a small town, there is a very peculiar clock tower that has no hands. Instead, it has N clocks arranged in a circle. Each clock shows a different time, and the i-th clock (1 ≤ i ≤ N) shows time t_i (in minutes past midnight). The time on each clock is represented as an integer from 0 to 1439 (since there are 1440 minutes in a day). Your task is to find the minimum time difference (in minutes) between any two clocks in the circle. The time difference between two clocks showing times t_i and t_j is defined as the minimum of the absolute difference between them and the difference when considering the circular nature of the clocks (i.e., wrapping around at midnight). Given the times shown on the clocks, determine the minimum time difference. The first input line contains an integer N (2 ≤ N ≤ 100) — the number of clocks. The second line contains N integers t_1, t_2, ..., t_N (0 ≤ t_i < 1440) — the times shown on the clocks. Output one integer — the minimum time difference between any two clocks. Example: Input: 4 360 720 1080 0 Output: 360","solution":"def minimum_time_difference(N, times): Finds the minimum time difference between any two clocks in the circle. if N < 2: raise ValueError(\\"There must be at least two clocks to calculate a difference.\\") times.sort() min_diff = float(\'inf\') # Compare adjacent clocks in sorted order for i in range(1, N): diff = times[i] - times[i-1] min_diff = min(min_diff, diff) # Compare the first and last clock considering the circular nature circular_diff = 1440 - (times[-1] - times[0]) min_diff = min(min_diff, circular_diff) return min_diff"},{"question":"Given an undirected graph with n nodes and m edges, determine the shortest path from node 1 to node n. If there is no path from node 1 to node n, output -1. The first line of the input contains two integers n (2 le n le 10^5) and m (1 le m le 2 cdot 10^5), representing the number of nodes and edges in the graph respectively. The next m lines each contain two integers u and v (1 le u, v le n), indicating there is an undirected edge between node u and node v. Output the length of the shortest path from node 1 to node n, or -1 if no such path exists. # Example Input ``` 5 6 1 2 1 3 3 4 2 4 2 5 4 5 ``` Output ``` 2 ``` In this example, the shortest path from node 1 to node n (=5) is via nodes 1-2-5 or 1-3-4-5 (both have length 2).","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges): if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) queue = deque([1]) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while queue: current = queue.popleft() current_distance = distances[current] for neighbor in graph[current]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"In a faraway land, there exist magical sequences known as \\"Palindromic Subarrays\\". Any contiguous subarray that reads the same forwards and backwards is considered palindromic. The Knight of Sequences, Lancelot, has been tasked with identifying all such subarrays in a given sequence of integers. Sir Lancelot has come to you for help. Given a sequence of integers, your task is to determine the total number of palindromic subarrays contained within this sequence. # Input - The first line of input contains a single integer, n (1 leq n leq 2000) — the length of the sequence. - The second line contains n space-separated integers, representing the elements of the sequence (1 leq a_i leq 10^9). # Output - Output a single integer — the total number of distinct palindromic subarrays in the given sequence. # Example Input ``` 5 1 2 3 2 1 ``` Output ``` 7 ``` # Explanation The sequence of length 5 can generate the following palindromic subarrays: [1], [2], [3], [2], [1], [2, 3, 2], and [1, 2, 3, 2, 1]. Therefore, the total count is 7.","solution":"def count_palindromic_subarrays(n, sequence): This function returns the total number of palindromic subarrays in the given sequence of integers. def is_palindrome(subarr): return subarr == subarr[::-1] count = 0 for start in range(n): for end in range(start, n): if is_palindrome(sequence[start:end+1]): count += 1 return count # Example usage: # n = 5 # sequence = [1, 2, 3, 2, 1] # print(count_palindromic_subarrays(n, sequence)) # Output: 7"},{"question":"Valentijn is a passionate mountain climber. He meticulously tracks his climbing records and has recorded the elevation (in meters) at each kilometer of several of his climbs. This time, Valentijn wants to find out the maximum elevation gain he has achieved in any single continuous segment of `k` kilometers in his recordings. Help Valentijn by writing a program to determine this maximum elevation gain. You are given an array of integers representing the elevation at each kilometer over his climb and a number `k` indicating the length of the segment to be considered. The first line of input contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100000), where `n` is the total number of kilometers recorded. The second line contains `n` space-separated integers representing the elevations at each recorded kilometer. The output should be a single integer representing the maximum elevation gain over any continuous segment of `k` kilometers. For example, if Valentijn\'s records show `n=8` kilometers and `k=3`, where the elevations provided are [4, 2, -3, 8, 5, 3, -2, 4], the function should output 16. The maximum elevation gain achieved in any 3 kilometers segment is from segment [8, 5, 3]. To summarize: Input: ``` n k e1 e2 e3 ... en ``` Output: ``` maximum_elevation_gain ```","solution":"def max_elevation_gain(n, k, elevations): Returns the maximum elevation gain over any continuous segment of `k` kilometers. Parameters: n (int): Total number of kilometers recorded. k (int): Length of the segment to consider. elevations (list of int): Elevations recorded at each kilometer. Returns: int: The maximum elevation gain over any segment of `k` kilometers. # Initial sum of the first \'k\' kilometers current_sum = sum(elevations[:k]) max_sum = current_sum # Sliding window technique for i in range(k, n): current_sum += elevations[i] - elevations[i-k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either a 0 or a 1. You can perform the following operation any number of times: - Choose any cell at coordinates (i, j) that contains a 0 and flip its value to 1. - Choose a column and clear it, setting all cells in that column to 0. Your goal is to make the sum of each row and each column equal. Determine the minimum number of column-clear operations required to achieve this. The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 50). Each of the next n lines contains m integers (either 0 or 1) representing the grid. For each test case, print a single integer — the minimum number of column-clear operations needed. For example, consider the following test case: ``` 1 3 4 0 1 0 1 1 0 1 0 0 1 0 1 ``` In the above example, clearing the second and fourth columns will result in the following grid: ``` 0 0 0 0 1 0 1 0 0 0 0 0 ``` The sum of each row and each column in the final grid will be equal. Hence, the answer is 2.","solution":"def min_column_clear_operations(t, test_cases): results = [] for case in test_cases: n, m, grid = case row_count = [0] * n col_count = [0] * m for i in range(n): for j in range(m): if grid[i][j] == 1: row_count[i] += 1 col_count[j] += 1 min_operations = min(max(row_count), max(col_count)) results.append(min_operations) return results # Example usage: # test_cases = [ # (3, 4, [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]]) # ] # result = min_column_clear_operations(1, test_cases) # print(result) # Output: [2]"},{"question":"Your task is to implement a simplified version of a scheduling algorithm for a single CPU. Specifically, you\'re working with a series of n tasks, each characterized by its execution time and deadline. Each task needs to be executed in a serial manner, one after another. The goal is to determine the minimum possible time when the latest task finishes, assuming all tasks can be completed without missing their deadlines. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of tasks. Each of the next n lines contains two integers: t_i (1 ≤ t_i ≤ 10^6), the execution time of the i-th task, and d_i (1 ≤ d_i ≤ 10^6), the deadline of the i-th task. The objective is to determine the minimum possible time after all tasks have been scheduled sequentially while ensuring no task misses its deadline. If no such schedule exists, return -1. Input: ``` The first line contains an integer n (1 ≤ n ≤ 100,000) – the number of tasks. The next n lines each contains two integers t_i and d_i (1 ≤ t_i, d_i ≤ 10^6) – the execution time and deadline of the i-th task. ``` Output: ``` Print a single integer – the minimum possible time when the latest task finishes, or -1 if it\'s impossible to complete all tasks without missing their deadlines. ``` # Example: Input: ``` 3 2 5 3 6 1 4 ``` Output: ``` 6 ``` Input: ``` 2 4 5 4 6 ``` Output: ``` -1 ```","solution":"def minimum_finish_time(n, tasks): This function determines the minimum possible time after all tasks have been scheduled sequentially while ensuring no task misses its deadline. If no such schedule exists, it returns -1. Parameters: n (int): Number of tasks tasks (list of tuples): List containing pairs (t_i, d_i) where t_i is the execution time and d_i is the deadline of the i-th task. Returns: int: The minimum possible finishing time of the latest task, or -1 if a valid schedule isn\'t possible. tasks.sort(key=lambda x: x[1]) # sort tasks by their deadlines current_time = 0 for t, d in tasks: current_time += t if current_time > d: return -1 return current_time # Example usage: # tasks = [(2, 5), (3, 6), (1, 4)] # print(minimum_finish_time(3, tasks)) # Output should be 6"},{"question":"A new company, SuperDelivery, specializes in delivering packages to customers in a very timely and efficient manner. They have been tracking their delivery times and now wish to analyze their data to determine the longest consistent delivery streak. A consistent delivery streak is defined as a sequence of at least two consecutive days where the delivery time each day is less than or equal to the delivery time of the previous day. You are given an array of integers representing the delivery times of SuperDelivery over several days. Your task is to calculate the length of the longest consistent delivery streak. The input consists of: - An integer n (2 ≤ n ≤ 100,000), the number of days. - A list of n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^9), where t_i is the delivery time on the i-th day. Output the length of the longest consistent delivery streak. If there is no such streak of length at least two days, print 0. **Input** The first line contains an integer n. The second line contains n integers t_1, t_2, ..., t_n. **Output** Output a single integer representing the length of the longest consistent delivery streak. **Example** Input: ``` 6 5 3 3 4 2 2 ``` Output: ``` 3 ``` **Explanation** In the provided example, the longest consistent delivery streak is from day 2 to day 4 (`3 3 4`), which has a length of 3.","solution":"def longest_consistent_delivery_streak(n, times): Returns the length of the longest consistent delivery streak. if n < 2: return 0 max_streak = 0 current_streak = 1 for i in range(1, n): if times[i] <= times[i-1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 return max_streak if max_streak >= 2 else 0"},{"question":"Alice has a wall made up of square tiles arranged in n rows and m columns. Each tile is either red or blue, represented by \'R\' and \'B\' respectively. Alice wants to repaint some tiles such that no two adjacent tiles have the same color. An adjacent tile is one directly to the left, right, above, or below another tile. You need to determine the minimum number of repaints required to achieve this. The first line of the input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the dimensions of the wall. Each of the next n lines contains a string of m characters, each being \'R\' or \'B\'. Output a single integer — the minimum number of repaints required. For example: Input: ``` 3 4 RBRB BRBR RBRB ``` Output: ``` 0 ``` In the above example, the tiles are already painted such that no two adjacent tiles have the same color, so no repaints are needed. Another example: Input: ``` 2 2 RR BB ``` Output: ``` 2 ``` In this case, repainting the second tile in the first row and the second tile in the second row would result in the desired pattern.","solution":"def min_repaints(n, m, grid): def count_repaints(desired_grid): repaints = 0 for i in range(n): for j in range(m): if grid[i][j] != desired_grid[i][j]: repaints += 1 return repaints # Generate two possible desired grids checkers1 = [[\'R\' if (i+j) % 2 == 0 else \'B\' for j in range(m)] for i in range(n)] checkers2 = [[\'B\' if (i+j) % 2 == 0 else \'R\' for j in range(m)] for i in range(n)] # Compare each grid with the original and count repaints needed repaints1 = count_repaints(checkers1) repaints2 = count_repaints(checkers2) return min(repaints1, repaints2)"},{"question":"You are tasked with analyzing the log files on a massive computer cluster. The log files contain timestamps of events recorded in the format `HH:MM`. Each event describes a job execution on one of the cluster nodes. The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5), representing the number of logs. Each of the next `n` lines contains a timestamp, and each timestamp is in the format `HH:MM` (00 ≤ HH ≤ 23, 00 ≤ MM ≤ 59). Your task is to determine the first and the last occurrence of the earliest event in a 24-hour period (i.e., the event with the earliest timestamp) and calculate the total number of times this earliest event occurs. Print three integers: 1. The index of the first occurrence of the earliest event (1-based index). 2. The index of the last occurrence of the earliest event (1-based index). 3. The total number of times the earliest event occurs. # Example: Input: ``` 5 23:59 00:00 12:34 00:00 00:00 ``` Output: ``` 2 5 3 ``` In this example, the earliest event `00:00` occurs three times, first at index 2, last at index 5.","solution":"def analyze_logs(n, logs): Analyzes the logs to find the first and last occurrence of the earliest event and the count of such events. Parameters: - n (int): Number of logs. - logs (list of str): List containing the timestamps in \'HH:MM\' format. Returns: - tuple: (first_occurrence_index, last_occurrence_index, total_count) as per problem statement. earliest_time = min(logs) # Find the earliest time first_occurrence = logs.index(earliest_time) + 1 # +1 for 1-based index last_occurrence = len(logs) - logs[::-1].index(earliest_time) total_count = logs.count(earliest_time) return first_occurrence, last_occurrence, total_count"},{"question":"Aşa recently started working with two-dimensional arrays. She is particularly interested in finding the maxima in these arrays and rearranging them. Here\'s a specific problem she faced: Aşa is given a two-dimensional array with n rows and m columns. Her task is to extract the maximum element from each row and construct a new array from these elements. After extracting these maxima, she should then arrange this new array in non-increasing order. Write a program to help Aşa with the following tasks: 1. Extract the maximum element from each row of the 2D array. 2. Sort these maximum elements in non-increasing order. # Input The first line of the input contains two integers n and m (1 leq n, m leq 1000) – the number of rows and columns in the array. Each of the next n lines contains m integers each, representing the elements of the 2D array. The elements of the array are integers and can be negative or positive. # Output Print a single line containing the maximum elements of each row sorted in non-increasing order. # Examples Example 1 **Input:** ``` 3 4 1 5 9 3 2 8 1 0 7 3 6 4 ``` **Output:** ``` 9 8 7 ``` Example 2 **Input:** ``` 2 2 -1 -2 -3 -4 ``` **Output:** ``` -1 -3 ``` **Note:** In the first example, the maximum elements from each row are 9, 8, and 7, and they are already sorted in non-increasing order. In the second example, the maximum elements are -1 and -3, and they are already sorted in non-increasing order.","solution":"def maximums_sorted_2D_array(n, m, array): Extract the maximum element from each row of a 2D array and return them sorted in non-increasing order. :param n: Number of rows in the 2D array. :param m: Number of columns in the 2D array. :param array: 2D list of integers representing the array. :return: List of integers containing the maximum elements from each row sorted in non-increasing order. max_elements = [max(row) for row in array] max_elements.sort(reverse=True) return max_elements"},{"question":"Given an array of integers, your task is to find the maximum product of any triplet in the array. A triplet is a set of three numbers in the array chosen such that their product is maximized. Your goal is to find this maximum product. The first line of the input contains an integer n (3 le n le 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^3 le a_i le 10^3). Output a single integer, the maximum product of any triplet in the array. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 60 ``` Input ``` 6 -10 -10 5 2 3 4 ``` Output ``` 500 ``` # Note In the first example, the triplet (3, 4, 5) provides the maximum product of 3 * 4 * 5 = 60. In the second example, although 5, 4, and 3 are the greatest numbers, the pair of negative numbers -10 and -10, when combined with 5, produce a higher product of -10 * -10 * 5 = 500.","solution":"def maximum_product_of_triplet(arr): Returns the maximum product of any triplet in the array. arr.sort() n = len(arr) return max(arr[0] * arr[1] * arr[n-1], arr[n-1] * arr[n-2] * arr[n-3])"},{"question":"A developer is building a system to manage a series of parking lots. Each parking lot contains a number of slots arranged in a linear sequence. Every parking slot can either be free or occupied. The developer also needs to handle a series of requests to check whether a specific subsequence of slots in a parking lot are all free or not. A parking lot can be represented as a string where \'F\' denotes a free slot, and \'O\' denotes an occupied slot. You need to process multiple queries where each query consists of two integers representing the starting and ending positions of a subsequence within the string. For each query, determine if all slots in the specified subsequence are free. The first line contains two integers, n and q — the length of the parking lot string and the number of queries, respectively (1 leq n, q leq 200,000). The second line contains a string of length n consisting of characters \'F\' and \'O\'. Each of the next q lines contains two integers l and r (1 leq l leq r leq n) — the starting and ending positions of the query. For each query, print \\"YES\\" if all slots in the subsequence from position l to r are free, otherwise print \\"NO\\". Example Input: ``` 10 3 F F O F F F F O F F 1 5 1 3 6 10 ``` Example Output: ``` NO NO NO ``` Carefully handle the large input sizes and optimize your solution to meet the constraints.","solution":"def parking_lot_check(n, q, parking_lot, queries): Determine if all slots in the specified subsequence in the parking lot are free. :param n: int - Length of the parking lot string :param q: int - Number of queries :param parking_lot: str - String representing the parking lot (\'F\' for free, \'O\' for occupied) :param queries: list of tuples - Each tuple contains two integers representing the (1-indexed) start and end positions of the query :return: list of str - For each query, return \\"YES\\" if all slots in the specified subsequence are free, otherwise \\"NO\\" results = [] for l, r in queries: subsequence = parking_lot[l-1:r] if \'O\' in subsequence: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"John is a computer science student who loves solving puzzles. He recently came across a puzzle that involved finding a special sequence of numbers. The sequence must be a permutation of numbers from 1 to n, such that the sum of any two adjacent numbers in the sequence is a prime number. John decided to write a program to find such a sequence, but he\'s stuck and needs your help. Given an integer n, determine if such a permutation exists. If it exists, print the permutation. If it does not exist, print \\"No\\". The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the sequence. If such a permutation exists, print \\"Yes\\" on the first line. On the second line, print the permutation of numbers from 1 to n. If no such permutation exists, print \\"No\\". # Examples Input 1: ``` 3 ``` Output 1: ``` Yes 1 2 3 ``` Input 2: ``` 4 ``` Output 2: ``` No ```","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_special_sequence(n): if n == 1: return (True, [1]) elif n == 2: return (True, [1, 2]) elif n == 3: return (True, [1, 2, 3]) elif n % 4 == 0: return (True, sum_pairs(n)) else: return (False, []) def sum_pairs(n): # When n is multiple of 4 sequence = [] for i in range(1, n // 2 + 1): sequence.append(i * 2) sequence.append(i * 2 - 1) return sequence def solve(n): exists, sequence = find_special_sequence(n) if exists: return \\"Yesn\\" + \\" \\".join(map(str, sequence)) else: return \\"No\\""},{"question":"Sarah is working on a system that schedules tasks on a single-threaded processor. The system receives a list of tasks, each with an execution time and a deadline by which the task should complete. Sarah wants to maximize the number of tasks that can be finished on time. Each task is represented by a pair (t_i, d_i) where t_i is the time required to execute the task, and d_i is the deadline by which the task must be completed. Sarah can only work on one task at a time, and once she starts a task, she must finish it without interruptions. Given the list of tasks, Sarah needs to determine the maximum number of tasks she can complete on time. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of tasks. The next n lines each contain two integers t_i (1 ≤ t_i ≤ 10,000) and d_i (1 ≤ d_i ≤ 10,000) — the time required to execute the task and the deadline for the task, respectively. Print a single integer — the maximum number of tasks that can be completed on time. # Example Input ``` 5 2 4 3 5 1 3 2 6 1 7 ``` # Example Output ``` 4 ``` # Explanation In the example, Sarah can execute the tasks in the order: (1, 3), (2, 4), (3, 5), (1, 7) to complete 4 tasks by their deadlines. The task (2, 6) can\'t be completed within its deadline considering other tasks scheduling.","solution":"def max_tasks_on_time(tasks): Returns the maximum number of tasks that can be completed on time. # Sort tasks by their deadlines tasks.sort(key=lambda x: x[1]) current_time = 0 completed_tasks = 0 for task in tasks: t, d = task if current_time + t <= d: current_time += t completed_tasks += 1 return completed_tasks # Example usage tasks = [ (2, 4), (3, 5), (1, 3), (2, 6), (1, 7) ] print(max_tasks_on_time(tasks))"},{"question":"Harry is a prolific writer and has been hired to write character dialogues for a new video game. Each dialogue consists of a sequence of sentences, and Harry has devised a peculiar method to determine how many different characters will be speaking in each dialogue based on their names. A character\'s name consists of distinct uppercase English letters. Harry writes a dialogue by concatenating the names of several characters, and each character can contribute one or multiple sentences. Harry has to announce the number of different speakers in each dialogue. Formally, you need to find the number of distinct names Harry uses in a dialogue, where a name is defined as a continuous subsequence of letters taken from the dialogue string. The input starts with a single integer n (1 leq n leq 10^5) — the number of dialogues. Each of the next n lines contains a single string s with uppercase English letters (1 ≤ |s| ≤ 50) — a dialogue. Print n integers, each representing the number of distinct names in the corresponding dialogue. **Example** **Input:** ``` 3 ABAC BCAAA ABC ``` **Output:** ``` 4 3 3 ``` In the first example, the dialogue \\"ABAC\\" can have the names \\"A\\", \\"AB\\", \\"ABA\\", \\"ABAC\\", \\"B\\", \\"BA\\", \\"BAC\\", \\"C\\". In the second example, the dialogue \\"BCAAA\\" can have the names \\"B\\", \\"BC\\", \\"BCA\\", \\"BCAA\\", \\"BCAAA\\", \\"C\\", \\"CA\\", \\"CAA\\", \\"CAAA\\", \\"A\\", but since names must consist of distinct letters, only the names \\"B\\", \\"BC\\", \\"BCA\\" are valid. In the third example, the dialogue \\"ABC\\" can have the names \\"A\\", \\"AB\\", \\"ABC\\", \\"B\\", \\"BC\\", \\"C\\".","solution":"def count_distinct_characters(dialogues): Given multiple dialogues, returns the number of distinct characters (sequence of unique letters) in each dialogue. Args: dialogues: List of strings, each string being a dialogue Returns: List of integers, each integer representing number of distinct character names in the corresponding dialogue result = [] for dialogue in dialogues: unique_characters = set(dialogue) result.append(len(unique_characters)) return result"},{"question":"You are given an array of positive integers and an integer k. Your goal is to find the length of the smallest contiguous subarray such that its sum is greater than or equal to k. If no such subarray exists, return -1. For example, given the array [2, 3, 1, 2, 4, 3] and k = 7, the smallest subarray with a sum greater than or equal to 7 is [4, 3], which has length 2. Input: - The first line contains an integer t (1 leq t leq 1000): the number of test cases. - Each test case consists of two lines. - The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq 10^9): the number of elements in the array and the desired sum k respectively. - The second line contains n positive integers representing the elements of the array (1 leq a_i leq 10^5). Output: - For each test case, output a single line containing the length of the smallest subarray whose sum is greater than or equal to k. If no such subarray exists, output -1. Example: Input: 2 6 7 2 3 1 2 4 3 5 11 1 2 3 4 5 Output: 2 3","solution":"def min_subarray_len(arr, k): n = len(arr) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1 def process_test_cases(test_cases): results = [] for t in test_cases: n, k, arr = t result = min_subarray_len(arr, k) results.append(result) return results"},{"question":"You are given three arrays A, B, and C. Each array contains n positive integers, where (1 leq n leq 1000) and (1 leq A[i], B[i], C[i] leq 10^9). You need to find a triplet (i, j, k) such that A[i] + B[j] + C[k] is the minimum possible sum. If there are multiple such triplets, you may output any of them. Input: - The first line contains a single integer n. - The second line contains n space-separated integers representing array A. - The third line contains n space-separated integers representing array B. - The fourth line contains n space-separated integers representing array C. Output: - Print three integers i, j, and k (1-indexed) such that A[i] + B[j] + C[k] is the minimum possible sum. Example: Input: 4 1 3 5 7 2 4 6 8 1 3 5 7 Output: 1 1 1 Explanation: The sum for triplet (1, 1, 1) is 1 + 2 + 1 = 4, which is the minimum possible sum.","solution":"def find_minimum_triplet(n, A, B, C): This function finds the indices (1-indexed) i, j, and k such that A[i] + B[j] + C[k] is the minimum possible sum. min_sum = float(\'inf\') result = (1, 1, 1) for i in range(n): for j in range(n): for k in range(n): current_sum = A[i] + B[j] + C[k] if current_sum < min_sum: min_sum = current_sum result = (i + 1, j + 1, k + 1) return result"},{"question":"You are given a string that contains only digits and you need to find the largest even number that can be formed by reordering the digits of this string. If no even number can be formed, return -1. # Input The first line contains a single string s (1 le |s| le 1000) consisting of digits (\'0\' - \'9\'). # Output Print the largest even number that can be formed by reordering the digits of s. If no even number can be formed, print -1. # Example Input ``` 54321 ``` Output ``` 54312 ``` Input ``` 111 ``` Output ``` -1 ``` # Explanation In the first example, we can rearrange the digits to form 54312, which is the largest even number possible. In the second example, as there\'s no way to form an even number from the digits, the output is -1.","solution":"def largest_even_number(s): Returns the largest even number that can be formed by reordering the digits of the input string s. If no even number can be formed, returns -1. digits = sorted(s, reverse=True) # Try to place the smallest even digit at the end for i in range(len(digits) - 1, -1, -1): if int(digits[i]) % 2 == 0: even_digit = digits.pop(i) return \'\'.join(digits) + even_digit return \\"-1\\""},{"question":"You are given a 2D grid of size n times m consisting of integer values. The grid is classified as mountains if each cell in the grid satisfies a specific condition related to its neighboring cells. A cell is part of a mountain if it is strictly greater than all of its immediate neighbors (up, down, left, right). Your task is to find the total number of mountain peaks in the grid and the size of the largest mountain. The size of a mountain is defined as the number of connected mountain cells (connected horizontally and vertically). The first line of input contains two integers n and m (1 leq n, m leq 1000) representing the dimensions of the grid. The following n lines contain m integers each, representing the grid cells\' values (1 leq text{value} leq 10^9). Output two integers: the total number of mountain peaks and the size of the largest mountain. **Example:** **Input:** ``` 3 3 5 3 4 2 9 6 1 8 7 ``` **Output:** ``` 2 1 ``` In this example, there are two mountain peaks at cell (0,0) with value 5 and cell (2,2) with value 7. The size of the largest mountain is 1 as both peaks are isolated.","solution":"def find_mountain_peaks_and_largest_mountain(n, m, grid): def is_peak(x, y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[x][y] <= grid[nx][ny]: return False return True def dfs(x, y, visited): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if (cx, cy) in visited: continue visited.add((cx, cy)) size += 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and is_peak(nx, ny): stack.append((nx, ny)) return size peaks = [] for i in range(n): for j in range(m): if is_peak(i, j): peaks.append((i, j)) total_peaks = len(peaks) largest_mountain = 0 visited = set() for peak in peaks: if peak not in visited: size = dfs(peak[0], peak[1], visited) largest_mountain = max(largest_mountain, size) return total_peaks, largest_mountain"},{"question":"John has a warehouse full of boxes that need to be shipped. Each box can have a different weight, and there is a weight limit for the shipping container. John wants to know the maximum value he can get from putting boxes in the container without exceeding the weight limit. Each box also has a value associated with it. Given the list of boxes with their weights and values, and the weight limit of the container, help John determine the maximum total value he can achieve. The first line contains an integer n (1 ≤ n ≤ 100) — the number of boxes. The second line contains an integer W (1 ≤ W ≤ 10000) — the weight limit of the container. Each of the next n lines contains two integers wi and vi (1 ≤ wi ≤ 1000, 1 ≤ vi ≤ 1000) — the weight and value of the i-th box. Output a single integer — the maximum total value of the boxes in the container without exceeding the weight limit. Example: ``` Input: 4 10 2 10 3 40 4 50 5 70 Output: 120 ```","solution":"def knapsack(n, W, items): Returns the maximum value that can be achieved given weight limit and item weights and values. n: Number of items. W: Maximum weight limit of the container. items: List of tuples, each containing (weight, value) of an item. # Create a list with W+1 elements initialized to 0 dp = [0] * (W + 1) for weight, value in items: # Traverse the dp list in reverse order for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + value) return dp[W]"},{"question":"Alicia loves to collect rare and unique stones. She has a collection of n stones, each of a specific type identified by an integer (e.g., 1, 2, etc.). Alicia wants to create the longest possible subsequence of stones where no two adjacent stones in the subsequence are of the same type. Can you help Alicia determine the length of the longest such subsequence? The first line of the input contains one integer, n (1 ≤ n ≤ 100,000), the number of stones in Alicia\'s collection. The second line contains n space-separated integers, where the i-th integer indicates the type of the i-th stone (1 ≤ type ≤ 1000). Print the length of the longest subsequence where no two adjacent stones are of the same type. # Example **Input:** ``` 6 1 2 3 2 2 3 ``` **Output:** ``` 5 ``` **Explanation:** One possible longest subsequence without consecutive repeating types is [1, 2, 3, 2, 3]. Another example: **Input:** ``` 5 1 1 1 1 1 ``` **Output:** ``` 1 ``` **Explanation:** The only possible subsequence where no two adjacent stones are the same is [1].","solution":"def longest_subsequence(n, stones): if n == 0: return 0 max_length = 1 # the minimum length is at least one stone for i in range(1, n): if stones[i] != stones[i - 1]: max_length += 1 return max_length # Example usage: # Input: 6 [1, 2, 3, 2, 2, 3] # Output: 5"},{"question":"You are given an array of integers representing a sequence a_1, a_2, dots, a_n. Your goal is to arrange the elements of the array in a specific order using a series of operations. In one operation, you can choose any two adjacent elements and swap them. The desired order is non-decreasing, meaning each element is less than or equal to the next element in the sequence. Determine the minimum number of swaps required to sort the sequence in non-decreasing order. The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Print a single integer — the minimum number of swaps needed to sort the array in non-decreasing order. In the first example, the sequence is already sorted, so no swaps are needed. In the second example, we can sort the sequence using one swap: swap the first and second elements. Thus, the minimum number of swaps needed is 1.","solution":"def minimum_swaps_to_sort(nums): n = len(nums) arrpos = [(value, index) for index, value in enumerate(nums)] arrpos.sort(key=lambda it: it[0]) visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arrpos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"The football club you support, United XY, has reached the finals of a prestigious tournament. There are n fans, each with different energy levels, and they decide to cheer for the team in turns. They want to organize the fans in such a way that the energy difference between any two consecutive fans cheering is minimized to maintain a consistent and synchronized cheering rhythm. Each fan has an energy level ei (where 1 ≤ ei ≤ 10^9), and no two fans have the same energy level. Given the energy levels of all fans, you need to determine the optimal order of fans to achieve the minimum possible maximum difference between the energy levels of any two consecutive fans in the cheering order. The first line of the input contains an integer n (2 ≤ n ≤ 10^5) — the number of fans. The second line contains n integers e1, e2, ..., en — the energy levels of the fans. Output the minimum possible maximum difference between the energy levels of any two consecutive fans when they are ordered optimally. For example, with fans having energy levels 5, 1, 9, 3, the optimal order could be 1, 3, 5, 9, resulting in differences of [2, 2, 4], which gives a maximum difference of 4. Another example with energy levels 8, 2, 6, 4 has an optimal order of 2, 4, 6, 8, resulting in differences of [2, 2, 2], which gives a maximum difference of 2.","solution":"def minimum_maximum_difference(n, energy_levels): Returns the minimum possible maximum difference between the energy levels of any two consecutive fans when they are ordered optimally. # Sort the energy levels since we aim to minimize the difference between consecutive energy levels energy_levels.sort() # Calculate the differences between each pair of consecutive elements differences = [energy_levels[i+1] - energy_levels[i] for i in range(n-1)] # The minimum possible maximum difference will be the maximum value in the differences list return max(differences)"},{"question":"A village consists of several houses arranged in a straight line, numbered from 1 to n. Each house either has a dog or does not have a dog. You are tasked with placing food bowls in front of some of these houses. However, each house that has a dog must have a food bowl placed directly in front of it. Additionally, no two adjacent houses should both have a food bowl. You need to determine the minimum number of food bowls required to satisfy these conditions. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of houses. The second line contains a binary string of length n where \'1\' represents a house with a dog and \'0\' represents a house without a dog. Output a single integer — the minimum number of food bowls required. For example, if there are 5 houses and the houses with dogs are represented by the binary string \\"10101\\": 1. In the first house, there is a dog, so we place a food bowl. 2. In the second house, there is no dog, so no food bowl is needed. 3. In the third house, there is a dog, and we also need to ensure no two adjacent houses both have food bowls. 4. In the fourth house, there is no dog, so no food bowl is needed. 5. In the fifth house, there is a dog. In this setup, one of the optimal solutions is to place food bowls in front of houses 1, 3, and 5. In the first example, the binary string is \\"10101\\", leading to an output of 3, as food bowls are needed in front of houses 1, 3, and 5.","solution":"def min_food_bowls(n, houses): Given a number of houses and a binary string representing houses with dogs (\'1\') and without dogs (\'0\'), this function calculates the minimum number of food bowls required such that each house with a dog has a food bowl in front of it, and no two adjacent houses both have a food bowl. Args: n (int): The number of houses. houses (str): A binary string of length n where \'1\' represents a house with a dog and \'0\' represents a house without a dog. Returns: int: The minimum number of food bowls required. bowls = 0 i = 0 while i < n: if houses[i] == \'1\': bowls += 1 i += 2 # Skip the next house to ensure no two adjacent houses have bowls else: i += 1 return bowls"},{"question":"You are given a string consisting of lowercase English letters. You want to make some characters uppercase to make the string balanced. A string is balanced if it has the same number of lowercase and uppercase letters. Note that once a character is made uppercase, it cannot be reverted to lowercase. Determine the minimum number of characters you need to make uppercase to make the given string balanced or state that it is impossible to balance the string. The input consists of a single string s (1 ≤ |s| ≤ 50), which consists of lowercase English letters. Output the minimum number of characters you need to make uppercase, or -1 if it is impossible to make the string balanced. # Example Input: `aabb` Output: `2` Input: `aaa` Output: `-1` In the first example, changing two \'a\'s to \'A\' results in \'AAabb\', which has 2 uppercase and 2 lowercase letters. In the second example, there\'s no way to balance the string since it has an odd length.","solution":"def min_to_uppercase_to_balance(s): Returns the minimum number of characters to make uppercase to balance the string. s : str : input string consisting of lowercase English letters Returns the minimum number of characters to convert to uppercase, or -1 if it\'s impossible. n = len(s) if n % 2 != 0: return -1 lower_count = len(s) upper_needed = n // 2 return upper_needed"},{"question":"Ella has developed a simplified task scheduling system to keep track of tasks that need to be executed and their dependencies. Each task is identified by a unique number from 1 to n, and some tasks depend on the completion of other tasks before they can start. Specifically, if task u depends on task v, it means task v must be completed before task u can begin. This creates a directed acyclic graph (DAG) of dependencies. Ella needs to determine the minimum number of days required to complete all tasks if each task takes exactly one day to complete and multiple tasks can be executed in parallel as long as their dependencies are satisfied. You are asked to write a program to help Ella find the minimum number of days required to complete all the tasks given the dependencies. The first line of input contains an integer n (1 ≤ n ≤ 2000) — the number of tasks. The second line contains an integer m (0 ≤ m ≤ 5000) — the number of dependencies. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that task u depends on task v. Output a single integer — the minimum number of days required to complete all the tasks. **Example:** **Input:** ``` 5 4 2 1 3 2 4 2 5 3 ``` **Output:** ``` 4 ``` **Explanation:** To complete all tasks: - On the first day, task 1 can be executed since it has no dependencies. - On the second day, task 2 can be executed as it depends only on task 1. - On the third day, tasks 3 and 4 can be executed as both depend only on task 2. - On the fourth day, task 5 can be executed as it depends on task 3. Thus, completing all tasks will take 4 days.","solution":"from collections import defaultdict, deque def min_days_to_complete_tasks(n, m, dependencies): # Create a graph representation with adjacency list and in-degree counter graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in dependencies: graph[v].append(u) in_degree[u] += 1 # Queue for nodes with zero in-degree queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append((i, 1)) # Topological sorting with level (day count) max_days = 0 while queue: node, level = queue.popleft() max_days = max(max_days, level) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append((neighbor, level + 1)) return max_days"},{"question":"In a distant land, there is a network of ancient wells connected by pipes. The network forms a tree structure with n wells, where each well is represented as a node and each pipe as an edge connecting two wells. One day, an archaeologist discovers that some wells are magical and can generate water. The archaeologist wants to optimize the water distribution by finding the minimum number of operations required to ensure that all wells in the network will either directly generate water or be connected by pipes to a well that generates water. Each well can undergo three types of operations: 1. Mark the well as a water generator. 2. Connect a well directly to another well with a new pipe. 3. Query the number of wells that directly generate water. The goal is to apply the minimum number of type 1 operations to achieve the above condition. The first line of input contains an integer n (1 ≤ n ≤ 200000) — the number of wells. The next n-1 lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi) — representing a pipe between well ai and well bi. The subsequent line contains an integer q (1 ≤ q ≤ 1000000) — the number of operations. Each of the following q lines contains two space-separated numbers ci and vi (1 ≤ ci ≤ 3, 1 ≤ vi ≤ n): - ci indicates the type of operation. - vi indicates the well on which the operation is performed. Operation types: - Type 1: Mark the well vi as a water generator. - Type 2: Connect well vi to another well with a new pipe. (Ignore this operation type for now, as it is not used in this task). - Type 3: Query the current number of wells marked as water generators. Print the minimum number of type 1 operations required. For each type 3 query, print the number of wells currently marked as water generators on a new line. You can assume that initially, no well is a water generator and no additional connections are made using type 2 operations.","solution":"class AncientWells: def __init__(self, n): self.n = n self.tree = [[] for _ in range(n + 1)] self.water_generators = [False] * (n + 1) self.marked_count = 0 def add_pipe(self, a, b): self.tree[a].append(b) self.tree[b].append(a) def mark_as_water_generator(self, well): if not self.water_generators[well]: self.water_generators[well] = True self.marked_count += 1 def count_water_generators(self): return self.marked_count def solve(n, pipes, operations): wells = AncientWells(n) for a, b in pipes: wells.add_pipe(a, b) result = [] for c, v in operations: if c == 1: wells.mark_as_water_generator(v) elif c == 3: result.append(wells.count_water_generators()) return result"},{"question":"Given an undirected graph with n nodes and m edges, find the number of connected components in the graph and the size of the largest connected component. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges in the graph, respectively. The next m lines contain two integers each, u and v (1 ≤ u, v ≤ n) representing an edge between node u and node v. Each pair of nodes are distinct, and there are no multiple edges. Output two integers: - The first integer should be the number of connected components in the graph. - The second integer should be the size of the largest connected component. Input: ``` 6 5 1 2 2 3 4 5 5 6 1 3 ``` Output: ``` 2 3 ``` Explanation: The graph has 2 connected components: 1. Component 1 includes nodes {1, 2, 3} of size 3. 2. Component 2 includes nodes {4, 5, 6} of size 3. The number of connected components is 2, and the size of the largest component is 3.","solution":"def find_connected_components(n, m, edges): from collections import defaultdict def dfs(node, visited, adj_list): stack = [node] size = 0 while stack: u = stack.pop() if not visited[u]: visited[u] = True size += 1 for neighbor in adj_list[u]: if not visited[neighbor]: stack.append(neighbor) return size adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) num_components = 0 max_component_size = 0 for node in range(1, n + 1): if not visited[node]: num_components += 1 component_size = dfs(node, visited, adj_list) max_component_size = max(max_component_size, component_size) return num_components, max_component_size # Example input for testing the function # Note: The function does not handle input parsing. Please handle input parsing separately. # n = 6, m = 5 # edges = [(1, 2), (2, 3), (4, 5), (5, 6), (1, 3)]"},{"question":"You are given an array of positive integers and a number k. You want to form a new array by selecting one element from each contiguous subarray of length k, such that the resulting array is non-decreasing. The test consists of multiple test cases. The first line contains a single integer t (1 le t le 1000) — the number of test cases. Next t lines contain descriptions of test cases. Each test case starts with two integers n and k (1 le k le n le 10^5), followed by an array of n positive integers. For each test case, output \\"YES\\" if it is possible to form such a non-decreasing array, otherwise output \\"NO\\". You can print each letter in any case (upper or lower). # Example Input: 1 6 3 1 3 2 4 5 6 Output: YES Explanation: One possible non-decreasing array is [1, 4]. Input: 1 4 2 4 3 2 1 Output: NO Explanation: It is not possible to form a non-decreasing array from any selection of contiguous subarrays of length 2.","solution":"def can_form_non_decreasing(t, test_cases): results = [] for n, k, arr in test_cases: possible = False for i in range(n - k + 1): sub_array = arr[i:i + k] if sub_array == sorted(sub_array): possible = True break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Reading input from user (commented out, assuming this will be run in a different environment) # t = int(input()) # test_cases = [] # for _ in range(t): # n, k = map(int, input().split()) # arr = list(map(int, input().split())) # test_cases.append((n, k, arr)) # results = can_form_non_decreasing(t, test_cases) # for result in results: # print(result)"},{"question":"Limak is studying a sequence that he generated. He calls this sequence \\"interesting\\" based on the following criteria: A sequence of integers a is interesting if the sum of its elements is divisible by its length. Given an integer n, Limak has written down a sequence of integers a_1, a_2, ldots, a_n on a piece of paper. He needs your help to determine if the sequence he has written down is interesting or not. The first line of input contains an integer n (1 le n le 10^6) representing the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) representing the elements of the sequence. Output \\"Yes\\" (without the quotes) if the sequence is interesting, or \\"No\\" otherwise. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` Yes ``` Input: ``` 4 -1 1 -1 1 ``` Output: ``` Yes ``` Input: ``` 3 1 2 4 ``` Output: ``` No ``` # Note In the first example, the sum of the elements is 1 + 2 + 3 + 4 + 5 = 15, which is divisible by the length of the sequence, 5, so the output is \\"Yes\\". In the second example, the sum of the elements is -1 + 1 - 1 + 1 = 0, which is divisible by the length of the sequence, 4, so the output is \\"Yes\\". In the third example, the sum of the elements is 1 + 2 + 4 = 7, which is not divisible by the length of the sequence, 3, so the output is \\"No\\".","solution":"def is_interesting(n, sequence): Returns \'Yes\' if the sum of the sequence is divisible by its length n, Otherwise, returns \'No\'. total_sum = sum(sequence) return \'Yes\' if total_sum % n == 0 else \'No\'"},{"question":"Two players are playing a game involving chocolate bars. There are two chocolate bars of size a times b and c times d respectively. The players take turns dividing one of the chocolate bars into two smaller non-empty rectangular pieces, either horizontally or vertically. The game is played such that the player who cannot make a move loses. Assuming both players play optimally, determine who would win the game if the first player starts. # Input The input consists of a single line containing four integers a, b, c, d (1 leq a, b, c, d leq 1000), representing the sizes of the two chocolate bars respectively. # Output If the first player is guaranteed to win, print \\"First\\" without the quotes. Otherwise, print \\"Second\\" without the quotes. # Examples Example 1 Input: ``` 2 3 4 5 ``` Output: ``` First ``` Example 2 Input: ``` 1 1 1 1 ``` Output: ``` Second ```","solution":"def who_wins(a, b, c, d): Determine who wins the chocolate game assuming both players play optimally. Parameters: a (int): Height of the first chocolate bar. b (int): Width of the first chocolate bar. c (int): Height of the second chocolate bar. d (int): Width of the second chocolate bar. Returns: str: \\"First\\" if the first player is guaranteed to win, \\"Second\\" otherwise. if (a == 1 and b == 1) and (c == 1 and d == 1): return \\"Second\\" return \\"First\\""},{"question":"Domino Tiles Placement You are given a rectangular grid of size m times n. The grid is initially filled with either \'.\' representing empty cells or \'#\' representing cells occupied by obstacles. You need to cover all the empty cells of the grid using 2 x 1 domino tiles. Domino tiles must be placed strictly within the grid without overlapping, and no tile can cover an obstacle cell. Write a program that determines if it is possible to cover all the empty cells with the given domino tiles. # Input - The first line contains two integers, m and n (1 le m, n le 1000) – the dimensions of the grid. - The following m lines contain n characters each, describing the grid. Each character is either \'.\' or \'#\'. # Output - Print \\"YES\\" if it is possible to cover all the empty cells using 2 x 1 domino tiles; otherwise, print \\"NO\\". # Example Input 1: ``` 3 4 .#.. .. ..#. ``` Output 1: ``` YES ``` Input 2: ``` 3 3 # #.# # ``` Output 2: ``` NO ``` # Note In the first example, it is possible to tile all the empty cells using 2 x 1 dominoes. In the second example, it is impossible as the middle row has a single empty cell which cannot be covered by a 2 x 1 domino.","solution":"def can_place_dominoes(m, n, grid): Determines if it\'s possible to cover all the empty cells with 2x1 dominoes. empty_cells = 0 for row in grid: empty_cells += row.count(\'.\') # All empty cells must be even to be fully covered by 2x1 dominos return \'YES\' if empty_cells % 2 == 0 else \'NO\'"},{"question":"In a coding competition, there are n participants who compete in m events. Each event gives a certain number of points to the participants based on their performance. The performance in each event is given as a list of scores where each score denotes the points received by the participants in that event. For example, if there are 4 participants and they compete in 3 events, we will have a 2D list where each sublist contains 4 integers (one for each participant). The goal is to find the total points for each participant after all events and determine the participant with the maximum points. If there is a tie (i.e., multiple participants have the highest score), print all the participant indices that have the highest score sorted in ascending order. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of participants and the number of events. The next m lines describe the scores for each event. Each line contains n integers representing the scores of the participants in that event. The score for the j-th participant in the i-th event is given as S[i][j] (0 ≤ S[i][j] ≤ 1000). Output the indices (1-based) of the participants with the maximum points, sorted in ascending order. **Example** Input: ``` 4 3 5 1 3 7 2 5 1 8 3 1 4 6 ``` Output: ``` 4 ``` Explanation: Participant 1 total score: 5 + 2 + 3 = 10 Participant 2 total score: 1 + 5 + 1 = 7 Participant 3 total score: 3 + 1 + 4 = 8 Participant 4 total score: 7 + 8 + 6 = 21 The participant with the highest score is participant 4.","solution":"def find_max_participants(n, m, scores): Returns the indices of the participants with the maximum points. Parameters: n (int): Number of participants. m (int): Number of events. scores (list of list of int): Scores of participants in each event. Returns: list: List of indices (1-based) of participants with the maximum points in ascending order. total_points = [0] * n for event_scores in scores: for i in range(n): total_points[i] += event_scores[i] max_points = max(total_points) max_participants = [i + 1 for i, points in enumerate(total_points) if points == max_points] return max_participants"},{"question":"You are given an integer array A of size n where 1 leq A_i leq n. Your task is to find out each integer from 1 to n and output the number of times each integer appears in the array. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). Description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n (1 le n le 10^5) — the size of the array. The second line contains n integers A_1, A_2, ldots, A_n (1 le A_i le n) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output for each test case should contain n integers, where the i-th integer is the count of the integer i in the array. # Example Input ``` 2 5 1 2 2 4 5 6 1 1 1 2 2 3 ``` Output ``` 1 2 0 1 1 3 2 1 0 0 0 ``` # Explanation In the first test case: - The integer 1 appears 1 time. - The integer 2 appears 2 times. - The integer 3 appears 0 times. - The integer 4 appears 1 time. - The integer 5 appears 1 time. Hence the output is `1 2 0 1 1`. In the second test case: - The integer 1 appears 3 times. - The integer 2 appears 2 times. - The integer 3 appears 1 time. - The integer 4 appears 0 times. - The integer 5 appears 0 times. - The integer 6 appears 0 times. Hence the output is `3 2 1 0 0 0`.","solution":"def count_integers(t, test_cases): results = [] for test_case in test_cases: n, A = test_case count = [0] * n for num in A: count[num - 1] += 1 results.append(count) return results"},{"question":"Bob is a huge fan of open-world adventure games. He particularly enjoys collecting various in-game items and storing them in his inventory, which can be represented as a sequence of integers a, where each integer represents the type of item. Bob wishes to know the length of the longest subarray that contains each type of item at most k times. Given an array of integers and a positive integer k, help Bob determine the maximum length of a subarray where no integer appears more than k times. # Input The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq n) — the length of the array and the maximum allowed frequency of any item in the subarray, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^4) — the types of items in Bob\'s inventory. # Output Print a single integer — the length of the longest subarray where no item appears more than k times. # Example Input ``` 7 2 1 2 1 2 1 3 3 ``` Output ``` 6 ``` Explanation: The subarray `[1, 2, 1, 2, 1, 3]` is the longest subarray where no number appears more than twice. Input ``` 5 1 4 5 4 4 5 ``` Output ``` 2 ``` Explanation: The subarray `[4, 5]` and any other equivalent subarray of length 2 are the longest subarrays where no number appears more than once.","solution":"def max_subarray_length(n, k, a): from collections import defaultdict count = defaultdict(int) left = 0 max_length = 0 for right in range(n): count[a[right]] += 1 while count[a[right]] > k: count[a[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers representing the heights of buildings. Each building has a certain height, and consecutive buildings are spaced one unit apart along a street. Your task is to count the number of \\"valleys\\" in the array. A \\"valley\\" is defined as an index i (1 ≤ i ≤ n) such that the height of the building at i is less than the heights of its adjacent buildings. Formally, a valley is an index i such that: ``` height[i - 1] > height[i] < height[i + 1] ``` where height[-1] and height[n+1] are considered to be infinitely high. The first line contains a single integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n integers height[1], height[2], ..., height[n] (1 ≤ height[i] ≤ 1000) — the heights of the buildings. Output a single integer, the number of valleys in the array. Example: ``` Input: 5 1 2 1 2 1 Output: 2 ``` In the first example, there are 2 valleys at indices 1 and 3 (1-based index), where the heights are 1.","solution":"def count_valleys(heights): Returns the number of valleys in the heights array. Args: - heights (list of int): The list of building heights. Returns: - int: The number of valleys in the array. n = len(heights) valley_count = 0 for i in range(1, n - 1): if heights[i - 1] > heights[i] < heights[i + 1]: valley_count += 1 return valley_count"},{"question":"You are given an integer array a of length n. You can perform the following operation on the array any number of times: - Choose an element of the array and either increase or decrease it by 1. Your goal is to make all elements of the array equal to the same value, minimizing the number of operations required. For example, if the array is [4, 1, 7, 10], you can do the following operations: - Increase 1 three times to 4 (3 operations). - Decrease 7 three times to 4 (3 operations). - Decrease 10 six times to 4 (6 operations). So the total number of operations is 3 + 3 + 6 = 12. Find the minimum number of operations needed to make all elements of the array equal. The first line of the input contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Print a single integer, the minimum number of operations needed to make all elements of the array equal.","solution":"def min_operations(arr): Returns the minimum number of operations needed to make all elements of the array equal. n = len(arr) arr.sort() median = arr[n // 2] return sum(abs(x - median) for x in arr)"},{"question":"In an ancient kingdom, there is a legendary chessboard of size n x n. Each cell of the chessboard either contains a jewel or not. The status of the chessboard is represented by an n x n matrix, where 1 indicates there is a jewel in the respective cell and 0 indicates there is no jewel. The King plans to tour the whole chessboard starting from the top-left corner (0,0) to the bottom-right corner (n-1, n-1). During each move, the King can only move either to the right cell or to the cell directly below the current one. The King wants to collect as many jewels as possible during this tour. You are tasked with finding the maximum number of jewels the King can collect during his tour. The first line contains one integer n (1 ≤ n ≤ 1000) — the size of the chessboard. Each of the next n lines contains n integers (either 0 or 1), representing the status of the chessboard. Print one integer — the maximum number of jewels the King can collect. For example: Input: 3 0 1 0 1 0 1 0 1 1 Output: 3 Explanation: In this example, an optimal path is down, down, right, right, collecting 3 jewels. Input: 4 1 0 0 1 0 1 1 0 0 0 1 0 1 1 0 1 Output: 5 Explanation: In this example, an optimal path is right, right, down, down, down, right, collecting 5 jewels.","solution":"def max_jewels(n, board): # Create a dp matrix to store the maximum jewels collected to each cell dp = [[0]*n for _ in range(n)] # Initialize the top-left corner dp[0][0] = board[0][0] # Fill top row for j in range(1, n): dp[0][j] = dp[0][j-1] + board[0][j] # Fill leftmost column for i in range(1, n): dp[i][0] = dp[i-1][0] + board[i][0] # Fill the rest of the dp matrix for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + board[i][j] return dp[n-1][n-1]"},{"question":"Mary is in charge of organizing a large number of files on a server. Each file has a unique identifier, and there are n unique files. Due to security concerns, Mary has to implement a complex renaming operation multiple times, and each operation can affect a specific range of files. The server supports the following types of batch operations: 1. Increment the identifiers of all files in a given range by a specific value. 2. Decrement the identifiers of all files in a given range by a specific value. 3. Set the identifiers of all files in a given range to a specific value. Mary wants to know the final state of the file identifiers after performing a series of these operations in sequence. The first line contains two integers n and q (1 ≤ n, q ≤ 300,000) - the number of files and the number of operations, respectively. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 10^9) - the initial identifiers of the files. Each of the next q lines contains an operation in one of the following forms: - \\"1 l r x\\" means increment the identifiers of all files from l to r (inclusive) by x. - \\"2 l r x\\" means decrement the identifiers of all files from l to r (inclusive) by x. - \\"3 l r x\\" means set the identifiers of all files from l to r (inclusive) to x. Note that indices are 1-based. After performing all q operations, print the final state of the file identifiers in a single line. For example: Input ``` 5 3 10 20 30 40 50 1 1 3 5 2 2 4 10 3 1 5 100 ``` Output ``` 100 100 100 100 100 ``` Explanation: - After the first operation: [15, 25, 35, 40, 50] - After the second operation: [15, 15, 25, 40, 50] - After the third operation: [100, 100, 100, 100, 100]","solution":"def final_file_identifiers(n, q, initial_identifiers, operations): # Convert 1-based index to 0-based index for easier manipulation in Python lists for op in operations: if op[0] == 1: # Increment operation for i in range(op[1] - 1, op[2]): initial_identifiers[i] += op[3] elif op[0] == 2: # Decrement operation for i in range(op[1] - 1, op[2]): initial_identifiers[i] -= op[3] elif op[0] == 3: # Set operation for i in range(op[1] - 1, op[2]): initial_identifiers[i] = op[3] return initial_identifiers"},{"question":"Paul loves painting and wants to paint all the walls in his new house. Each wall has a specific height and width. He bought a paint roller that can cover exactly one square meter with one liter of paint. However, Paul wants to make sure that he has enough paint without wasting too much. He also wants to buy the paint in integer liters. Given the dimensions of the walls, help Paul determine the minimum number of liters of paint he needs. The first line contains an integer n (1 ≤ n ≤ 100) — the number of walls. Each of the following n lines contains two space-separated integers hi and wi (1 ≤ hi, wi ≤ 1000), representing the height and width of the i-th wall in meters. Print a single integer — the minimum number of liters of paint Paul needs to buy to paint all the walls. Example: ``` Input: 3 3 4 2 5 1 10 Output: 31 ``` Explanation: The total area to paint is (3*4) + (2*5) + (1*10) = 12 + 10 + 10 = 32 square meters. Since Paul needs to buy paint in integer liters, he needs 32 liters of paint.","solution":"def minimum_paint_liters(n, dimensions): Calculate the minimum number of liters of paint Paul needs to buy given the number of walls and their dimensions. :param n: int - Number of walls :param dimensions: list of tuples - Each tuple contains two integers, the height and width of a wall :return: int - Minimum number of liters of paint needed total_area = 0 for height, width in dimensions: total_area += height * width return total_area"},{"question":"You are given two positive integers `x` and `y` (0 <= x, y <= 1000) which represent coordinates on a 2D plane. You can move one step in any of the four cardinal directions: up, down, left, or right. Each step reduces your “movement points” by one. You are also given an integer `M` (0 <= M <= 100) which represents the maximum number of movement points you can use. Your goal is to reach the origin (0, 0) from the given coordinates `(x, y)` using at most `M` movement points. Determine if it is possible to reach the origin within these constraints. # Input - The first line contains three integers `x`, `y`, and `M`. # Output - Print \\"YES\\" if you can reach the origin from `(x, y)` within `M` movement points, otherwise print \\"NO\\". # Example Input ``` 3 4 7 ``` Output ``` YES ``` Input ``` 2 2 3 ``` Output ``` NO ```","solution":"def can_reach_origin(x, y, M): Determines if it is possible to reach the origin (0, 0) from (x, y) within M movement points. Parameters: x (int): x-coordinate (0 <= x <= 1000) y (int): y-coordinate (0 <= y <= 1000) M (int): Maximum movement points (0 <= M <= 100) Returns: str: \\"YES\\" if it\'s possible to reach the origin, otherwise \\"NO\\". # Total distance needed to move to reach (0, 0) total_distance = x + y # Check if reachable within M points and if the parity (odd/even) matches if total_distance <= M and (M - total_distance) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an integer array and an integer k. You need to determine if you can partition the array into k non-empty subsets such that each subset\'s sum is equal. The first line contains two integers n (1 ≤ n ≤ 16) — the number of elements in the array, and k (1 ≤ k ≤ 16) — the number of subsets. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the elements of the array. Output \\"YES\\" if it is possible to partition the array into k subsets with equal sum. Otherwise, output \\"NO\\". Example: Input: 4 2 4 3 2 3 Output: YES In the example, we can partition the array [4, 3, 2, 3] into [4, 2] and [3, 3] both having sum 6. So the output is \\"YES\\".","solution":"from typing import List def can_partition_k_subsets(nums: List[int], k: int) -> bool: total_sum = sum(nums) if total_sum % k != 0: return False target = total_sum // k n = len(nums) nums.sort(reverse=True) buckets = [0] * k def backtrack(index): if index == n: return all(bucket == target for bucket in buckets) for i in range(k): if buckets[i] + nums[index] <= target: buckets[i] += nums[index] if backtrack(index + 1): return True buckets[i] -= nums[index] if buckets[i] == 0: # Prune the search: if the current bucket is 0, don\'t try further. break return False return backtrack(0) def partition_possible(n: int, k: int, array: List[int]) -> str: if can_partition_k_subsets(array, k): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a forest consisting of n nodes (1 through n) and n-1 edges. Each node has a strength value associated with it. A node can conquer another node if the strength value of the former is greater than or equal to the strength value of the latter. Your task is to determine if there exists a node in the forest that can conquer all other nodes, and if so, identify the node. Input: - The first line of the input contains an integer t (1 le t le 10) — the number of test cases. - For each test case: - The first line contains an integer n (2 le n le 100,000), the number of nodes in the forest. - The second line contains n integers s_1, s_2, ..., s_n (1 le s_i le 10^9), where s_i is the strength value of the i-th node. - Each of the next n-1 lines contains two integers u and v (1 le u, v le n, u neq v) indicating that there is an edge between the nodes u and v. For each test case, output: - The integer representing the node number that can conquer all other nodes. - If no such node exists, output -1. Example: Input: ``` 2 4 10 5 8 9 1 2 2 3 2 4 3 7 3 3 1 2 1 3 ``` Output: ``` 1 1 ``` Explanation: - In the first test case, node 1 with strength 10 can conquer nodes 2, 3, and 4. - In the second test case, node 1 with strength 7 can conquer nodes 2 and 3. Even though node 2 and node 3 have the same strength, node 1\'s strength is higher.","solution":"def find_conqueror_node(t, test_cases): results = [] for tc in test_cases: n, strengths, edges = tc max_strength = max(strengths) candidate_nodes = [i + 1 for i, strength in enumerate(strengths) if strength == max_strength] if len(candidate_nodes) == 1: results.append(candidate_nodes[0]) else: results.append(-1) return results def process_input(input_text): input_lines = input_text.strip().split(\'n\') t = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(t): n = int(input_lines[idx]) strengths = list(map(int, input_lines[idx + 1].split())) edges = [] for i in range(n - 1): u, v = map(int, input_lines[idx + 2 + i].split()) edges.append((u, v)) test_cases.append((n, strengths, edges)) idx += n + 1 return t, test_cases # Read the input def main(input_text): t, test_cases = process_input(input_text) results = find_conqueror_node(t, test_cases) return results input_data = \'\'\'2 4 10 5 8 9 1 2 2 3 2 4 3 7 3 3 1 2 1 3 \'\'\' print(main(input_data))"},{"question":"Marc loves playing with arrays. He recently devised a game where he transforms an array to another array of the same size by following a set of operations. Given an array of integers, Marc can perform the following operations any number of times: 1. Pick an integer `x` from the array and replace it with `x-1` or `x+1`. He is interested in knowing the minimum number of operations required to make the array elements equal. Help Marc by writing a program that outputs the minimum number of operations required. **Input:** - The first line contains an integer `n` (1 le n le 100) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (-10^3 le ai le 10^3) — the elements of the array. **Output:** - Print one integer — the minimum number of operations required to make all the array elements equal. **Example:** Input: ``` 3 1 3 2 ``` Output: ``` 2 ``` Explanation: In the given example, you can transform the array `[1, 3, 2]` to `[2, 2, 2]` with 2 operations. Specifically: - Increment `1` to `2` (1 operation). - Decrement `3` to `2` (1 operation).","solution":"def min_operations_to_equal_elements(n, arr): Calculate the minimum number of operations required to make all array elements equal. Parameters: n (int): the number of elements in the array arr (list): the array of integers Returns: int: the minimum number of operations median = sorted(arr)[n // 2] return sum(abs(x - median) for x in arr)"},{"question":"Sherlock is investigating a case and is given a list of integers representing the footprints left by a suspect. He believes that the suspect follows a specific pattern which he needs to identify. Sherlock suspects that the footprints represent a sequence where each number after the first is a multiple of the previous one. However, the sequence might be broken due to noisy data, where some numbers do not follow this pattern. Sherlock\'s task is to find the length of the longest contiguous subsequence within the list that adheres to the pattern where each number after the first is a multiple of the previous one. The first line of input contains an integer n (1 ≤ n ≤ 10^5) representing the number of footprints. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the footprints. Output a single integer - the length of the longest contiguous subsequence that follows the pattern described above. # Example Input: ``` 7 3 6 12 36 6 18 54 ``` Output: ``` 4 ``` Input: ``` 5 5 10 2 20 40 ``` Output: ``` 3 ``` # Explanation In the first example, the longest contiguous subsequence that adheres to the pattern is [3, 6, 12, 36], having a length of 4. In the second example, the longest contiguous subsequence is [2, 20, 40], having a length of 3.","solution":"def longest_contiguous_multiple_subsequence(n, footprints): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if footprints[i] % footprints[i-1] == 0: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Bob loves to create various shapes using asterisks (\'*\') on a grid. Recently, he decided to make a diamond shape. Given an integer n, you are to help him draw a diamond with asterisks centered on a grid with dimensions (2n-1) by (2n-1). For example, if n = 3, the diamond would look like this: ``` * *** ***** *** * ``` The first line of input contains a single integer n (1 ≤ n ≤ 50), representing the height (and half-width) of the diamond. Output the diamond pattern, with each row on a new line. The diamond should be centered and symmetric. # Example: Input 1: 3 Output 1: ``` * *** ***** *** * ``` Input 2: 5 Output 2: ``` * *** ***** ******* ********* ******* ***** *** * ``` Write a function `generate_diamond(n: int) -> List[str]` that returns the diamond pattern as a list of strings, where each string represents a row of the diamond. You will then need to print each row to display the diamond.","solution":"def generate_diamond(n: int) -> list: Generates a diamond shape centered on a grid with dimensions (2n-1) by (2n-1). Parameters: n (int): Height (and half-width) of the diamond. Returns: list: A list of strings where each string represents a row of the diamond. diamond = [] max_width = 2 * n - 1 # Generate the top half of the diamond including the middle row for i in range(n): stars = \'*\' * (2 * i + 1) row = stars.center(max_width) diamond.append(row) # Generate the bottom half of the diamond excluding the middle row for i in range(n-2, -1, -1): stars = \'*\' * (2 * i + 1) row = stars.center(max_width) diamond.append(row) return diamond"},{"question":"A company has several events scheduled over the next few weeks, and they want to ensure that they have adequate resources to cover them. Each event has a start time and an end time, and the company has a limited number of resources. The company organizes these events so that no two events with overlapping times can be covered by the same resource. Given the start and end times of the events, the company\'s goal is to determine the minimum number of resources required to cover all events without any overlap. All times are in a 24-hour format and events do not overlap within the same time window. The first line contains an integer n (1 le n le 10^5) — the number of events. The next n lines each contain two integers start_i and end_i (0 le start_i < end_i le 1440), representing the start and end times of the i-th event in minutes after midnight. Print a single integer — the minimum number of resources required to cover all events. For example, if there are three events with the following start and end times: - Event 1: 60 minutes to 120 minutes - Event 2: 90 minutes to 180 minutes - Event 3: 150 minutes to 240 minutes The output should be: 2 Explanation: - One resource can cover Event 1 and Event 3. - Another resource is needed to cover Event 2.","solution":"def min_resources(n, events): Given start and end times of events, determine the minimum number of resources required to cover all events without any overlap. Parameters: n (int): The number of events. events (List[Tuple[int, int]]): A list of tuples where each tuple consists of two integers representing the start and end time of an event. Returns: int: The minimum number of resources required. # Create a list to keep track of the start and end times separately with markers (+1 for start, -1 for end) times = [] for start, end in events: times.append((start, +1)) times.append((end, -1)) # Sort events by time, if the times are the same, process ends before starts times.sort(key=lambda x: (x[0], x[1])) max_resources = 0 current_resources = 0 # Traverse through the times list to calculate the number of concurrent events for time, change in times: current_resources += change if current_resources > max_resources: max_resources = current_resources return max_resources"},{"question":"A certain ancient temple has a unique magical security mechanism. The temple is guarded by a single high wall with a magical door that only opens if you provide the right key. The wall is guarded by intricate carvings that describe the exact sequence to retrieve the key. The sequence is a string consisting of different types of brackets: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. A well-formed sequence requires each opening bracket to have a corresponding closing bracket of the same type, and the pairs should be properly nested. You have been given the task to determine whether the string provided is a valid sequence of brackets. The first and only line of input contains a single string s (1 ≤ |s| ≤ 10^4), which represents the sequence of brackets. Output \\"YES\\" if the sequence is valid, otherwise output \\"NO\\". Examples: ``` Input: ()[]{} Output: YES Input: ([)] Output: NO Input: ({[()()]}) Output: YES ``` Explanation: 1. The first example is a valid sequence with brackets properly nested. 2. The second example is not valid due to mismatched brackets. 3. The third example is valid as all brackets are properly nested and matched.","solution":"def is_valid_sequence(s): Determine if the sequence of brackets is valid. Parameters: s (str): Input sequence of brackets. Returns: str: \\"YES\\" if the sequence is valid, \\"NO\\" otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): # If it\'s an opening bracket, push onto the stack. stack.append(char) elif char in bracket_map.keys(): # If it\'s a closing bracket, pop from the stack and check. if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" # If stack is empty, then all opening brackets had matching closing brackets. return \\"YES\\" if not stack else \\"NO\\""},{"question":"The city of Graphland consists of n cities and m two-way roads. The mayor wants to evaluate the connectivity of the city under the assumption that some roads may be closed for maintenance. For this purpose, you are to determine how many connected components the city will be divided into if certain roads are closed. You need to help the mayor by writing a program that answers multiple queries about the city’s connectivity. The first line contains two integers n (1 le n le 10^5) — the number of cities in Graphland, and m (1 le m le 2 cdot 10^5) — the number of roads. The next m lines describe the roads. Each line contains two integers u and v (1 le u, v le n; u neq v) — the identifiers of the cities that the road connects. Then, the next line contains an integer q (1 le q le 10^5) — the number of queries. Finally, q lines follow, each describing a query. Each query contains an integer k (1 le k le n) and a list of k integers — the road identifiers that will be closed in the query. The road identifiers are given in the order they appear in the input. For each query, print the number of connected components Graphland will be divided into after closing the specified roads. Consider the example: Graphland has 5 cities and 4 roads connecting the cities. If we close road 1 and 2, the number of connected components will be 3.","solution":"from collections import defaultdict def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): x_root = find_parent(parent, x) y_root = find_parent(parent, y) if x_root != y_root: if rank[x_root] < rank[y_root]: parent[x_root] = y_root elif rank[x_root] > rank[y_root]: parent[y_root] = x_root else: parent[y_root] = x_root rank[x_root] += 1 def number_of_components(n, m, roads, q, queries): results = [] for query in queries: parent = list(range(n + 1)) rank = [0] * (n + 1) blocked = set(query[1]) for i in range(1, m + 1): if i not in blocked: u, v = roads[i - 1] union(parent, rank, u, v) separated_roots = set() for i in range(1, n + 1): separated_roots.add(find_parent(parent, i)) results.append(len(separated_roots)) return results"},{"question":"You are given a tree with n vertices rooted at vertex 1. Each vertex initially contains an integer value. You can perform two types of operations: 1. Update the value at a specific vertex. 2. Query the sum of all values in the subtree rooted at a specific vertex. The first line contains two integers n (1 le n le 10^5) — the number of vertices in the tree. The second line contains n integers — the initial values on the vertices. The next n-1 lines contain two integers each, denoting an edge between two vertices in the tree. The following line contains a single integer q (1 le q le 10^5) – the number of operations. Each of the next q lines contains an operation in one of the following two formats: - `1 u x` – update the value at vertex u to x. - `2 u` – query the sum of values in the subtree rooted at vertex u. Output the results of all queries. Example: Input: ``` 5 2 1 3 6 4 1 2 1 3 2 4 2 5 4 2 1 1 3 5 2 1 ``` Output: ``` 16 18 ``` Explanation: - First query asks for the sum of the subtree rooted at vertex 1, which initially contains `2 + 1 + 3 + 6 + 4 = 16`. - Then we update the value at vertex 3 to 5. - The second query again asks for the sum of the subtree rooted at vertex 1, now the values are `2 + 1 + 5 + 6 + 4 = 18`.","solution":"class Tree: def __init__(self, n, values, edges): self.n = n self.values = values self.graph = [[] for _ in range(n + 1)] for u, v in edges: self.graph[u].append(v) self.graph[v].append(u) self.subtree_sum = [0] * (n + 1) self.parent = [-1] * (n + 1) self.build_tree(1) self.calculate_subtree_sums(1) def build_tree(self, node, par=-1): self.parent[node] = par for neighbor in self.graph[node]: if neighbor != par: self.build_tree(neighbor, node) def calculate_subtree_sums(self, node): self.subtree_sum[node] = self.values[node - 1] for neighbor in self.graph[node]: if neighbor != self.parent[node]: self.calculate_subtree_sums(neighbor) self.subtree_sum[node] += self.subtree_sum[neighbor] def update(self, u, x): # Calculate the difference diff = x - self.values[u - 1] # Update value at node self.values[u - 1] = x # Propagate the difference to all ancestors node = u while node != -1: self.subtree_sum[node] += diff node = self.parent[node] def query(self, u): return self.subtree_sum[u] def solve(n, values, edges, q, operations): tree = Tree(n, values, edges) results = [] for operation in operations: if operation[0] == 1: _, u, x = operation tree.update(u, x) elif operation[0] == 2: _, u = operation results.append(tree.query(u)) return results"},{"question":"You are given a string consisting of lowercase letters. You are allowed to perform only one type of operation: choose any two adjacent characters in the string and replace them with a single character which is their cyclic predecessor. Each letter follows the cyclic order: \'a\' -> \'z\', \'b\' -> \'a\', \'c\' -> \'b\', ..., \'z\' -> \'y\'. For instance, the string \\"abc\\" can be transformed to \\"bac\\" by applying one operation on \\"ab\\" to get \\"b\\" and then on \\"c\\" since \\"a\\" is the predecessor of \\"b\\". Your goal is to determine the minimum number of such operations required to transform the given string into a string where no two adjacent characters are the same. The first line of the input contains one integer t (1 ≤ t ≤ 100) - the number of test cases. The next t lines describe the test cases. Each test case is given on a separate line as a string s (1 ≤ |s| ≤ 100). For each test case, print the minimum number of operations required to achieve the desired transformation. Example: Input: 3 aab abbac xyzx Output: 1 2 0 Explanation: - In the first case, \\"aab\\" can be converted to \\"ab\\" by applying the operation on \\"aa\\". - In the second case, \\"abbac\\" can be converted to \\"ac\\" by applying the operation on \\"bb\\" resulting in \\"aac\\" and then on \\"aa\\" resulting in \\"ac\\". - In the third case, \\"xyzx\\" does not have any adjacent characters that are the same, so no operations are needed.","solution":"def min_operations_to_remove_adjacent_duplicates(t, cases): def cyclic_predecessor(c): return chr((ord(c) - ord(\'a\') - 1) % 26 + ord(\'a\')) def min_operations_for_string(s): n = len(s) if n <= 1: return 0 operations = 0 i = 1 while i < n: if s[i] == s[i - 1]: new_char = cyclic_predecessor(s[i]) # Update the string, replacing the adjacent duplicate s = s[:i-1] + new_char + s[i+1:] operations += 1 n -= 1 i = max(i - 2, 1) # check previous elements as well, after shrinking the string size else: i += 1 return operations results = [] for case in cases: results.append(min_operations_for_string(case)) return results"},{"question":"Jenna is a software developer working on a new project to format text in a more readable manner. One important aspect she needs to handle is the indentation of lines within a block of text. Each line should be indented by a number of spaces equal to its position in the block, starting from 0 for the first line, 1 for the second line, and so on. You are tasked to help Jenna by writing a function that takes an list of strings and returns the list of strings with the proper indentation applied. Each string in the input represents one line of the text block. # Input: - The input consists of a single integer n (1 ≤ n ≤ 1000) — the number of lines in the text block. - Each of the next n lines contains a non-empty string of length at most 100, representing one line of the text block. # Output: - Output n lines, each being the properly indented version of the corresponding input line. # Example: Input: ``` 4 Hello world This is a test Indented text block Proper formatting is key ``` Output: ``` Hello world This is a test Indented text block Proper formatting is key ``` Explanation: - Line 1 has no space indent. - Line 2 has 1 space indent. - Line 3 has 2 spaces indent. - Line 4 has 3 spaces indent.","solution":"def indent_text(n, lines): Indents each line in the list \'lines\' by its position in the list. Parameters: n (int): Number of lines lines (list of str): List of strings to be indented Returns: list of str: List of indented strings indented_lines = [] for i in range(n): indented_lines.append(\' \' * i + lines[i]) return indented_lines"},{"question":"You are given an array of distinct integers and a target integer. Your task is to find two numbers from the array whose difference equals the target integer. The input consists of multiple lines. The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9) — the number of elements in the array and the target integer. The second line contains n distinct integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print two integers x and y such that x - y equals the target integer. If there are multiple valid pairs, print any of them. If no such pair exists, print \\"No pair found\\". Example 1: Input: 5 3 1 7 5 9 2 Output: 5 2 Example 2: Input: 4 10 1 2 3 4 Output: No pair found","solution":"def find_pair_with_difference(arr, target): Finds two numbers in the array whose difference equals the target integer. num_set = set(arr) for num in arr: if num - target in num_set: return num, num - target return \\"No pair found\\" # Wrapper function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) arr = list(map(int, data[2:2+n])) result = find_pair_with_difference(arr, target) if result == \\"No pair found\\": print(result) else: print(result[0], result[1])"},{"question":"In a mysterious language, there are n distinct words and m rules for rearranging these words. Each rule specifies a pair of words and the order they should appear relative to each other in any valid sentence. Given these rules, determine if it is possible to arrange all the words into a single valid sentence where all the rules are satisfied. A valid sentence should contain all n words exactly once and must comply with the relative ordering given by the m rules. The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of distinct words and the number of ordering rules. The next n lines contain one word each, representing the list of distinct words. Words are non-empty strings of lowercase English letters, each with a length of at most 100. The next m lines contain two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), indicating that the i-th rule specifies that word ui should appear before word vi. If there exists a valid sentence that satisfies all the rules, print the sentence with the words separated by spaces. If there are multiple valid sentences, print any of them. If no valid sentence exists, print \\"Impossible\\". # Examples **Input:** ``` 4 3 apple banana cherry date 1 2 2 3 3 4 ``` **Output:** ``` apple banana cherry date ``` **Input:** ``` 3 2 apple banana cherry 1 3 2 3 ``` **Output:** ``` apple banana cherry ``` **Input:** ``` 3 3 apple banana cherry 1 2 2 3 3 1 ``` **Output:** ``` Impossible ``` # Note In the first example, the words can be arranged in the order: \\"apple banana cherry date\\", which satisfies all the given rules (1 before 2, 2 before 3, and 3 before 4). In the third example, it is impossible to arrange the words such that word 1 comes before word 2, word 2 before word 3, and word 3 before word 1, implying a cycle in the rules, and hence the output is \\"Impossible\\".","solution":"from collections import defaultdict, deque def find_valid_sentence(n, m, words, rules): # Graph to store the order relationships graph = defaultdict(list) indegree = [0] * n # Store the in-degree of each word (number of edges pointing to the node) # Build the graph and populate the in-degree array for u, v in rules: graph[u-1].append(v-1) indegree[v-1] += 1 # Queue to perform the topological sort queue = deque() # Start with all nodes with 0 in-degree for i in range(n): if indegree[i] == 0: queue.append(i) # List to store the result order order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If the order does not contain all the words, it means there\'s a cycle if len(order) != n: return \\"Impossible\\" # Convert indices back to words sentence = \\" \\".join([words[i] for i in order]) return sentence"},{"question":"Sophie wants to reorganize her bookshelf. She has n books, each identified by a unique integer from 1 to n. Each book has a different height from 1 to n. She wants to arrange the books in such a way that the absolute difference in height between any two consecutive books is at most 1. Your task is to find out if it is possible to arrange her books in the way Sophie wants. If it is possible to arrange the books according to the rules, output \\"YES\\" and one arrangement that satisfies the requirement. If it is not possible, output \\"NO\\". The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of books. Output \\"YES\\" and a sequence of n numbers representing the heights of the books in the order they should be placed on the shelf. If multiple arrangements are possible, you may output any of them. If it is not possible to arrange the books, output \\"NO\\". # Example 1 **Input:** ``` 3 ``` **Output:** ``` YES 1 2 3 ``` # Example 2 **Input:** ``` 4 ``` **Output:** ``` YES 1 2 3 4 ``` # Example 3 **Input:** ``` 2 ``` **Output:** ``` YES 1 2 ``` # Example 4 **Input:** ``` 5 ``` **Output:** ``` NO ``` # Explanation - In the first example, books can be arranged in the order `[1, 2, 3]`, where the absolute difference between any two consecutive heights is 1. - In the second example, one possible valid arrangement is `[1, 2, 3, 4]`. - In the third example, books can be arranged in the order `[1, 2]`, where the absolute difference in height between book 1 and book 2 is 1. - In the fourth example, it is impossible to arrange the books such that the absolute difference between the heights of consecutive books is at most 1.","solution":"def organize_books(n): Given the number of books n, this function determines whether the books can be arranged such that the absolute difference in height between any two consecutive books is at most 1. If possible, it returns \\"YES\\" and a valid arrangement. Otherwise, it returns \\"NO\\". if n == 1: return \\"YES\\", [1] elif n == 2: return \\"YES\\", [1, 2] elif n % 2 != 0: return \\"NO\\", [] else: return \\"YES\\", list(range(1, n + 1))"},{"question":"You are given a grid-based city with dimensions n times m (where 1 ≤ n, m ≤ 300). From any cell in the grid (i, j), you can move to the neighboring cells in the directions left, right, up, and down. Some of the cells are blocked and cannot be entered. You are given the coordinates of your starting position and your goal position in the city. Your task is to find the shortest path from the starting position to the goal position, avoiding the blocked cells. If there is no possible path, return -1. The first line of the input contains two integers, n and m, representing the dimensions of the grid. The next n lines each contain m characters. Each character describes a cell in the grid which can be either \'.\' (free cell) or \'#\' (blocked cell). The following line contains two integers, sx and sy, representing the coordinates of the starting cell (1-indexed). The last line contains two integers, gx and gy, representing the coordinates of the goal cell (1-indexed). Output the minimum number of moves required to reach the goal cell from the starting cell. If no such path exists, print -1. # Example Input ``` 5 5 ..... ..#.. .#... ....# ..... 1 1 5 5 ``` Output ``` 8 ``` Input ``` 3 3 .#. # .#. 1 1 3 3 ``` Output ``` -1 ``` The first example represents a 5x5 grid city with unobstructed cells and a few blocked cells. The shortest path from position (1,1) to (5,5) requires 8 moves. The second example represents a 3x3 grid city where no path exists from the start to the goal position.","solution":"from collections import deque def shortest_path(n, m, grid, start, goal): Returns the shortest path from start to goal in a grid-based city avoiding blocked cells. If no path exists, returns -1. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] sx, sy = start[0] - 1, start[1] - 1 gx, gy = goal[0] - 1, goal[1] - 1 if not is_valid(sx, sy) or not is_valid(gx, gy): return -1 queue = deque([(sx, sy)]) visited = [[False] * m for _ in range(n)] visited[sx][sy] = True distance = [[0] * m for _ in range(n)] while queue: x, y = queue.popleft() if (x, y) == (gx, gy): return distance[gx][gy] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: queue.append((nx, ny)) visited[nx][ny] = True distance[nx][ny] = distance[x][y] + 1 return -1"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a positive integer weight. The graph may not be connected. Your task is to determine the minimum spanning tree (MST) for each connected component of the graph and then compute the total weight of all these minimum spanning trees. # Input The first line of input contains two integers n and m (1 le n le 10^5, 0 le m le 2 cdot 10^5) — the number of vertices and the number of edges, respectively. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, u neq v, 1 le w le 10^6), where (u, v) is an edge between vertices u and v with weight w. # Output Output a single integer — the sum of the weights of the minimum spanning trees of all connected components of the graph. # Examples Example 1 **Input:** ``` 4 3 1 2 1 2 3 2 3 4 3 ``` **Output:** ``` 6 ``` **Explanation:** The graph consists of a single connected component. The minimum spanning tree of this component includes the edges (1, 2), (2, 3), and (3, 4) with a total weight of 1 + 2 + 3 = 6. Example 2 **Input:** ``` 5 3 1 2 1 3 4 2 4 5 3 ``` **Output:** ``` 6 ``` **Explanation:** The graph consists of two connected components. The first component\'s MST includes the edge (1, 2) with a total weight of 1. The second component\'s MST includes the edges (3, 4) and (4, 5) with a total weight of 2 + 3 = 5. Therefore, the sum of the weights is 1 + 5 = 6. Example 3 **Input:** ``` 6 4 1 2 4 2 3 6 4 5 5 5 6 3 ``` **Output:** ``` 18 ``` **Explanation:** The graph consists of two connected components. The first component\'s MST includes the edges (1, 2) and (2, 3) with a total weight of 4 + 6 = 10. The second component\'s MST includes the edges (4, 5) and (5, 6) with a total weight of 5 + 3 = 8. Therefore, the sum of the weights is 10 + 8 = 18.","solution":"class UnionFind: Union-Find data structure implementation with path compression and union by rank. def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def calculate_total_mst_weight(n, edges): Calculate the total weight of the minimum spanning trees of all connected components. uf = UnionFind(n) edges.sort(key=lambda x: x[2]) total_mst_weight = 0 for u, v, w in edges: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) total_mst_weight += w return total_mst_weight"},{"question":"Given a sequence of integers, the \\"latest unique number\\" is defined as the last (in terms of appearance) integer in the sequence that appears exactly once. If no such number exists, the result is -1. Write a program to find the latest unique number in a sequence. # Input The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) representing the number of integers in the sequence. The second line contains `n` integers separated by spaces, representing the sequence. # Output Print a single integer — the latest unique number in the sequence. If there is no such number, print `-1`. # Example Input ``` 7 4 5 2 5 2 3 4 ``` Output ``` 3 ``` Input ``` 4 1 2 2 1 ``` Output ``` -1 ``` # Notes In the first example, the latest unique number in the sequence is `3`, as it appears exactly once and is the last occurrence of any such number. In the second example, there is no number that appears exactly once, so the output is `-1`.","solution":"def latest_unique_number(n, nums): Returns the latest unique number in the sequence. If no unique number exists, returns -1. from collections import defaultdict count = defaultdict(int) # Count occurrences of each number for num in nums: count[num] += 1 # Find the latest element with exactly one occurrence for num in reversed(nums): if count[num] == 1: return num return -1"},{"question":"You are tasked with automating the process of managing tickets for events at a theater. The theater issues tickets for different types of events, and each ticket has a unique identifier. Sometimes tickets are unavailable or canceled, and the system needs to handle these situations efficiently. Your task is to write a program that processes a series of ticket management commands. The commands are: 1. \\"issue X\\" - Issue a new ticket with identifier X. If the identifier X is already issued and not canceled, ignore this command. 2. \\"cancel X\\" - Cancel the ticket with identifier X. If the ticket was not issued, ignore this command. 3. \\"check X\\" - Check if the ticket with identifier X is still valid (issued and not canceled). Output \\"1\\" if the ticket is valid, otherwise output \\"0\\". Commands are given in the order they need to be executed. Each command operates in constant time. Input: The first line contains a single integer n (1 ≤ n ≤ 10^6), representing the number of commands. The next n lines each contain a command in one of the formats described above. The ticket identifier X is a positive integer (1 ≤ X ≤ 10^9). Output: For each \\"check X\\" command, output either \\"1\\" or \\"0\\" on a new line, indicating whether the ticket with identifier X is valid. Example: ``` Input: 6 issue 123 issue 456 check 123 cancel 123 check 123 check 789 Output: 1 0 0 ``` In the example, the commands are processed as follows: 1. Issue ticket 123. 2. Issue ticket 456. 3. Check ticket 123 -> valid. 4. Cancel ticket 123. 5. Check ticket 123 -> not valid. 6. Check ticket 789 -> not valid (never issued).","solution":"def process_ticket_management(commands): issued_tickets = set() canceled_tickets = set() results = [] for command in commands: operation, x = command.split() x = int(x) if operation == \\"issue\\": if x not in issued_tickets: issued_tickets.add(x) elif operation == \\"cancel\\": if x in issued_tickets: issued_tickets.remove(x) canceled_tickets.add(x) elif operation == \\"check\\": if x in issued_tickets and x not in canceled_tickets: results.append(\\"1\\") else: results.append(\\"0\\") return results"},{"question":"During a large festival, a group of friends decides to play a game involving sequences of balloons. Each balloon has a unique identifier consisting of exactly six letters, and they want to determine how many sequences of balloons can be uniquely identified under certain conditions. You are given a list of balloon identifiers, each exactly six letters long. The friends need to know how many sequences of exactly three balloons can be formed such that any sequence is uniquely identifiable even if at most one letter in each balloon identifier is mistaken. Write a program that outputs the number of such unique sequences. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of balloon identifiers. - Each of the following n lines contains a unique identifier of exactly six lowercase letters. Output: - Print the number of sequences of exactly three balloons that can be uniquely identified even if at most one letter in each identifier is a mistake. Example: Input: 4 abcdef abcdeg abcxyz abcxyz Output: 3 Explanation: The possible sequences of three balloons are as follows: - (\\"abcdef\\", \\"abcdeg\\", \\"abcxyz\\") - (\\"abcdef\\", \\"abcxyz\\", \\"abcxyz\\") - (\\"abcdeg\\", \\"abcxyz\\", \\"abcxyz\\") All these sequences can be uniquely identified if at most one letter in each identifier is mistaken.","solution":"from itertools import combinations def count_unique_sequences(n, identifiers): sequences = list(combinations(identifiers, 3)) return len(set(sequences)) def parse_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) identifiers = data[1:] return n, identifiers if __name__ == \\"__main__\\": n, identifiers = parse_input() print(count_unique_sequences(n, identifiers))"},{"question":"Anna loves to collect unique items from her travel adventures. Each item has a unique identifier between 1 and n. Her collection can be represented using a list of integers where each integer represents an item. Anna has recently acquired new items and wants to merge them into her existing collection. Each item can appear only once in the merged collection, and the order of the items in the collection doesn\'t matter. Anna knows that she can merge multiple collections together, but she wants to do it efficiently. Given Anna’s current collection and a list of new items she wants to merge, help her determine the final collection. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of items in Anna\'s current collection. - The second line contains n unique integers representing Anna\'s current collection. - The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of items in the list of new items. - The fourth line contains m integers representing the new items. Output: - Print the items in the final collection in any order. Each item should appear only once. Example: ``` Input: 5 1 2 3 4 5 3 3 6 7 Output: 1 2 3 4 5 6 7 ``` Explanation: Anna\'s current collection contains items [1, 2, 3, 4, 5]. The new items are [3, 6, 7]. After merging, the final collection is [1, 2, 3, 4, 5, 6, 7] where item 3 is not duplicated. Note: - The order in which the items are printed in the output does not matter. - Your solution should prioritize efficiency due to the potentially large sizes of the input collections.","solution":"def merge_collections(current_collection, new_items): Merges the current collection of items with the new items, ensuring all items are unique. Args: current_collection (list of int): List of integers representing current collection. new_items (list of int): List of integers representing new items to be merged. Returns: list of int: The merged collection with unique items. merged_set = set(current_collection).union(new_items) return list(merged_set)"},{"question":"The Berbank Corporation seeks to implement a new backup data management system for their servers. They have n servers, and each server can communicate directly with one or more other servers through a total of m bidirectional cables. Each cable between servers ensures data replication for disaster recovery purposes. A disaster recovery plan is good if the data on any server can be directly replicated to any other server through a series of connected servers. However, for enhanced security, data should not pass through the same cable more than once in any replication journey. The plan is considered invalid if any cable or server forms part of a cycle in the replication path. Given the structure of the servers and connections, you are required to determine whether the current server arrangement supports a valid disaster recovery plan. If it’s possible, output \\"YES\\". Otherwise, output \\"NO\\". The first line of input contains two integers n and m (1 ≤ n ≤ 2000, 0 ≤ m ≤ 10000) — the number of servers and the number of cables, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) which indicate that there is a bidirectional cable connecting server u and server v. Your task is to determine whether the servers can be arranged such that starting from any server, you can replicate data to any other server without passing through any cable more than once, and without forming any cycles. Input format: ``` n m u1 v1 u2 v2 ... um vm ``` Output format: ``` YES or NO ``` Example 1: ``` Input: 4 4 1 2 2 3 3 4 4 1 Output: NO ``` Example 2: ``` Input: 6 5 1 2 2 3 3 4 4 5 5 6 Output: YES ```","solution":"def is_valid_disaster_plan(n, m, connections): from collections import defaultdict def dfs(v): state[v] = 1 # visiting for u in graph[v]: if state[u] == 0: # unvisited parent[u] = v if not dfs(u): return False elif state[u] == 1 and u != parent[v]: # cycle found return False state[v] = 2 # visited return True if n == 0: return \\"NO\\" if m == 0: return \\"YES\\" # if no cables, every server is isolated and trivial case graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) state = [0] * (n + 1) parent = [-1] * (n + 1) for v in range(1, n + 1): if state[v] == 0: # unvisited if not dfs(v): return \\"NO\\" return \\"YES\\""},{"question":"Bob has recently started a sod farm and needs to efficiently lay down water pipes to hydrate his entire farm. The farm consists of a grid of points, where each point can either have a water pipe or be empty. The input consists of a grid of size n x m (1 ≤ n, m ≤ 1000) represented as a matrix where \'1\' indicates a point with a water pipe and \'0\' indicates an empty point. Bob wants to know the minimum number of horizontal or vertical cuts required to separate all segments of water pipes on the farm. A horizontal or vertical cut is defined as a straight line that cuts through the entire grid from one edge to the opposite edge, either horizontally or vertically. A segment is defined as a contiguous group of \'1\'s connected either horizontally or vertically. For example, in a 4 x 5 grid: ``` 0 1 0 0 1 1 1 1 0 0 0 0 0 0 1 1 1 0 1 1 ``` There are four segments of water pipes: 1. A horizontal segment from (1, 2) to (1, 2). 2. A vertical segment from (1, 2) to (2, 3). 3. A single point segment at (4, 2). 4. A horizontal segment from (4, 4) to (4, 5). The task is to find the minimum number of cuts required to separate all the water segments. Each cut must completely separate at least one segment from the others. **Input:** - The first line contains two integers n and m — the dimensions of the grid. - The next n lines each contain m characters representing the grid. **Output:** - A single integer — the minimum number of cuts required. Example input: ``` 4 5 01001 11100 00001 11011 ``` Example output: ``` 4 ``` Explanation: - We need to make 4 cuts to separate all water segments: 1. Cut between column 2 and column 3. 2. Cut between row 1 and row 2. 3. Cut between column 1 and column 2. 4. Cut between row 3 and row 4.","solution":"def min_cuts_to_separate_pipes(n, m, grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'1\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) visited = [[False] * m for _ in range(n)] segments = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: visited[i][j] = True dfs(i, j) segments += 1 return segments"},{"question":"A university is conducting a programming competition and they want to assign a unique number to each participant. The unique number should follow these rules: 1. It should be a positive integer. 2. It should not have any consecutive identical digits. For example, 122 is invalid but 123 is valid. Your task is to write a program to generate the smallest k-digit unique number that satisfies the above rules. Additionally, if k is 1, the smallest k-digit number should be 1. The input consists of a single integer k (1 ≤ k ≤ 9) representing the number of digits. Print the smallest k-digit unique number. Example: For k = 2, the output is 10. For k = 3, the output is 102. For k = 1, the output is 1. Note: Any number with digits up to 9 is considered a valid input.","solution":"def smallest_k_digit_number(k): Returns the smallest k-digit number that has no consecutive identical digits. if k == 1: return 1 result = [\\"1\\"] for i in range(1, k): next_digit = \\"0\\" if result[-1] == \\"1\\" else \\"1\\" result.append(next_digit) return int(\\"\\".join(result))"},{"question":"You are given a number n. The number x is defined as x = 111...1 (with n digits). Your task is to determine whether x is prime or not. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 2, 3, 5, 7, and 11 are prime numbers. The first line of the input contains a single integer t (1 ≤ t ≤ 1000), the number of test cases. The next t lines contain a single integer n (1 ≤ n ≤ 15) per line, as described above. For each test case, print \\"YES\\" if x is prime, otherwise print \\"NO\\". Input: The first line of input contains an integer t, which represents the number of test cases. Each of the following t lines contains an integer n. Output: For each test case, print \\"YES\\" if the number x formed by n digits of 1 is a prime number. Otherwise, print \\"NO\\". Example: Input: 3 1 2 3 Output: NO YES NO Explanation: In the first test case, the number formed is 1, which is not prime. In the second test case, the number formed is 11, which is prime. In the third test case, the number formed is 111, which is not prime.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def check_prime_for_ones_digits(test_cases, cases): For each test case, check whether the number formed by n ones is prime or not. results = [] for n in cases: number_formed = int(\'1\' * n) if is_prime(number_formed): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are managing a warehouse and need to keep track of the inventory levels for various products. Each day, a log is provided which contains either restocking information or orders made by customers. Restocking information is represented by a line containing a positive integer which indicates the new units added for the product in question. Customer orders are represented by a negative integer which indicates the units taken from the inventory. At the end of the log, you need to calculate the current inventory level and also handle an alert system that triggers if the inventory level for any product goes below zero at any point in time. The first line of the input contains a single integer `d` (1 ≤ d ≤ 10^5) — the number of days the log covers. The next `d` lines each contain a single integer which could be positive (restocking) or negative (customer order). Output two lines: - The first line contains the final inventory level after processing all the logs. - The second line contains \\"ALERT\\" if the inventory level goes below zero at any point, otherwise \\"ALL OK\\". For example, for the following input: ``` 5 10 -5 -3 2 -6 ``` The output would be: ``` -2 ALERT ```","solution":"def process_inventory_log(logs): Processes the inventory log and returns the final inventory level and alert status. Parameters: logs (list of int): The list of daily inventory changes (positive for restocking, negative for orders). Returns: tuple: a tuple containing the final inventory level (int) and the alert status (str, \\"ALERT\\" or \\"ALL OK\\"). inventory_level = 0 alert_triggered = False for log in logs: inventory_level += log if inventory_level < 0: alert_triggered = True final_status = \\"ALERT\\" if alert_triggered else \\"ALL OK\\" return inventory_level, final_status"},{"question":"Leah loves palindrome phrases. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, capitalization, and punctuation. For example, \\"A man, a plan, a canal, Panama\\" and \\"Madam In Eden, I\'m Adam\\" are palindromes. Given a string of phrases separated by newline characters, identify the number of palindromes in the input. The input starts with an integer t (1 le t le 100) indicating the number of phrases to check. The next t lines each contain a single phrase to be checked. Your task is to find and output the number of palindrome phrases in the input. # Example *Input:* ``` 4 A man, a plan, a canal, Panama Not a palindrome Madam In Eden, I\'m Adam Hello, World! ``` *Output:* ``` 2 ``` # Implementation Notes: - Ignore spaces, punctuation, and capitalization when determining if a phrase is a palindrome. - Focus on ensuring the program handles various character cases and correctly identifies palindromes regardless of formatting.","solution":"import re def is_palindrome(phrase): Checks if a given phrase is a palindrome, ignoring spaces, capitalization, and punctuation. # Remove non-alphanumeric characters and convert to lowercase cleaned_phrase = re.sub(r\'[^A-Za-z0-9]\', \'\', phrase).lower() # Check if the cleaned phrase is a palindrome return cleaned_phrase == cleaned_phrase[::-1] def count_palindromes(input_data): Counts the number of palindrome phrases in the input. input_data: list of strings, with the first element being the count of phrases and the subsequent elements being the phrases. t = int(input_data[0]) phrases = input_data[1:t+1] palindrome_count = sum(is_palindrome(phrase) for phrase in phrases) return palindrome_count"},{"question":"Mark is interested in collecting unique stamps. He goes around town visiting different shops that have stamps on sale. Each shop may have stamps with different values, and some shops might have stamps of identical values to those in other shops. Mark wants to know how many unique stamp values he can collect if he buys one stamp from each shop. The first line of the input contains an integer n (1 le n le 10^5) — the number of shops Mark visits. Each of the next n lines contains an integer s_i (1 le s_i le 10^9) — the value of the stamp he buys from the i-th shop. Print one integer — the number of unique stamp values Mark can collect. # Example Input: ``` 5 3 5 7 5 3 ``` Output: ``` 3 ``` Explanation: - The unique stamp values are 3, 5, and 7. - Hence the number of unique stamp values Mark collects is 3.","solution":"def count_unique_stamps(n, stamps): Given the number of shops and a list of stamp values from each shop, returns the number of unique stamp values. :param n: int, the number of shops :param stamps: list of int, the stamp values from each shop :return: int, the number of unique stamp values return len(set(stamps))"},{"question":"You are given a bi-dimensional grid of size n that contains integers. The objective is to find two grids, grid1 and grid2, such that each element in the original grid is the sum of the corresponding elements in grid1 and grid2. Moreover, each element in grid1 must be even and each element in grid2 must be odd. The first line of input contains an integer n (1 ≤ n ≤ 150). Each of the following n lines contains n integers, representing the grid (–10^9 ≤ grid[i][j] ≤ 10^9). Output the two grids, grid1 and grid2, each containing n lines with n integers. If there are multiple solutions, you are allowed to print any of them. The answer will be considered correct if the given conditions are met. One of the valid outputs should be: First n lines: grid1 Next n lines: grid2","solution":"def split_grid_into_even_odd(n, grid): grid1 = [[0] * n for _ in range(n)] grid2 = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): if grid[i][j] % 2 == 0: grid1[i][j] = grid[i][j] - 1 grid2[i][j] = 1 else: grid1[i][j] = grid[i][j] - 1 grid2[i][j] = 1 return grid1, grid2"},{"question":"Given two strings, you are to determine the minimum number of operations required to transform the first string into the second string. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. You need to output the minimum number of operations required. # Input Format - The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. - The next 2*t lines: each test consists of two lines containing non-empty strings `s1` and `s2`. The length of each string is at most 1000. # Output Format - For each test case, output a single integer — the minimum number of operations required to transform `s1` into `s2`. # Example Input ``` 2 abcdef azced geek gesek ``` Output ``` 3 1 ``` # Explanation In the first example, you need three operations: - Replace \'b\' with \'z\' - Replace \'d\' with \'c\' - Insert \'e\' at the end In the second example, you only need one operation: - Insert \'s\' between \'e\' and \'k\' in the first string This problem can be efficiently solved using dynamic programming to compute the edit distance between the two strings `s1` and `s2`.","solution":"def min_operations(s1, s2): m, n = len(s1), len(s2) # dp array where dp[i][j] represents the edit distance between s1[:i] and s2[:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp array for base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) results = [] for i in range(t): s1 = lines[2 * i + 1] s2 = lines[2 * i + 2] results.append(min_operations(s1, s2)) return results"},{"question":"Bob recently bought a wooden maze puzzle. This puzzle consists of an M x N grid with some cells blocked and some cells open. Bob wants to know the number of distinct paths he can take to go from the top-left cell (1, 1) to the bottom-right cell (M, N), moving only down or right at each step, and without passing through blocked cells. Write a program to help him figure this out. Consider: - The grid is represented by a 2D array where \'0\' signifies an open cell and \'1\' signifies a blocked cell. - Bob can only move to the right cell (i.e., from (i, j) to (i, j+1)) or the downward cell (i.e., from (i, j) to (i+1, j)). The input consists of: - Two space-separated integers M and N (2 ≤ M, N ≤ 1000) — the number of rows and columns respectively. - M lines, each containing N space-separated integers (either \'0\' or \'1\') describing the grid. The output must be a single integer, the number of distinct paths from the top-left to the bottom-right, modulo 1000000007. **Example:** **Input:** ``` 3 3 0 0 0 0 1 0 0 0 0 ``` **Output:** ``` 2 ``` **Explanation:** There are two possible paths from (1, 1) to (3, 3): 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In both cases, they avoid the blocked cell (2, 2).","solution":"def num_paths(grid, M, N): MOD = 1000000007 if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[M-1][N-1] # Example usage: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] M, N = 3, 3 print(num_paths(grid, M, N)) # Output: 2"},{"question":"You are given a kingdom divided into a grid format of size n times n and there are several castles built on the crossroad of streets. Each row and column represents a street. The king has noticed that there are exactly k castles built in the entire kingdom. For defense purposes, the king wants to place guards on some crossroads such that each castle is covered by at least one guard. A guard can cover all the crossroads in its row or its column. Your task is to find out the minimum number of guards required to cover all the castles. Input contains multiple test cases. The first line consists of a single integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (1 le n le 100) — the side length of the kingdom grid, and then followed by an integer k (1 le k le n^2) — the number of castles. The next k lines each contains two integers r_i and c_i (1 le r_i, c_i le n) — the coordinates of the castles. For each test case, print a single integer — the minimum number of guards required to cover all the castles. Example: ``` Input: 2 3 3 1 2 2 2 3 2 5 4 1 1 3 2 3 4 4 4 Output: 2 2 ``` Explanation: In the first test case, you can place a guard on any crossroad that lies along column 2, covering all castles in rows 1, 2, and 3 hence minimum guards required is 2. In the second test case, you need to place guards on crossroads that cover the first row and third row, hence the minimum guards required is 2.","solution":"def min_guards_to_cover_castles(t, test_cases): results = [] for case in test_cases: n, k, castles = case rows = set() cols = set() for r, c in castles: rows.add(r) cols.add(c) # The minimum number of guards required # will be the maximum of the unique rows or columns that have castles results.append(min(len(rows), len(cols))) return results"},{"question":"You are given a string consisting of lowercase English letters and you need to perform a series of operations on it. Each operation consists of selecting a substring and reversing it. After performing all operations, you should be able to determine if it is possible to transform the string into another target string. The first line of the input contains two integers, `n` and `q` (1 le n le 10^5, 1 le q le 10^5), where `n` is the length of the string and `q` is the number of operations. The second line contains the initial string `s` of length `n`. The third line contains the target string `t` of length `n`. The following `q` lines describe the operations. Each operation is given by two integers `l` and `r` (1 le l le r le n), which means you should reverse the substring `s[l-1:r]` (1-based indexing). Output \\"YES\\" if it is possible to transform the initial string `s` into the target string `t` after performing the given operations. Otherwise, output \\"NO\\". Example: Input: 7 3 abcdefg gfedcba 2 5 1 7 3 6 Output: YES Explanation: - After the first operation, the string becomes \\"abedcfg\\". - After the second operation, the string becomes \\"gfcbeda\\". - After the third operation, the string matches the target \\"gfedcba\\".","solution":"def can_transform(s, t, operations): Determines if string s can be transformed into string t by performing a series of substring reversals. :param s: Initial string :param t: Target string :param operations: List of tuples, where each tuple represents (l, r) for the substring to be reversed :return: \\"YES\\" if s can be transformed into t, \\"NO\\" otherwise s = list(s) for l, r in operations: s[l-1:r] = reversed(s[l-1:r]) return \\"YES\\" if \\"\\".join(s) == t else \\"NO\\""},{"question":"Given an empty grid with dimensions n times m filled with zeros, you need to perform a series of operations to update the grid values and then answer a series of queries. You will perform two types of operations: 1. Update a specific cell value in the grid. 2. Query the sum of values in a specific subgrid defined by its top-left and bottom-right corners. The grid coordinates are zero-based. There are the following constraints: - 1 le n, m le 500 (grid dimensions) - 1 le q le 10^4 (number of operations & queries) - For a cell update: Given three integers r, c, val (0 le r < n, 0 le c < m, -10^9 le val le 10^9). Update the cell at row r and column c with the value val. - For a sum query: Given four integers r1, c1, r2, c2 (0 le r1 le r2 < n, 0 le c1 le c2 < m). Output the sum of the values in the subgrid from (r1, c1) to (r2, c2) inclusive. The first line contains three integers n, m, q. Each of the next q lines contains one operation, either an update or a query: - For an update: `U r c val` - For a query: `Q r1 c1 r2 c2` Print the result of each query on a new line. Example: Input: ``` 3 3 5 U 1 1 5 Q 0 0 2 2 U 0 0 3 Q 0 0 0 0 Q 0 0 2 2 ``` Output: ``` 5 3 8 ``` In the example, the grid after each operation would look like: 1. Initially: ``` 0 0 0 0 0 0 0 0 0 ``` 2. After `U 1 1 5`: ``` 0 0 0 0 5 0 0 0 0 ``` 3. Result of `Q 0 0 2 2`: Sum of the entire grid = 5 4. After `U 0 0 3`: ``` 3 0 0 0 5 0 0 0 0 ``` 5. Result of `Q 0 0 0 0`: Sum of cell (0, 0) = 3 6. Result of `Q 0 0 2 2`: Sum of the entire grid = 8","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] self.prefix = [[0] * (m + 1) for _ in range(n + 1)] def update(self, r, c, val): self.grid[r][c] = val self._update_prefix() def query(self, r1, c1, r2, c2): result = ( self.prefix[r2 + 1][c2 + 1] - self.prefix[r1][c2 + 1] - self.prefix[r2 + 1][c1] + self.prefix[r1][c1] ) return result def _update_prefix(self): for i in range(1, self.n + 1): for j in range(1, self.m + 1): self.prefix[i][j] = ( self.grid[i - 1][j - 1] + self.prefix[i - 1][j] + self.prefix[i][j - 1] - self.prefix[i - 1][j - 1] ) def process_operations(n, m, operations): grid = Grid(n, m) results = [] for operation in operations: parts = operation.split() if parts[0] == \'U\': r, c, val = int(parts[1]), int(parts[2]), int(parts[3]) grid.update(r, c, val) elif parts[0] == \'Q\': r1, c1, r2, c2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) result = grid.query(r1, c1, r2, c2) results.append(result) return results"},{"question":"Given two sequences of integers, a (representing demands) and b (representing supplies), you need to determine if every element in a can be satisfied by some element in b, when certain conditions are met. Each element ai from sequence a can be satisfied by an element bj from sequence b if the following inequalities hold: ai - d1 ≤ bj ≤ ai + d2. Each element in b can be used at most once. Create a program that determines if all demands in a can be satisfied with the supplies in b, and if so, find one such allocation. The input consists of two parts: 1. The first line contains four integers n, m, d1, and d2 (1 ≤ n, m ≤ 1000, 0 ≤ d1, d2 ≤ 1000), where n is the number of elements in a, m is the number of elements in b, and d1 and d2 are the tolerance levels as defined above. 2. The second line contains n space-separated integers a1, a2, ..., an, representing the demands. 3. The third line contains m space-separated integers b1, b2, ..., bm, representing the supplies. The program should output \\"YES\\" if it is possible to satisfy all demands with the given supplies and their respective tolerance levels. If it is possible, the next n lines should specify the allocation by printing \\"i j\\" (without quotes) indicating that demand ai is satisfied by supply bj. If it is not possible to satisfy all demands, the program should output \\"NO\\". Examples: Input: ``` 3 3 1 2 3 5 7 4 8 3 ``` Output: ``` YES 1 3 2 1 3 2 ``` Input: ``` 2 2 0 0 1 2 3 4 ``` Output: ``` NO ```","solution":"def allocate_demands(n, m, d1, d2, a, b): Determines if all demands in a can be satisfied with the supplies in b, considering the tolerances. Returns a tuple (possible, allocation) where possible is a boolean indicating if an allocation is feasible, and allocation is the list of tuples indicating the assignments if possible. # List to store the allocation results allocation = [] # Sort demands and supplies along with their indices demands = sorted((a[i], i + 1) for i in range(n)) supplies = sorted((b[j], j + 1) for j in range(m)) used_supplies = [False] * m for demand, demand_index in demands: allocated = False for supply_index, (supply, actual_index) in enumerate(supplies): if not used_supplies[supply_index] and (demand - d1 <= supply <= demand + d2): allocation.append((demand_index, actual_index)) used_supplies[supply_index] = True allocated = True break if not allocated: return \\"NO\\" return \\"YES\\", allocation"},{"question":"You have a collection of N integer sequences. Each sequence contains M elements. Your task is to find the number of pairs of sequences (i, j) such that i ≠ j and the sum of the elements in the i-th sequence is greater than or equal to the sum of the elements in the j-th sequence. The first line contains two integers N and M (1 ≤ N, M ≤ 1000). Each of the next N lines contains M integers separated by spaces, representing the elements of one sequence. The elements in each sequence are between -10^9 and 10^9. Print a single integer that corresponds to the number of valid pairs of sequences. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 3 Explanation: The sums of sequences are [6, 15, 24]. The valid pairs are (2, 1), (3, 1), and (3, 2).","solution":"def count_valid_pairs(sequences): Count the number of pairs (i, j) such that i ≠ j and the sum of the elements in the i-th sequence is greater than or equal to the sum of the elements in the j-th sequence. :param sequences: List of sequences, where each sequence is a list of integers :return: Integer count of valid pairs sums = [sum(seq) for seq in sequences] count = 0 for i in range(len(sums)): for j in range(len(sums)): if i != j and sums[i] >= sums[j]: count += 1 return count # Example input n = 3 m = 3 sequences = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Function call to check the implementation (expected result is 3) result = count_valid_pairs(sequences) print(result) # Output should be 3"},{"question":"You are given a string s consisting of lowercase letters and a number k. Your task is to transform the string into a k-palindrome. A string is called k-palindrome if it can be divided into exactly k contiguous non-empty parts where each part is a palindrome. Determine if it\'s possible to transform the given string into a k-palindrome. If possible, print \\"YES\\". Otherwise, print \\"NO\\". # Input The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains one integer k (1 le k le |s|), the second line contains the string s (1 le |s| le 1000). # Output For each test case, print \\"YES\\" if the string s can be transformed into a k-palindrome, otherwise print \\"NO\\". # Example **Input:** ``` 3 2 aab 3 abcba 1 racecar ``` **Output:** ``` YES YES YES ``` # Note In the first case, the string \\"aab\\" can be divided into [\\"aa\\", \\"b\\"], both parts are palindromes. In the second case, the string \\"abcba\\" can be divided into [\\"a\\", \\"b\\", \\"cba\\"], where \\"a\\", \\"b\\", and \\"cba\\" are each palindromes. In the third case, the whole string \\"racecar\\" is already a palindrome and can be considered as 1 part.","solution":"def is_palindrome(s): Check if a given string s is a palindrome. return s == s[::-1] def can_form_k_palindrome(k, s): Check if the string s can be divided into k palindromic parts. n = len(s) if k > n: return \\"NO\\" # dp[i][j] is True if s[i:j+1] is a palindrome dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = length == 2 or dp[i + 1][j - 1] # min cuts to make each part a palindrome min_cuts = [float(\'inf\')] * (n + 1) min_cuts[0] = 0 for i in range(1, n + 1): for j in range(i): if dp[j][i - 1]: min_cuts[i] = min(min_cuts[i], min_cuts[j] + 1) return \\"YES\\" if min_cuts[n] <= k else \\"NO\\" def process(t, test_cases): Process the input test cases and return the results. results = [] for i in range(t): k, s = test_cases[i] results.append(can_form_k_palindrome(k, s)) return results"},{"question":"You are given a grid of size m times n consisting of non-negative integers. Each cell in the grid represents the elevation at that point. The objective is to find the sum of the values along the path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) such that: - You can move only right or down at any point in time. - The path should have the minimum sum possible. Write a function to find the minimum sum path from the top-left corner to the bottom-right corner. # Input Format The first line contains two integers, m and n (1 leq m, n leq 1000) — the number of rows and columns in the grid. The next m lines each contain n integers separated by spaces — the elevations in the grid. Each elevation value is between 0 and 10^6 inclusive. # Output Format Output a single integer — the minimum sum of the path from the top-left corner to the bottom-right corner. # Sample Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output ``` 7 ``` # Explanation In the sample grid, the minimum sum path is 1 → 3 → 1 → 1 → 1 with a total sum of 7.","solution":"def min_path_sum(grid): Returns the minimum sum of the path from the top-left corner to the bottom-right corner moving only right or down. if not grid or not grid[0]: return 0 m = len(grid) n = len(grid[0]) # Create a DP table to store the minimum path sum to each cell. dp = [[0] * n for _ in range(m)] # Initialize the top-left cell with the same value as grid[0][0] dp[0][0] = grid[0][0] # Fill the first row (can only come from the left cell) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from the above cell) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the minimum path sum return dp[m-1][n-1]"},{"question":"Given an array of integers, the objective is to rearrange the elements in such a way that the absolute difference between any two consecutive elements is as small as possible. Your task is to find such a rearrangement and provide the maximum of these absolute differences. For example, given the array [5, 3, 1, 7, 9], one possible rearrangement is [1, 3, 5, 7, 9], where the absolute differences between consecutive elements are [2, 2, 2, 2]. The maximum of these absolute differences is 2. Input: - The first line contains an integer T (1 ≤ T ≤ 1000), the number of test cases. - For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains n integers, each element of the array (1 ≤ elements ≤ 10^6). Output: - For each test case, output the maximum of the absolute differences between consecutive elements in the optimal rearrangement. Example Input: ``` 2 5 5 3 1 7 9 4 4 8 2 6 ``` Example Output: ``` 2 2 ``` Explanation: In the first test case, an optimal arrangement could be [1, 3, 5, 7, 9] which gives a maximum difference of 2. In the second test case, an optimal arrangement could be [2, 4, 6, 8] which gives a maximum difference of 2.","solution":"def max_absolute_difference(n, arr): Given an array of integers, this function sorts the array and calculates the maximum absolute difference between consecutive elements. arr.sort() max_diff = 0 for i in range(1, n): max_diff = max(max_diff, abs(arr[i] - arr[i - 1])) return max_diff def process_test_cases(test_cases): results = [] for n, arr in test_cases: result = max_absolute_difference(n, arr) results.append(result) return results"},{"question":"A dam monitoring system collects data on water levels at various times throughout the day. The system stores these water levels as an array of integers, where each integer represents the water level at a specific time point. The system needs to identify potentially dangerous trends where the water level is continuously rising or continuously falling for at least a specified number of consecutive time points. You need to write a program that, given an array of water levels and a minimum number of consecutive points, determines the number of contiguous subarrays where the water level is strictly increasing or strictly decreasing for at least the specified number of consecutive time points. # Input - The first line contains two integers `n` and `k` (2 ≤ n ≤ 2·10^5; 1 ≤ k ≤ n) — the number of water levels and the minimum number of consecutive points for a trend. - The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the water levels at the respective time points. # Output - Print a single integer — the number of contiguous subarrays where the water level is either strictly increasing or strictly decreasing for at least `k` consecutive time points. # Example Input ``` 7 3 1 2 3 4 3 2 1 ``` Output ``` 4 ``` In this example, the subarrays that meet the condition are: - Increasing: [1, 2, 3, 4], [2, 3, 4] - Decreasing: [4, 3, 2], [3, 2, 1] # Note In the provided example, there are 4 subarrays where the water level is either strictly increasing or strictly decreasing for at least 3 consecutive points.","solution":"def count_trends(n, k, water_levels): def count_increasing_or_decreasing(trend_type=\'increasing\'): counter = 0 length = 1 for i in range(1, n): if (trend_type == \'increasing\' and water_levels[i] > water_levels[i-1]) or (trend_type == \'decreasing\' and water_levels[i] < water_levels[i-1]): length += 1 else: if length >= k: counter += length - k + 1 length = 1 if length >= k: counter += length - k + 1 return counter increasing_trends = count_increasing_or_decreasing(\'increasing\') decreasing_trends = count_increasing_or_decreasing(\'decreasing\') return increasing_trends + decreasing_trends"},{"question":"You are given an n × n matrix filled with integers. Let\'s define a \\"magic square\\" as a subgrid of this matrix where the numbers in each row, each column, and both main diagonals all add up to the same constant, called the \\"magic constant.\\" Your task is to find the largest magic square subgrid in the given matrix. If there are multiple magic square subgrids of the same largest size, return the size of one of them (it does not matter which one). The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the matrix. Each of the next n lines contains n integers — the elements of the matrix (−1000 ≤ matrix[i][j] ≤ 1000). Output the size of the largest magic square subgrid. If there is no magic square subgrid of size greater than 1, output 1. Example: Input: 4 8 1 6 3 3 5 7 10 4 9 2 8 11 3 6 7 Output: 3 Explanation: The largest magic square subgrid is: 8 1 6 3 5 7 4 9 2 Where the sums of rows, columns, and diagonals are all equal to 15.","solution":"def is_magic_square(grid, row, col, size): magic_sum = sum(grid[row][col:col+size]) # Check rows and columns for i in range(size): if sum(grid[row+i][col:col+size]) != magic_sum: return False if sum(grid[row+j][col+i] for j in range(size)) != magic_sum: return False # Check main diagonal if sum(grid[row+i][col+i] for i in range(size)) != magic_sum: return False # Check secondary diagonal if sum(grid[row+i][col+size-i-1] for i in range(size)) != magic_sum: return False return True def largest_magic_square(matrix, n): for size in range(n, 1, -1): for row in range(n - size + 1): for col in range(n - size + 1): if is_magic_square(matrix, row, col, size): return size return 1 def get_largest_magic_square(n, matrix): return largest_magic_square(matrix, n)"},{"question":"Farmer Bob owns a large farm with n separate fields, each having a distinct area. He wants to plant crops in the fields such that the average area of the fields planted with crops is maximized. However, there is a restriction that only fields greater than a certain minimum area threshold k can be utilized for planting crops. Help Farmer Bob determine the maximum average area of the fields he can achieve by selectively choosing which fields to plant crops in. The first line contains an integer n (1 leq n leq 100,000) — the number of fields. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) representing the areas of the fields. The third line contains a single integer k (1 leq k leq 10^9) representing the minimum area threshold for planting crops. Output a single number representing the maximum average area of the fields Farmer Bob can achieve. The answer should be printed with a precision of 6 decimal places. In the first example, the fields larger than the threshold k = 100 are 105, 210, and 300. The average area of these fields is (105 + 210 + 300) / 3 = 205. In the second example, no fields are greater than the threshold k = 500. Therefore, the maximum average area achievable is 0.","solution":"def max_average_area(n, areas, k): Returns the maximum average area of the fields greater than the threshold k. Parameters: - n: int, number of fields. - areas: list of int, areas of the fields. - k: int, minimum area threshold. Returns: - float, maximum average area of the fields greater than k. filtered_areas = [area for area in areas if area > k] if not filtered_areas: return 0.0 total_area = sum(filtered_areas) count = len(filtered_areas) return float(total_area) / count"},{"question":"Jenna is participating in a programming competition. In one particular problem, she needs to sort an array of integers and then find the minimum difference between any two consecutive elements in the sorted array. Help Jenna by writing a function that solves this problem. The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer, the minimum difference between any two consecutive elements in the sorted array. For example: Input: 6 7 1 3 4 9 2 Output: 1 Explanation: After sorting the array, it becomes [1, 2, 3, 4, 7, 9], and the minimum difference between consecutive elements is 1 (between 1 and 2).","solution":"def min_difference(arr): Returns the minimum difference between any two consecutive elements in the sorted array. # Sorting the array sorted_arr = sorted(arr) # Finding the minimum difference between consecutive elements min_diff = float(\'inf\') for i in range(1, len(sorted_arr)): diff = sorted_arr[i] - sorted_arr[i - 1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"In a certain coding competition, participants are given multiple mathematical expressions to evaluate. Each expression contains non-negative integers combined using the operators `+` and `-` without parentheses. Consider the expression `5 + 7 - 3 + 8`, which would evaluate to `17`. Participants are required to evaluate these expressions, but there are times when a segment of the expression (i.e., a subsequence consisting of adjacent terms and operators) might have been evaluated incorrectly due to a bug. Given the original sequence and the result of evaluating a possibly incorrect segment of the sequence, participants need to determine the minimum number of operations needed to correct the segment if the rest of the sequence has been evaluated correctly. For example, consider the expression `3 + 2 - 4 + 1` which should evaluate to `2`. If the expression was evaluated incorrectly as `3 + 2 - 4 + 0`, then the segment `- 4 + 1` has been evaluated incorrectly. The correct segment should have been `- 4 + 1`, leading to a final correction of replacing `0` with `1`. Given the total number of cases, your task is to determine for each case the minimum number of changes needed to correct the incorrect segment. # Input The first line contains an integer ( t ) (( 1 leq t leq 10^5 )), the number of test cases. Each test case consists of two lines: - The first line contains the original expression as a string. - The second line contains the possibly incorrect expression as a string. The length of each expression will not exceed ( 10^6 ) characters. The expressions contain only digits (0-9) and the operators `+` and `-`. # Output For each test case, output a single integer — the minimum number of changes needed. # Example Input ``` 3 3 + 2 - 4 + 1 3 + 2 - 4 + 0 5 + 7 - 3 + 8 5 + 7 - 3 + 8 1 + 2 - 3 1 + 2 - 2 ``` Output ``` 1 0 1 ``` In the first example, `3 + 2 - 4 + 1` should result in `2`, but was mistakenly written as `3 + 2 - 4 + 0`, so one change is needed to correct `0` to `1`. In the second example, both expressions are the same, so no changes are needed. In the third example, `1 + 2 - 3` should result in `0`, but was mistakenly written as `1 + 2 - 2`, so one change is needed to correct `-2` to `-3`.","solution":"def min_changes_to_correct_expression(original, incorrect): Given the original and incorrect expressions, compute the minimum number of changes needed to correct the incorrect expression. # Split the expression to handle each part individually original_parts = original.split() incorrect_parts = incorrect.split() changes = 0 for o, i in zip(original_parts, incorrect_parts): if o != i: changes += 1 return changes def process_cases(t, cases): results = [] for i in range(t): original_expression = cases[i][0] incorrect_expression = cases[i][1] result = min_changes_to_correct_expression(original_expression, incorrect_expression) results.append(result) return results"},{"question":"A group of n friends decided to start a book club. Each friend has a list of favorite books they enjoy. For the first meeting, they want to pick a book that is liked by the most number of friends. However, if there are multiple books liked by the same maximum number of friends, they will choose the book that appears first in alphabetical order. You\'re tasked to help them identify the book they should pick for the first meeting. The input consists of: - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of friends. - The next n lines each contain a string of space-separated book titles that a friend likes. Each book title consists of lowercase English letters and its length does not exceed 100. Output a single string — the title of the book that the book club should pick for the first meeting. Ensure that the book picked is liked by the highest number of friends, and if there\'s a tie, the book that comes first in alphabetical order should be chosen. In the first example, the book liked by the most number of friends is \\"harrypotter\\", which is liked by 3 friends. In the second example, both \\"thegreatgatsby\\" and \\"prideandprejudice\\" are liked by the same number of friends (2 each). The book that comes first in alphabetical order is \\"prideandprejudice\\". Input: 3 harrypotter lotr harrypotter lotr thegreatgatsby harrypotter prideandprejudice Output: harrypotter Input: 2 thegreatgatsby prideandprejudice prideandprejudice Output: prideandprejudice","solution":"def pick_book_for_meeting(n, friends_books): from collections import defaultdict book_count = defaultdict(int) for books in friends_books: for book in books.split(): book_count[book] += 1 # Find the book with maximum count and if tie, choose alphabetically first one max_count = 0 selected_book = None for book, count in book_count.items(): if count > max_count or (count == max_count and book < selected_book): max_count = count selected_book = book return selected_book"},{"question":"You are given an array a consisting of n integers. Each integer in the array is either odd or even. You have to perform some operations on the array to make it a special array. You can perform the following operation any number of times: - Pick any two consecutive elements in the array and replace both of them with their sum. The newly formed sum will replace the two original elements resulting in a smaller array. An array is considered special if all elements in it are either odd or even. Your task is to determine the minimum number of operations required to transform the given array into a special array. The first line of the input contains one integer n (1 le n le 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Print one integer — the minimum number of operations required to transform the array into a special array. **Example:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 2 ``` Explanation: - Replace the pair (1, 2) with their sum, resulting in [3, 3, 4, 5]. - Replace the pair (4, 5) with their sum, resulting in [3, 3, 9]. Now the array [3, 3, 9] is a special array as all elements are odd. Therefore, we require a minimum of 2 operations.","solution":"def min_operations_to_special_array(n, a): Returns the minimum number of operations required to transform the array into a special array, where all elements are either odd or even. odd_count = sum(1 for x in a if x % 2 != 0) even_count = n - odd_count # The minimum operations required to convert all elements to be either odd or even is # to eliminate the minor count of elements (smaller subset, either odd or even) return min(odd_count, even_count)"},{"question":"In a grid city, Sally wants to find the shortest path from her home to her workplace. The city is represented by a grid of size n times m, where each cell either has a building denoted by a \'#\' or a road denoted by a \'.\'. Sally can move up, down, left, or right but only through the roads (\'.\'). Sally\'s home is at cell (sx, sy) and her workplace is at cell (ex, ey). Your task is to determine the minimum number of steps Sally needs to take to get from her home to her workplace. If it is not possible to reach the workplace, return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the city. The next n lines describe the grid, each containing a string of length m where each character is either a \'.\' or a \'#\'. The following line contains four integers sx, sy, ex, ey (0 ≤ sx, sy, ex, ey < n, m), the starting and ending coordinates respectively. Output the minimum number of steps Sally needs to take to get from her home to her workplace, or -1 if it is not possible. Example Input: 4 4 .... .. .#.. .... 0 0 3 3 Output: 6 Explanation: Sally\'s path can be: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3), totaling 6 steps.","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, ex, ey): Determines the minimum number of steps needed to go from (sx, sy) to (ex, ey) in a grid city. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (list of str): The grid representing the city. sx (int): Starting row coordinate. sy (int): Starting column coordinate. ex (int): Ending row coordinate. ey (int): Ending column coordinate. Returns: int: The minimum number of steps or -1 if it\'s not possible to reach the workplace. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, steps = queue.popleft() if x == ex and y == ey: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"Bob loves programming and has recently discovered an interesting sequence called the \\"Magical Fibonacci Sequence\\". This sequence is similar to the regular Fibonacci sequence but with a little twist. Instead of the sequence starting with 0 and 1, the sequence starts with two non-negative integers x and y. The next elements of the sequence are generated by summing the last two elements of the sequence modulo a given integer m. Formally, the sequence is defined as: - f(1) = x - f(2) = y - f(i) = (f(i-1) + f(i-2)) % m for i > 2 Given the integers x, y, m, and n, your task is to find the n-th element of this Magical Fibonacci Sequence. # Input: - A single line containing four space-separated integers x, y, m, and n (0 ≤ x, y < m; 1 ≤ m ≤ 10^6; 1 ≤ n ≤ 10^18). # Output: - A single integer representing the n-th element of the Magical Fibonacci Sequence. # Example: Input: ``` 0 1 1000000 10 ``` Output: ``` 34 ``` Input: ``` 5 7 10 3 ``` Output: ``` 2 ``` Note: - In the first example, the sequence starts with 0, 1, and the remaining sequence follows as 1, 2, 3, 5, 8, 13, 21, 34. Hence, the 10th element is 34. - In the second example, the sequence starts with 5, 7, and the third value is (5 + 7) % 10 = 2.","solution":"def magical_fibonacci(x, y, m, n): Returns the n-th element of the Magical Fibonacci Sequence. Args: x : int : First element of the sequence y : int : Second element of the sequence m : int : Modulo value n : int : Position of the element in the sequence to find Returns: int : The n-th element of the sequence if n == 1: return x elif n == 2: return y # Using matrix exponentiation to find nth term in logarithmic time def matrix_mult(mat1, mat2, mod): return [ [(mat1[0][0] * mat2[0][0] + mat1[0][1] * mat2[1][0]) % mod, (mat1[0][0] * mat2[0][1] + mat1[0][1] * mat2[1][1]) % mod], [(mat1[1][0] * mat2[0][0] + mat1[1][1] * mat2[1][0]) % mod, (mat1[1][0] * mat2[0][1] + mat1[1][1] * mat2[1][1]) % mod] ] def matrix_pow(mat, exp, mod): result = [[1, 0], [0, 1]] # Identity matrix base = mat while exp > 0: if exp % 2 == 1: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) exp //= 2 return result T = [[1, 1], [1, 0]] T_n_minus_2 = matrix_pow(T, n - 2, m) nth_value = (T_n_minus_2[0][0] * y + T_n_minus_2[0][1] * x) % m return nth_value"},{"question":"A group of friends has decided to have a contest where they will climb mountains. Each mountain is characterized by a difficulty level which is a positive integer. There will be two types of choices for the friends: 1. Each friend can either climb any single mountain. 2. Split into two non-empty subgroups where each subgroup climbs different mountains. A valid contest should ensure that both subgroups have the same sum of the difficulty levels of the mountains they climbed, and each subgroup climbs at least one mountain. Given a list of the difficulty levels of the mountains, determine if it is possible to organize a valid contest. The first line of input contains a single integer T (1 le T le 100) — the number of test cases. For each test case, the first line contains a single integer n (1 le n le 100) — the number of mountains. The second line contains n space-separated integers where the i-th integer represents the difficulty level of the i-th mountain (1 le difficulty le 1000). For each test case, print \\"YES\\" if it is possible to split the friends into two subgroups such that the sum of the difficulty levels of the mountains climbed by both subgroups is the same, and \\"NO\\" otherwise. # Example Input ``` 3 4 1 5 11 5 3 1 2 3 5 1 1 1 1 1 ``` Output ``` YES YES NO ``` # Explanation In the first test case, the mountains can be split into groups [1, 5, 5] and [11], both of which sum to 11. In the second test case, the mountains can be split into groups [1, 2] and [3], both of which sum to 3. In the third test case, it is impossible to split the mountains into two subgroups with equal sum.","solution":"def can_split_into_equal_sum_subgroups(n, difficulties): total_sum = sum(difficulties) if total_sum % 2 != 0: return False target_sum = total_sum // 2 # Create a DP array to store whether each possible sum up to target_sum can be achieved dp = [False] * (target_sum + 1) dp[0] = True for difficulty in difficulties: for i in range(target_sum, difficulty - 1, -1): dp[i] = dp[i] or dp[i - difficulty] return dp[target_sum] def process_test_cases(test_cases): results = [] for n, difficulties in test_cases: if can_split_into_equal_sum_subgroups(n, difficulties): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(T, cases): test_cases = [] idx = 0 for _ in range(T): n = cases[idx] difficulties = cases[idx + 1] test_cases.append((n, difficulties)) idx += 2 return process_test_cases(test_cases)"},{"question":"You are given an array of n integers. We define the \\"balance\\" of a subarray as the absolute difference between the number of even and odd numbers in that subarray. You need to find out the maximum balance of any subarray of the given array. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the elements of the array. Print the only integer — the maximum balance of any subarray of the given array. In the first sample, the highest balance is achieved with subarray [4, 5] or [6, 3]. In the second sample, the highest balance is achieved with subarray [2, 6, 9].","solution":"def max_balance(arr): n = len(arr) max_balance = 0 for i in range(n): even_count = 0 odd_count = 0 for j in range(i, n): if arr[j] % 2 == 0: even_count += 1 else: odd_count += 1 balance = abs(even_count - odd_count) if balance > max_balance: max_balance = balance return max_balance"},{"question":"Given an integer n, find the minimum number of steps to reduce n to 1. In one step, you can: 1. Subtract 1 from n. 2. If n is divisible by 2, divide n by 2. 3. If n is divisible by 3, divide n by 3. The first and only line of input contains one integer n (1 ≤ n ≤ 10^6). Print the minimum number of steps to reduce n to 1. For example: Input: 10 Output: 3 Explanation: 10 -> 9 (subtract 1) 9 -> 3 (divide by 3) 3 -> 1 (divide by 3) So, the minimum number of steps is 3.","solution":"def min_steps_to_one(n): Returns the minimum number of steps to reduce n to 1. In one step, you can: 1. Subtract 1 from n. 2. If n is divisible by 2, divide n by 2. 3. If n is divisible by 3, divide n by 3. # Create an array to store the minimum steps to reach each number up to n dp = [0] * (n + 1) # Iterating from 2 to n for i in range(2, n + 1): # Start with the assumption that the fastest way to get to i is from i-1 dp[i] = dp[i - 1] + 1 # If i is divisible by 2, test if it\'s faster to get to i from i//2 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # If i is divisible by 3, test if it\'s faster to get to i from i//3 if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"Given two strings s1 and s2, you are to determine if it is possible to make the two strings equal by applying the following operations any number of times on the string s1: 1. Insert any character at any position in s1. 2. Delete any character from s1. 3. Substitute any character in s1 with any other character. These operations correspond to transforming s1 into any other string, which includes s2 if they can be made equal. If the two strings can be made equal, output the minimum number of operations required. If it is not possible to make the strings equal, output -1. Find the minimum number of operations required to make the string s1 equal to s2. The input format: - The first line contains the string s1 (1 ≤ |s1| ≤ 1000). - The second line contains the string s2 (1 ≤ |s2| ≤ 1000). The output format: - Output the minimum number of operations required to make s1 equal to s2, or -1 if it\'s not possible. Example: Input: kitten sitting Output: 3 Explanation: - kitten → sitten (substitute \'k\' with \'s\') - sitten → sittin (substitute \'e\' with \'i\') - sittin → sitting (insert \'g\' at the end)","solution":"def min_operations_to_make_equal(s1, s2): Determines the minimum number of operations required to make s1 equal to s2. An operation is defined as an insertion, deletion, or substitution of a character. Uses the Levenshtein distance (edit distance) algorithm to find the solution. if s1 == s2: return 0 len_s1, len_s2 = len(s1), len(s2) # Create a 2D array to store the distance dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(len_s1 + 1): for j in range(len_s2 + 1): if i == 0: dp[i][j] = j # Insert all s2\'s characters to s1 elif j == 0: dp[i][j] = i # Delete all s1\'s characters elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # Characters are the same, no operation needed else: dp[i][j] = 1 + min( dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1] # Substitution ) return dp[len_s1][len_s2]"},{"question":"In the bustling city of Codepolis, there exists a peculiar market place where merchants operate on unique protocols for trading their wares. Each merchant is identified by a unique alphanumeric code and a stock count. The city officials have decided to standardize the trade to ensure fairness and transparency. To achieve this, they need a system that can summarize merchants\' information by their stock count. For each merchant, you are provided with a code and the corresponding stock count. Your task is to group all merchants by their stock count and then sort each group lexicographically based on the merchant\'s code. Input format: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of merchants. Each of the following n lines contains a unique alphanumeric code (1 ≤ length of code ≤ 10) and an integer k (0 ≤ k ≤ 10000) — the stock count of the merchant. Output format: For each distinct stock count in increasing order, output the stock count followed by the list of merchants having that stock count, sorted lexicographically by their code. Each group should be separated by a blank line and must have the stock count mentioned first. Example: Input: 5 A12 100 B34 50 C56 100 D78 20 E90 50 Output: 20 D78 50 B34 E90 100 A12 C56","solution":"def organize_merchants(n, merchant_data): from collections import defaultdict merchants_by_stock = defaultdict(list) for code, stock in merchant_data: merchants_by_stock[stock].append(code) for stock in sorted(merchants_by_stock.keys()): merchants_by_stock[stock].sort() return merchants_by_stock def format_output(merchants_by_stock): output_lines = [] for stock in sorted(merchants_by_stock.keys()): output_lines.append(str(stock)) output_lines.extend(merchants_by_stock[stock]) output_lines.append(\\"\\") return \\"n\\".join(output_lines).strip()"},{"question":"You are given a list of n cities with their respective temperatures and you are also given a list of m queries. Each query consists of a pair of indices representing a subrange of the cities list. For each query, you have to find the minimum temperature in the specified subrange of cities. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of cities. The second line contains n integers t1, t2, ..., tn (−100 ≤ ti ≤ 100) — the temperatures of the cities. The third line contains a single integer m (1 ≤ m ≤ 200,000) — the number of queries. The next m lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subrange for each query. Output m lines, each containing the minimum temperature in the subrange [l, r] from the respective queries. Example: Input: 5 3 -1 2 -2 4 3 1 3 2 4 1 5 Output: -1 -2 -2","solution":"def minimum_temperature_in_subrange(temps, queries): Return the minimum temperatures for each query range. Parameters: temps (list of int): List of city temperatures. queries (list of tuple): Each tuple contains two integers representing the subrange (1-based indices). Returns: list of int: Minimum temperatures for each subrange. results = [] for l, r in queries: # Convert 1-based indices to 0-based indices for Python list slicing min_temp = min(temps[l-1:r]) results.append(min_temp) return results"},{"question":"Given an array of integers, we define its beauty as the maximum possible sum of its contiguous subarray which has a length of at least one less than the length of the original array. You are to find the beauty of the array. The first line contains a single integer n (2 ≤ n ≤ 5000), the length of the array. The second line contains n integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6), the elements of the array. Output a single integer, the beauty of the array. For example, if the input array is [1, -2, 3, 4, -5], the beauty of the array is found by recognizing the maximum possible sum in contiguous subarrays of lengths 4, 3, 2, and 1 (i.e., any subarray comprising at least one less than the total number of elements). The result would be the maximum sum that respects this constraint.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray of the given array max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def find_beauty(n, arr): Finds the beauty of the array, which is the maximum sum of any contiguous subarray of length between 1 and n-1. if n < 2: raise ValueError(\\"Array length must be at least 2\\") # We need to find the maximum subarray sum for subarrays of length 1 to n-1 # Equivalent to finding max subarray sum of entire array because all lengths <= n-1 are included return max_subarray_sum(arr)"},{"question":"Given an integer `n` representing the number of days in a month, you need to determine the length of the longest subsequence of increasing temperatures out of the `n` days observed. You will be provided with an array of `n` integers representing the daily temperatures. Your task is to find the length of the longest strictly increasing subsequence of temperatures. Input format: - The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of days in the month. - The second line contains `n` integers `t1, t2, ..., tn` (−100 ≤ ti ≤ 100), representing the temperatures observed over the `n` days. Output format: - Print a single integer, the length of the longest subsequence of strictly increasing temperatures. Sample Input: ``` 8 10 22 9 33 21 50 41 60 ``` Sample Output: ``` 5 ``` Explanation: The longest strictly increasing subsequence of temperatures in the given input is `10, 22, 33, 50, 60`, which has a length of 5. Note: - A strictly increasing subsequence is one in which each element is greater than the one preceding it.","solution":"def longest_increasing_subsequence_length(n, temperatures): if n == 0: return 0 # Create an array to store the length of the longest increasing subsequence ending at each position lis = [1] * n # Calculate the subsequences for i in range(1, n): for j in range(i): if temperatures[i] > temperatures[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest increasing subsequence return max(lis)"},{"question":"The corporate security team has noticed a phishing attack targeting employees\' email accounts. The attackers have been sending emails containing a mix of special characters and words disguised to look like legitimate email addresses. The security team wants to identify if an email is suspicious based on the presence of any predefined suspicious word patterns embedded within special characters or random text. Your task is to write a function that checks if any of a given set of suspicious words can be found exactly (case insensitive) within a given email string, ignoring any special characters. # Input The function will receive two inputs: 1. A string `email_content` that represents the content of the email. This string may include special characters, spaces, and random letters. 2. A list of strings `suspicious_words` that contains the words that need to be matched exactly within the email content. The words are case insensitive. # Output The function should return \\"YES\\" if any of the suspicious words are found exactly in the email content (ignoring special characters and case), otherwise return \\"NO\\". # Examples ```python email_content = \\"Hello, please visit our website at !!Company123.com for more details.\\" suspicious_words = [\\"company123\\", \\"phishing\\", \\"scam\\"] Output: \\"YES\\" email_content = \\"Urgent! Update your password at SecureSite.now\\" suspicious_words = [\\"malware\\", \\"phishing\\"] Output: \\"NO\\" ``` Note: - To find the words exactly, consider ignoring any non-alphanumeric characters in `email_content` and comparing the resulting cleaned string with the `suspicious_words` list. - Ensure the solution is efficient enough to handle large email content and large lists of suspicious words.","solution":"import re def check_suspicious_email(email_content, suspicious_words): Check if any suspicious words can be found exactly (case insensitive) within the given email string, ignoring any special characters. Args: email_content (str): The content of the email. suspicious_words (list): The words that need to be matched exactly within the email content. Returns: str: \\"YES\\" if any suspicious words are found, otherwise \\"NO\\" # Remove non-alphanumeric characters and convert to lowercase cleaned_content = re.sub(r\'[^A-Za-z0-9]\', \'\', email_content).lower() # Convert suspicious words to lowercase for case insensitive comparison suspicious_words = [word.lower() for word in suspicious_words] for word in suspicious_words: if word in cleaned_content: return \\"YES\\" return \\"NO\\""},{"question":"You are given a sequence of length n. You have to insert the minimum number of additional operations to sort the sequence in non-decreasing order. You have two types of operations: 1. Insert a duplicate of any existing element. 2. Increment any element in the sequence by 1. Determine the minimum number of operations required to sort the sequence in a non-decreasing order. # Input: - The first line contains an integer n (1 le n le 10^5), the length of the sequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9), representing the elements of the sequence. # Output: - Output a single integer, the minimum number of operations required to sort the sequence in non-decreasing order. # Example: **Input:** ``` 5 3 1 2 2 1 ``` **Output:** ``` 3 ``` **Explanation:** To sort the sequence [3, 1, 2, 2, 1], you could: - Increment the first element (3) by 1 to get 4. - Duplicate the second element (1) to get another 1. - Increment the third element (2) by 1 to get 3. The resulting sequence would be [4, 1, 1, 3, 2, 2] after the operations, which can be further sorted to [1, 1, 2, 2, 3, 4] with three operations: insert, insert, insert. Thus, the minimum number of operations is 3.","solution":"def min_operations_to_sort(n, sequence): Returns the minimum number of operations required to sort the sequence in non-decreasing order. Operations: 1. Insert a duplicate of any existing element. 2. Increment any element in the sequence by 1. from bisect import bisect_left # We need to find the length of the longest increasing subsequence (LIS) # This will help us determine the minimum deletions needed lis = [] for num in sequence: # Find the position to insert num in the current lis pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num # Minimal operations needed to sort the array is to add enough elements # to make the whole array increasing. return n - len(lis)"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation on the string any number of times: Choose some non-empty substring of s and move it to the end of the string. Your task is to determine the minimum number of unique substrings required to obtain the original string by only using these operations. For example, consider the string \\"abcbabc\\": - One way to move substrings to the end to form the original string is starting with \\"abc\\" and appending \\"babc\\", forming \\"abcbabc\\". - Another way involves \\"ab\\" and \\"cbabc\\". The first line contains a single integer t (1 le t le 100) — the number of test cases. The next t lines each contain a string s (1 le |s| le 1000). Output t lines. For each test case, output a single integer — the minimum number of unique substrings required. Example: Input: ``` 2 abcbabc aaaa ``` Output: ``` 2 1 ```","solution":"def min_unique_substrings(s): Determine the minimum number of unique substrings required to obtain the original string by only using the allowed operations. from itertools import groupby # Count number of unique characters in the given string unique_char_count = len(set(s)) return unique_char_count def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_unique_substrings(s)) return results"},{"question":"Given a shelf of books, Anna would like to organize them by height such that the smallest book is on the leftmost side and the tallest book is on the rightmost side. But she can perform only a limited number of adjacent swaps to achieve this arrangement. You are given the initial heights of the books on the shelf and the maximum number of swaps she can perform. Your task is to determine the height arrangement of books after performing up to the allowed number of swaps optimally (i.e., trying to get as close as possible to the desired arrangement). The first line of input contains two integers, n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100), where n is the number of books on the shelf and k is the maximum number of adjacent swaps allowed. The second line contains n space-separated integers representing the initial heights of the books. Print a single line containing the heights of the books after performing up to the allowed number of swaps. Example: Input: 6 4 4 3 1 5 2 6 Output: 1 3 4 2 5 6 Explanation: Anna can perform the following swaps: 1. Swap book at position 2 (3) with book at position 3 (1) to get [4, 1, 3, 5, 2, 6]. 2. Swap book at position 3 (3) with book at position 4 (5) to get [4, 1, 5, 3, 2, 6]. 3. Swap book at position 4 (3) with book at position 5 (2) to get [4, 1, 5, 2, 3, 6]. 4. Swap book at position 2 (1) with book at position 1 (4) to get [1, 4, 5, 2, 3, 6]. Anna stops now as she has made the maximum number of allowed swaps. The final arrangement is [1, 4, 5, 2, 3, 6]. Although this isn\'t fully sorted, it is the closest possible within 4 swaps.","solution":"def organize_books(n, k, heights): heights = heights[:] for i in range(n - 1): if k <= 0: break min_pos = i for j in range(i + 1, min(i + k + 1, n)): if heights[j] < heights[min_pos]: min_pos = j for j in range(min_pos, i, -1): heights[j], heights[j - 1] = heights[j - 1], heights[j] k -= 1 if k <= 0: break return heights"},{"question":"David has a collection of n books lined up on his shelf. He wants to read as many books as possible but only within a given timeframe. Each book takes a certain amount of time to read. Your task is to determine the maximum number of books David can read without exceeding the given total reading time t. You are given the number of books n and the total available reading time t as well as a list of integers where the i-th integer represents the time it takes David to read the i-th book. The first line contains two integers n and t (1 leq n leq 100,000, 1 leq t leq 10^9) — the number of books and the total available reading time. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^6) — the time it takes to read each book. Print a single integer — the maximum number of books David can read without exceeding the total available time. Consider the example: For input: ``` 5 10 1 2 3 4 5 ``` The output should be: ``` 4 ``` In this example, David can read the first four books (1, 2, 3, and 4) in a total of 10 units of time, which does not exceed the given time limit. He cannot read all five books because the total time would be 15 units.","solution":"def max_books(n, t, times): max_books_read = 0 current_time = 0 left = 0 for right in range(n): current_time += times[right] while current_time > t: current_time -= times[left] left += 1 max_books_read = max(max_books_read, right - left + 1) return max_books_read"},{"question":"You are given an array of integers `nums`, and an integer `target`. You need to determine if there exist two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] == target`. If such a pair exists, return `true`, otherwise return `false`. The first line of input contains two integers `n` and `target` (1 ≤ `n` ≤ 10^6, -10^9 ≤ `target` ≤ 10^9) which represent the size of the array and the target sum, respectively. The second line contains `n` integers `nums[i]` (-10^9 ≤ `nums[i]` ≤ 10^9), the elements of the array. Print `true` if there exists two distinct indices `i` and `j` such that `nums[i] + nums[j] == target`. Otherwise, print `false`. # Example Input ``` 5 9 2 7 11 15 3 ``` Output ``` true ``` Input ``` 4 20 10 30 5 7 ``` Output ``` false ``` # Explanation In the first example, there exist two distinct indices `1` and `0` where `nums[1] + nums[0] = 7 + 2 = 9`, thus the output is `true`. In the second example, no such pair exists that adds up to `20`, thus the output is `false`.","solution":"def has_pair_with_sum(nums, target): Determines if there exist two distinct indices i and j in the array such that nums[i] + nums[j] == target. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"In a city, there are n intersections and m roads connecting them. Each road is bi-directional and has a certain length. The city council wants to monitor the traffic and reduce congestion by imposing a toll on certain roads. Your task is to determine the total length of roads on which tolls can be imposed for a series of toll schemes proposed by the council. Each toll scheme specifies a range of roads. The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 20000) — the number of intersections and roads, respectively. Each of the next m lines contains three space-separated integers u, v, l (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ l ≤ 10^9) — representing a road between intersections u and v with length l. The next line contains an integer q (1 ≤ q ≤ 10000) — the number of toll schemes. Each of the following q lines contains two space-separated integers li and ri (1 ≤ li ≤ ri ≤ m) — the range of roads the i-th toll scheme covers. For each toll scheme, print the total length of the roads included in that range. Input: ``` 5 5 1 2 10 2 3 20 4 5 40 3 5 30 1 4 50 3 1 3 2 5 1 5 ``` Output: ``` 70 140 150 ```","solution":"def total_road_lengths(n, m, roads, q, toll_schemes): Calculate the total length of roads for each toll scheme. Parameters: n (int): Number of intersections m (int): Number of roads roads (list of tuples): List containing tuples with road informations (u, v, l) q (int): Number of toll schemes toll_schemes (list of tuples): List containing tuples with toll schemes (li, ri) Returns: list: Total lengths for each toll scheme # Prepare prefix sum array for the lengths of roads prefix_sums = [0] * (m + 1) for i in range(1, m + 1): prefix_sums[i] = prefix_sums[i - 1] + roads[i - 1][2] # Calculate total lengths for each toll scheme results = [] for li, ri in toll_schemes: total_length = prefix_sums[ri] - prefix_sums[li - 1] results.append(total_length) return results # Input handling function def solve(input_data): data = input_data.split() n = int(data[0]) m = int(data[1]) index = 2 roads = [] for _ in range(m): u = int(data[index]) v = int(data[index + 1]) l = int(data[index + 2]) roads.append((u, v, l)) index += 3 q = int(data[index]) index += 1 toll_schemes = [] for _ in range(q): li = int(data[index]) ri = int(data[index + 1]) toll_schemes.append((li, ri)) index += 2 result = total_road_lengths(n, m, roads, q, toll_schemes) return \'n\'.join(map(str, result)) # Example usage: input_data = \'\'\'5 5 1 2 10 2 3 20 4 5 40 3 5 30 1 4 50 3 1 3 2 5 1 5\'\'\' print(solve(input_data))"},{"question":"You are given a rectangular grid with ‘1’s representing land cells and ‘0’s representing water cells. Land cells connected horizontally or vertically form an island. You need to determine the largest island\'s area in the grid. The area of an island is the number of ‘1’s in the island. Write a function that receives a 2D list of characters representing the grid as input and outputs an integer which is the largest island area. If there is no land, the function should return 0. Input: The first line of input contains two integers n and m (1 ≤ n, m ≤ 300), the number of rows and columns in the grid. The next n lines each contain m characters (\'1\' or \'0\') separated by space. Each line represents a row in the grid. Output: Print the largest island\'s area. Example: Input: 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 Output: 4 Explanation: The largest island is formed by the top-left 1\'s and has an area of 4. The 1\'s at the top-right and middle have an area of 1 each, and the bottom-right 1\'s have an area of 2. The largest island area hence is 4. Note that the output should be the maximum area of any island formed by connecting adjacent ‘1’s, where adjacency is only horizontal and vertical, not diagonal.","solution":"def largest_island_area(grid): rows = len(grid) cols = len(grid[0]) def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != \'1\': return 0 # mark the cell visited grid[r][c] = \'0\' area = 1 area += dfs(r+1, c) area += dfs(r-1, c) area += dfs(r, c+1) area += dfs(r, c-1) return area max_area = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\': max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"A new online marketplace is gaining popularity among traders who buy and sell various items. Each item has a certain price and traders want to maximize their profit by buying low and selling high. In order to analyze the potential profit, a trader has collected the prices of a particular item over a span of several days. Now, they want to determine the maximum profit they can achieve by buying on one day and selling on a later day. Help the trader by writing a program that computes the maximum possible profit they can achieve. If no profit can be made, the program should return 0 indicating that it\'s not advisable to buy the item during the given timeframe. The first line of input contains an integer `d` (1 ≤ d ≤ 10^5) — the number of days the price information is collected for. The second line contains `d` integers `p1, p2, ..., pd` (1 ≤ pi ≤ 10^4 for all 1 ≤ i ≤ d) — the prices of the item on each of the `d` days respectively. Output a single integer representing the maximum profit that can be achieved. If no profit can be made, output 0. Examples: ``` Input: 7 7 1 5 3 6 4 Output: 5 Input: 5 7 6 4 3 1 Output: 0 ``` Explanation: In the first example, buying on day 2 and selling on day 5 gives the maximum profit of 6 - 1 = 5. In the second example, no profit can be made so the output is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling the item. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Given a string `s` of length `n` consisting of characters \'L\', \'R\', and \'P\', you need to divide the string into the minimum number of substrings such that each substring can only contain one unique character. For example, if the string is \\"LLRRPLP\\", the minimum division would result in three substrings: \\"LL\\", \\"RR\\", \\"P\\", \\"L\\", \\"P\\". # Input - The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. - Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 1000) consisting of the characters \'L\', \'R\', and \'P\'. # Output For each test case, output a single integer on a new line — the minimum number of substrings needed to divide the string according to the given criteria. # Examples Input ``` 3 LLRRPLP PPP LRLRLR ``` Output ``` 5 1 6 ``` # Explanation Example 1 In the first test case, the string \\"LLRRPLP\\" can be divided into \\"LL\\", \\"RR\\", \\"P\\", \\"L\\", \\"P\\", so the minimum number of substrings is 5. Example 2 In the second test case, the string \\"PPP\\" can be treated as a single substring, so the answer is 1. Example 3 In the third test case, the string \\"LRLRLR\\" needs each character to be in its own substring, so the answer is 6.","solution":"def minimum_substrings(s): Given a string s consisting of characters \'L\', \'R\', and \'P\', returns the minimum number of substrings needed such that each substring contains only one unique character. if not s: return 0 count = 1 # Start with the first character counting as a substring for i in range(1, len(s)): if s[i] != s[i-1]: count += 1 return count def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(minimum_substrings(s)) return results"},{"question":"Once upon a time in a distant kingdom, there was a renowned sorcerer who loved teaching his magic to apprentices. The kingdom had n villages, some of which were connected by bidirectional paths. In total, the kingdom had exactly n-1 paths, and it was possible to travel between any pair of villages using these paths. In other words, the network of villages formed an undirected tree. The sorcerer lived in one of these villages and wanted to conduct magical experiments by gathering a specific number of his apprentices in such a way that every village had exactly one apprentice and that two apprentices can\'t conduct experiments in their respective villages if they are directly connected by a path. In simpler terms, it is forbidden for two directly connected villages to have apprentices conducting simultaneous experiments. To help the sorcerer, you need to determine the maximum number of apprentices that can conduct their experiments simultaneously under the given condition. The first line of input contains an integer n (2 ≤ n ≤ 100000) representing the number of villages. The next n-1 lines contain the pairs of integers xi, yi (1 ≤ xi, yi ≤ n) indicating that there is a path connecting the villages xi and yi. Print a single integer representing the maximum number of apprentices that can conduct experiments simultaneously without violating the given condition. For example: Input: ``` 3 1 2 1 3 ``` Output: ``` 2 ``` In this example, villages 2 and 3 can have apprentices conducting experiments simultaneously as they are not directly connected by a path but each connected to village 1. However, if an apprentice conducts an experiment in village 1, no other village can have apprentices due to direct connections. Hence the maximum number of apprentices that can conduct simultaneous experiments is 2.","solution":"def max_apprentices(n, paths): from collections import defaultdict, deque # Create an adjacency list for the tree graph adjacency_list = defaultdict(list) for x, y in paths: adjacency_list[x].append(y) adjacency_list[y].append(x) # Perform Breadth-First Search (BFS) visited = [False] * (n + 1) color = [-1] * (n + 1) queue = deque([1]) visited[1] = True color[1] = 0 # Starting point, color it with 0 while queue: node = queue.popleft() current_color = color[node] for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True color[neighbor] = 1 - current_color # Alternate color queue.append(neighbor) # Count the number of nodes of each color color_0_count = color.count(0) color_1_count = color.count(1) # The maximum apprentices will be the larger group return max(color_0_count, color_1_count)"},{"question":"You are given a sequence of N integers, where each integer represents the height of a tree. You want to cut some trees to form a continuous subarray such that the difference between the height of the tallest tree and the shortest tree in this subarray is minimized. Your task is to find the minimum possible difference between the maximum and minimum tree heights for any continuous subarray of the sequence. The first line contains a single integer N (1 ≤ N ≤ 10^5) - the number of trees. The second line contains N space-separated integers h1, h2, ..., hN (-10^9 ≤ hi ≤ 10^9) - the heights of the trees. Output a single integer - the minimum possible difference between the maximum and minimum tree heights for any continuous subarray. # Example Input 8 3 -1 6 2 8 4 -2 5 Output 0 Explanation: - One possible subarray is [-1, 6] which has a minimum difference of 0 (since both -1 and 6 cancel each other out).","solution":"def min_diff_subarray(arr): Finds the minimum possible difference between the maximum and minimum tree heights for any continuous subarray. n = len(arr) if n == 0: return 0 min_diff = float(\'inf\') for i in range(n): min_height = arr[i] max_height = arr[i] for j in range(i, n): min_height = min(min_height, arr[j]) max_height = max(max_height, arr[j]) min_diff = min(min_diff, max_height - min_height) return min_diff"},{"question":"The kingdom of Arithmania is famous for its elaborate encryption methods. The king has devised a particularly intriguing encryption algorithm based on the properties of prime numbers. Given an integer `n`, the encryption algorithm involves the following steps: 1. Find all prime numbers less than or equal to `n`. 2. For each found prime number, generate a sequence by multiplying the prime number by successive integers starting from 1 up to the largest integer that, when multiplied by the prime, does not exceed `n`. The kingdom\'s mathematicians need help to implement this encryption algorithm. They require you to write a program that generates these sequences for them. Input: - An integer `n` (1 ≤ n ≤ 1000). Output: - For each prime number up to `n`, output the sequence generated as described. Each sequence should be printed on a new line with the prime number followed by its sequences, separated by spaces. Example: For n = 10, the output should be: ``` 2 2 4 6 8 10 3 3 6 9 5 5 10 7 7 ``` Here, the prime numbers up to 10 are 2, 3, 5, and 7. The sequence for each prime is generated by multiplying the prime with successive integers such that the product does not exceed `n`. Note: - Ensure the primes and their sequences are printed in ascending order. - Use efficient algorithms for finding prime numbers and generating the sequences.","solution":"def is_prime(num): Return True if `num` is a prime number, otherwise False. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def generate_prime_sequences(n): Generate sequences for all prime numbers up to and including `n`. prime_sequences = [] for num in range(2, n + 1): if is_prime(num): sequence = [num * i for i in range(1, (n // num) + 1)] prime_sequences.append(sequence) return prime_sequences def format_prime_sequences(n): Format the output of prime sequences. sequences = generate_prime_sequences(n) for sequence in sequences: print(\\" \\".join(map(str, sequence))) # Example call n = 10 format_prime_sequences(n)"},{"question":"You are provided with a rectangular garden represented by a grid of size n x m. Each cell in the garden can either be empty (.) or contain a flower (f). You have to place sprinklers in some of the empty cells to ensure that every flower in the garden gets watered. A sprinkler placed in a cell (i, j) can water all the cells in the same row (i) and the same column (j). Find the minimum number of sprinklers needed to water all flowers in the garden. The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid, respectively. Each of the next n lines contains a string of length m composed only of characters \'.\' and \'f\'. Print a single integer — the minimum number of sprinklers needed. Consider the following example: Input: 4 6 ...... ..f... ...... f...f. Output: 2 In this example, placing one sprinkler at (2,3) can water the flower in the second row and one sprinkler at (4,1) can water the flowers in the fourth row. No other sprinklers are needed.","solution":"def min_sprinklers(n, m, garden): row_flower = [False] * n col_flower = [False] * m for i in range(n): for j in range(m): if garden[i][j] == \'f\': row_flower[i] = True col_flower[j] = True row_sprinklers = sum(row_flower) col_sprinklers = sum(col_flower) return min(row_sprinklers, col_sprinklers) # Example usage: garden = [ \\"......\\", \\"..f...\\", \\"......\\", \\"f...f.\\" ] print(min_sprinklers(4, 6, garden)) # Output: 2"},{"question":"In a magical forest, there are n different types of trees in a row, numbered from 1 to n. Each tree has some magic fruit on it. The magic fruit on the i-th tree grants a power of pi when consumed. A wizard can collect magic fruit from these trees, but there are specific rules for collecting: 1. The wizard can only start collecting from one end of the row of trees (either from the first tree on the left or the last tree on the right). 2. Once the wizard starts collecting, they must continue in the same direction without skipping any trees. 3. The wizard must collect fruit from exactly m consecutive trees to maximize the total power collected. Write a program to determine the maximum power that the wizard can collect by following these rules. The first line contains two integers, n and m (1 ≤ m ≤ n ≤ 100000) — the number of trees and the number of consecutive trees the wizard must collect from. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the power of the magic fruit on each tree. Print the maximum power the wizard can collect. For example, in the sequence of trees with p value [2, 5, 1, 3, 7, 4], n=6 and m=3: - Collecting from the left end: choosing trees [2, 5, 1] gives a total power = 8 - Collecting from the right end: choosing trees [3, 7, 4] gives a total power = 14 Thus, the maximum power the wizard can collect following the rules is 14.","solution":"def max_power_collected(n, m, power_list): Given the number of trees (n), the number of consecutive trees (m) to collect from, and a list of powers (power_list), returns the maximum power that can be collected by the wizard. # Compute the maximum power when starting from the left max_power_left = sum(power_list[:m]) # Compute the maximum power when starting from the right max_power_right = sum(power_list[-m:]) # Return the greater of the two return max(max_power_left, max_power_right)"},{"question":"During a family gathering, the Smiths decided to play a game involving strings and strings manipulation. They need your help to determine if it\'s possible to rearrange a given string to form a palindrome. A string is considered a palindrome if it reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes. Your task is to write a program that checks if a given string can be rearranged to form a palindrome. The first line of the input contains a single integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000), the string for which you need to check the palindrome rearrangement possibility. For each test case, print \\"YES\\" if the string can be rearranged to form a palindrome and \\"NO\\" otherwise. Example: Input: 3 civic ivicc hello Output: YES YES NO Explanation: 1. \\"civic\\" itself is a palindrome. 2. \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. 3. \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(string): Check if a given string can be rearranged to form a palindrome. :param string: str : input string to check :return: str : \\"YES\\" if it can form a palindrome, \\"NO\\" otherwise from collections import Counter count = Counter(string) odd_count = sum(1 for char in count if count[char] % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindrome_rearrangement(t, test_cases): Process multiple test cases to check palindrome rearrangement possibility. :param t: int : number of test cases :param test_cases: list : list of test case strings :return: list : list of results for each test case results = [] for test_case in test_cases: results.append(can_form_palindrome(test_case)) return results"},{"question":"You are given a string consisting of lowercase English letters. You can remove any number of characters from this string (including zero). Your goal is to determine the length of the longest possible substring of the resulting string that is palindromic. A palindromic string reads the same forward and backward. Print the length of the longest palindromic substring you can get. The first line contains a single string `s` (1 ≤ |s| ≤ 10^5). Print a single integer — the length of the longest palindromic substring. Example: Input: abacdfgdcaba Output: 3 Input: bbbbb Output: 5","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string. n = len(s) if n == 0: return 0 # A 2D array to store the palindrome status dp = [[0] * n for _ in range(n)] max_length = 1 # Minimum length of a palindromic substring # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = 1 start = 0 # Check for substring of length 2. for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = 1 start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] == 1 and s[i] == s[j]: dp[i][j] = 1 if length > max_length: start = i max_length = length return max_length"},{"question":"In a certain kingdom, there are n villages connected by m bidirectional roads. Each road has a specific length. Your goal is to find the shortest possible path to visit every village exactly once, starting and ending at the same village. This is known as the Travelling Salesman Problem (TSP). The input consists of: - The first line contains two space-separated integers n and m (2 ≤ n ≤ 10, 1 ≤ m ≤ 90), the number of villages and the number of roads, respectively. - The next m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a road between village u and village v of length w. All roads are bidirectional, meaning you can traverse them in both directions. Your task is to compute the length of the shortest possible tour that visits each village exactly once and returns to the starting village. If no such tour exists, output -1. For example, for the first sample input: ``` 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 ``` An optimal path would be `1 -> 2 -> 4 -> 3 -> 1` with a total length of 10 + 25 + 30 + 15 = 80. Thus, the output should be `80`. For the second sample input: ``` 3 3 1 2 10 2 3 15 3 1 20 ``` An optimal path would be `1 -> 2 -> 3 -> 1` with a total length of 10 + 15 + 20 = 45. Thus, the output should be `45`.","solution":"from itertools import permutations def tsp(n, m, roads): # Create a distance matrix initialized with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Populate distance matrix with road data for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Check for isolated nodes by checking if any village has no connections for i in range(n): if all(dist[i][j] == float(\'inf\') for j in range(n) if i != j): return -1 # Initialize the shortest path length to a large number min_path_length = float(\'inf\') # Check all permutations of villages for shortest tour for perm in permutations(range(n)): current_length = 0 for i in range(n): current_length += dist[perm[i]][perm[(i+1) % n]] min_path_length = min(min_path_length, current_length) return min_path_length if min_path_length < float(\'inf\') else -1 # Examples for manual testing if __name__ == \\"__main__\\": print(tsp(4, 6, [(1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30)])) # Output: 80 print(tsp(3, 3, [(1, 2, 10), (2, 3, 15), (3, 1, 20)])) # Output: 45"},{"question":"You are given an array of integers and a single integer target. Your task is to find all unique pairs of integers in the array that sum up to the given target. Each pair should be represented as a sorted tuple of two integers, and the solution should not contain duplicate pairs. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (-10^5 ≤ ai ≤ 10^5) — the elements of the array. - The third line contains a single integer target (-10^5 ≤ target ≤ 10^5) — the sum to find pairs for. # Output - Output all unique pairs of integers from the array that sum up to the target. Each pair should be printed in a sorted tuple format (x, y) where x ≤ y. - If there are no such pairs, output \\"No pairs found\\". # Example Input ``` 5 1 3 2 2 -1 4 ``` Output ``` (1, 3) (2, 2) ``` Input ``` 3 1 2 3 7 ``` Output ``` No pairs found ``` # Explanation In the first sample, the pairs (1, 3) and (2, 2) both sum up to 4 and are unique. In the second sample, no pairs of integers add up to 7, so the output is \\"No pairs found\\".","solution":"def find_pairs(nums, target): Finds unique pairs in the list of nums that sum up to the target. Args: nums (list of int): List of integers target (int): The target sum Returns: list of tuple of int: List of unique pairs (x, y) such that x + y = target and x <= y seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) if not pairs: return \\"No pairs found\\" else: return sorted(list(pairs)) # Reading the inputs and processing them def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) array = list(map(int, data[1:n+1])) target = int(data[n+1]) result = find_pairs(array, target) if result == \\"No pairs found\\": print(result) else: for pair in result: print(pair)"},{"question":"You are given a string s of length n consisting of lowercase English letters. You need to process q queries on the string. Each query consists of three integers l, r, and k (1 ≤ l ≤ r ≤ n, 0 ≤ k ≤ r-l+1). For each query, your task is to determine whether it is possible to rearrange the substring s[l..r] (1-based indexing) such that it becomes a palindrome after at most k character modifications. A modification means changing one character to another arbitrary character. The first line of the input contains integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000). The next line contains the string s. The following q lines contain three integers l, r, and k. For each query, print \\"YES\\" if it\'s possible to rearrange and modify the substring s[l..r] to form a palindrome with at most k modifications. Otherwise, print \\"NO\\". # Input Format - The first line contains two integers n and q. - The second line contains the string s. - The following q lines contain three integers l, r, and k. # Output Format For each query, print \\"YES\\" or \\"NO\\" in a single line depending on the possibility of forming the required palindrome. # Example Input ``` 7 2 abacaba 1 7 1 2 5 0 ``` Output ``` YES NO ```","solution":"def can_form_palindrome_with_k_modifications(n, q, s, queries): results = [] for l, r, k in queries: substr = s[l-1:r] frequency = {} for char in substr: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 odd_count = sum(1 for count in frequency.values() if count % 2 != 0) # To make odd_count number of characters occurrences to even, we need (odd_count // 2) modifications modifications_required = odd_count // 2 if modifications_required <= k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant kingdom, a wise king decided to organize a grand event to improve his citizens\' problem-solving skills. The event featured a thrilling game involving a grid and numbers. Here\'s how the game works: Given an n x n grid, you need to fill each cell on the grid with a number from 1 to n^2 in such a way that each number appears exactly once and the absolute difference between any two consecutive numbers (in terms of value) placed in adjacent cells in the grid (vertically or horizontally) must be exactly 1. For example, if n = 2, the grid would be filled as follows: 1 2 4 3 You are given an integer n representing the size of the grid. Your task is to construct such a grid and print it. If multiple solutions exist, you may output any of them. Input: - The first and only line contains a single integer n (1 ≤ n ≤ 100). Output: - The output should consist of n lines, each containing n integers, representing the filled grid. If it is impossible to construct such a grid, print \\"-1\\". Example: Input: 2 Output: 1 2 4 3","solution":"def fill_grid(n): if n == 1: return [[1]] if n % 2 == 0: grid = [[0] * n for _ in range(n)] num = 1 for i in range(n): if i % 2 == 0: for j in range(n): grid[i][j] = num num += 1 else: for j in range(n - 1, -1, -1): grid[i][j] = num num += 1 return grid else: return -1 def print_grid(grid): if grid == -1: print(-1) else: for row in grid: print(\' \'.join(map(str, row)))"},{"question":"Emma is designing a new board game and needs a program to help her analyze a key aspect of the game. The game involves a board with cells arranged in a grid of size n times m. Each cell in the grid can either be empty or contain an obstacle. Emma wants to know the minimum number of moves required for a piece to travel from the top-left corner of the grid to the bottom-right corner. It is possible to move the piece to an adjacent cell to the left, right, up, or down, but the piece cannot move into or through cells containing obstacles. Write a program that reads the dimensions of the grid, the grid itself, and determines the minimum number of moves required for the piece to reach the bottom-right corner. If it is not possible to reach the bottom-right corner, the program should output -1. The first line of the input contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains a string of length m consisting of characters \'E\' (representing an empty cell) or \'O\' (representing an obstacle). Output a single integer — the minimum number of moves required for the piece to reach the bottom-right corner, or -1 if it is not possible. Sample Input 1: 3 3 EEE EOE EEE Sample Output 1: 4 Sample Input 2: 3 3 EEE OOO EEE Sample Output 2: -1","solution":"from collections import deque def min_moves(n, m, grid): if not grid or grid[0][0] == \'O\' or grid[n-1][m-1] == \'O\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, distance = queue.popleft() if row == n-1 and col == m-1: return distance for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'E\': visited[new_row][new_col] = True queue.append((new_row, new_col, distance + 1)) return -1"},{"question":"Given a string consisting of lowercase English letters, your goal is to find the length of the longest substring without repeating characters. # Input The input consists of a single line, which is a string ( s ) with length ranging from ( 1 ) to ( 10^5 ), consisting of only lowercase English letters. # Output Print a single integer, the length of the longest substring without repeating characters. # Example **Input**: ``` abcabcbb ``` **Output**: ``` 3 ``` **Explanation**: The answer is \\"abc\\", with the length of 3. **Input**: ``` bbbbb ``` **Output**: ``` 1 ``` **Explanation**: The answer is \\"b\\", with the length of 1. **Input**: ``` pwwkew ``` **Output**: ``` 3 ``` **Explanation**: The answer is \\"wke\\", with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring. # Note - You need to find the length of a substring which is formed by consecutive characters without repetition. - The solution should be efficient enough to handle the input size within the given constraints.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_set = set() left = 0 longest = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) longest = max(longest, right - left + 1) return longest"},{"question":"A statue exhibition will be held in a museum with multiple rooms arranged in a line. Each room has a certain number of statues. When guests visit the exhibition, they want to see as many statues as possible without revisiting any room. Therefore, it is important to maximize the continuous sequence of rooms they can start visiting from. Given the number of statues in each room, you are tasked with determining the maximum number of rooms guests can visit without revisiting any room. The program should: 1. Receive the number of rooms, n (1 leq n leq 10^5), in the first line. 2. Receive an array of integers a (1 leq a_i leq 10^9), representing the number of statues in each room. Output the maximum number of rooms that guests can visit consecutively. **Examples:** **Input:** ``` 5 1 2 0 4 5 ``` **Output:** ``` 5 ``` **Explanation:** In this example, guests can visit the sequence of all 5 rooms ([1, 2, 0, 4, 5]) without returning to any room, so the maximum number of rooms visited is 5. **Input:** ``` 7 3 2 1 0 1 0 1 ``` **Output:** ``` 4 ``` **Explanation:** Guests can visit the sequence [3, 2, 1, 0], which is the longest sequence without revisiting any room, so the maximum number of rooms visited is 4.","solution":"def max_rooms_visited(n, statues): Returns the maximum number of continuous rooms that guests can visit. # Since there are no constraints mentioned about revisiting room/statue count, # we can directly take the count of rooms which guests can visit. return n"},{"question":"You are given two sorted arrays nums1 and nums2 where the length of nums1 is m and the length of nums2 is n. Merge nums2 into nums1 as one sorted array. The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2. Write a function to merge nums2 into nums1 such that the final array is sorted in non-decreasing order. # Function Signature: ```python def merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None: # your code here ``` # Input: - nums1: List[int] - the first sorted array with a length of m + n, the first m elements denote the actual elements of nums1 and the last n elements are set to 0 and should be ignored. - m: int - the number of initialized elements in nums1. - nums2: List[int] - the second sorted array with a length of n. - n: int - the number of initialized elements in nums2. # Output: - Modify nums1 in-place to be the merged sorted array. # Example: ```python # Example 1 nums1 = [1, 2, 3, 0, 0, 0] m = 3 nums2 = [2, 5, 6] n = 3 merge(nums1, m, nums2, n) # Expected output: nums1 = [1, 2, 2, 3, 5, 6] # Example 2 nums1 = [1] m = 1 nums2 = [] n = 0 merge(nums1, m, nums2, n) # Expected output: nums1 = [1] # Example 3 nums1 = [0] m = 0 nums2 = [1] n = 1 merge(nums1, m, nums2, n) # Expected output: nums1 = [1] ``` # Constraints: - 0 ≤ m, n ≤ 200 - 1 ≤ len(nums1), len(nums2) ≤ 200","solution":"def merge(nums1, m, nums2, n): Merge nums2 into nums1 in-place and sort in non-decreasing order. Parameters: nums1 (List[int]): The first sorted array with a length of m + n m (int): The number of initialized elements in nums1 nums2 (List[int]): The second sorted array with a length of n n (int): The number of initialized elements in nums2 # Start from the end of both initialized parts of the arrays idx_nums1 = m - 1 idx_nums2 = n - 1 idx_merged = m + n - 1 # Merge arrays from the end to the beginning while idx_nums1 >= 0 and idx_nums2 >= 0: if nums1[idx_nums1] > nums2[idx_nums2]: nums1[idx_merged] = nums1[idx_nums1] idx_nums1 -= 1 else: nums1[idx_merged] = nums2[idx_nums2] idx_nums2 -= 1 idx_merged -= 1 # If there are remaining elements in nums2, copy them over to nums1 while idx_nums2 >= 0: nums1[idx_merged] = nums2[idx_nums2] idx_nums2 -= 1 idx_merged -= 1"},{"question":"Zerg, who lives on the planet Gephyra, is fond of collecting pebbles. He has found n distinct piles of pebbles, each containing a different non-zero positive integer number of pebbles. Zerg wants to play a game called \\"Consecutive Absorption\\". In this game, Zerg can select any consecutive subarray of piles and, with a single move, combine all the pebbles in those piles into one new pile, thereby removing the selected piles and creating a new single pile. The new single pile will contain the sum of the pebbles from the combined piles. Zerg wants to know the minimum number of moves needed to reduce all piles to a single pile by repeatedly combining consecutive subarrays. The input starts with an integer n (1 ≤ n ≤ 10^5) denoting the number of piles. The next line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) representing the number of pebbles in each pile. Output the minimum number of moves required to reduce the piles to a single pile. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 4 ``` Explanation Zerg can perform the following moves: - Combine the piles {1, 2} into one pile => [3, 3, 4, 5] - Combine the piles {3, 3} into one pile => [6, 4, 5] - Combine the piles {6, 4} into one pile => [10, 5] - Combine the piles {10, 5} into one pile => [15] Thus, Zerg performs 4 moves to reduce the piles to a single pile.","solution":"def min_moves_to_combine_piles(n, piles): Function to determine the minimum number of moves needed to reduce all piles to a single pile. # The minimum number of moves needed to reduce n piles to a single pile is (n - 1) return n - 1"},{"question":"You are given an array of integers `arr` of length `n` and an integer `x`. Your task is to find the length of the smallest contiguous subarray of which the sum is greater than `x`. If there isn\'t one, return `0` instead. # Input - The first line contains two integers `n` and `x` (1 ≤ `n` ≤ 10^5, 1 ≤ `x` ≤ 10^9). - The second line contains `n` integers `arr[i]` (1 ≤ `arr[i]` ≤ 10^4). # Output - Print the length of the smallest contiguous subarray of which the sum is greater than `x`. If there isn\'t one, return `0`. # Example Input ``` 5 9 1 4 45 6 0 19 ``` Output ``` 1 ``` Input ``` 7 51 1 4 45 6 10 19 20 ``` Output ``` 3 ``` # Explanation In the first example, the smallest subarray with a sum greater than 9 is [45], which has a length of 1. In the second example, the smallest subarray with a sum greater than 51 is [6, 10, 19], which has a length of 3. # Note - Use a sliding window approach to solve this problem efficiently in O(n) time complexity.","solution":"def smallest_subarray_with_sum_greater_than_x(arr, n, x): Find the length of the smallest contiguous subarray of which the sum is greater than x. If there isn\'t one, return 0. min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else 0"},{"question":"You are given two arrays, `A` and `B`, each consisting of `n` integers. You need to distribute the elements of one array into the other in such a way that maximizes the dot product of the two arrays. The dot product of two arrays is defined as the sum of the products of their corresponding elements. Formally, given two arrays `A = a1, a2, ..., an` and `B = b1, b2, ..., bn`, you want to find a permutation of array `B` such that the dot product of `A` and the permuted array `B` is maximized. Print the maximum dot product value. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000), the length of the arrays `A` and `B`. The second line contains `n` space-separated integers representing the array `A`, where each integer is between -100,000 and 100,000. The third line contains `n` space-separated integers representing the array `B`, where each integer is between -100,000 and 100,000. Print the maximum dot product of the two arrays. # Example **Input:** ``` 3 1 3 -5 -2 4 1 ``` **Output:** ``` 23 ``` **Explanation:** In this example, you can permute `B` to `4 1 -2` to achieve the maximum dot product: 1 * 4 + 3 * 1 + (-5) * (-2) = 4 + 3 + 10 = 17 Alternatively, permuting `B` to `4 -2 1` results in a dot product of: 1 * 4 + 3 * (-2) + (-5) * 1 = 4 - 6 - 5 = -7 Thus, the optimal permutation is `4 1 -2` which yields the maximum dot product 23.","solution":"def max_dot_product(A, B): Returns the maximum dot product by permuting array B. A.sort() B.sort() dot_product = sum(a * b for a, b in zip(A, B)) return dot_product # Input function (for demonstration purpose here, but it would usually be read from input) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) A = list(map(int, data[1:n+1])) B = list(map(int, data[n+1:2*n+1])) print(max_dot_product(A, B))"},{"question":"Emma is a software engineer working on a new project. She needs to arrange some tasks in a specific order before she processes them. Each task is represented as a node in a directed acyclic graph (DAG), and the dependencies between tasks are represented as directed edges between nodes. To ensure all tasks are completed in the correct order, she needs to perform a topological sort on the graph. Given a DAG with `n` nodes numbered from `1` to `n` and `m` directed edges, return any topological order of the nodes such that for any directed edge from node `u` to node `v`, node `u` appears before node `v` in the ordering. Write a program to perform the topological sort. The first line contains two integers, `n` and `m` (`1 ≤ n ≤ 100000`, `0 ≤ m ≤ 100000`), where `n` is the number of nodes and `m` is the number of directed edges. Each of the next `m` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`) representing a directed edge from node `u` to node `v`. Print a single line containing `n` integers, representing the topological order of the nodes. If there are multiple valid topological orders, you may print any of them. Example: ``` Input: 6 6 1 2 1 3 2 4 3 4 4 5 4 6 Output: 1 2 3 4 5 6 ``` In this example, `1 -> 2 -> 4 -> 5 and 1 -> 3 -> 4 -> 6`, so one of the possible topological orders is `1 2 3 4 5 6`. Several other orders are also valid and will be accepted.","solution":"from collections import defaultdict, deque def topological_sort(n, m, edges): Perform topological sort on a DAG. :param n: Number of nodes :param m: Number of edges :param edges: List of tuples (u, v) representing directed edges u -> v :return: List of nodes in topological order # Initialize structures indegree = [0] * (n + 1) graph = defaultdict(list) # Construct the graph for u, v in edges: graph[u].append(v) indegree[v] += 1 # Using a deque for nodes with zero indegree zero_indegree_queue = deque([i for i in range(1, n+1) if indegree[i] == 0]) topo_sort = [] while zero_indegree_queue: node = zero_indegree_queue.popleft() topo_sort.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) # If the topological sort includes all nodes, return it if len(topo_sort) == n: return topo_sort else: return [] # This case should never happen due to the problem constraints."},{"question":"Maria is organizing a music festival and wants to ensure that people at the event have a good time. She has a list of n slots, each slot i has a start time ( s_i ) and end time ( e_i ) when a band can perform. Due to the popularity of the event, no two bands can perform at the same time. Maria decides to maximize the number of bands that can perform at the festival. Your task is to help Maria by finding the maximum number of non-overlapping time slots she can schedule bands for. The first line of input contains an integer ( n ) (1 ≤ n ≤ 100000) — the number of time slots. Each of the next n lines contains two integers ( s_i ) and ( e_i ) (0 ≤ ( s_i ) < ( e_i ) ≤ ( 10^9 )) — the start and end time of the time slot. Output a single integer — the maximum number of bands that can perform without any two performances overlapping. **Example:** Input: ``` 5 1 4 2 5 5 6 3 8 6 10 ``` Output: ``` 3 ``` **Explanation:** In this example, three non-overlapping time slots can be scheduled: (1, 4), (5, 6), and (6, 10).","solution":"def max_non_overlapping_slots(n, slots): Given n time slots (each represented by a tuple (s_i, e_i)), returns the maximum number of non-overlapping time slots. if n == 0: return 0 # Sort the slots based on their end time slots.sort(key=lambda x: x[1]) count = 0 end_time = 0 for slot in slots: if slot[0] >= end_time: count += 1 end_time = slot[1] return count # Example usage: # n = 5 # slots = [(1, 4), (2, 5), (5, 6), (3, 8), (6, 10)] # print(max_non_overlapping_slots(n, slots)) # Output: 3"},{"question":"You are given a sequence of integers, and your task is to make all integers in the sequence equal by performing the following operation any number of times: Select any two distinct integers from the sequence, remove them, and insert back their greatest common divisor (GCD). Write a function `make_all_equal(nums: List[int]) -> int` which takes a list of integers `nums` as input and returns the minimum number of operations required to make all integers in the list equal. If it is impossible to make all integers equal, return -1. # Input - A list of integers `nums` of length `n` where `2 ≤ n ≤ 10^5` and `1 ≤ nums[i] ≤ 10^6`. # Output - An integer representing the minimum number of operations required to make all integers in the list equal. If it is impossible to make all integers equal, return -1. # Example Input ```python nums = [2, 4, 8, 16] ``` Output ```python 3 ``` Input ```python nums = [3, 6, 9] ``` Output ```python 2 ``` Input ```python nums = [2, 3, 5] ``` Output ```python -1 ``` # Note 1. In the first example, we can perform the following operations: - GCD(2, 4) = 2 (nums becomes [2, 8, 16, 2]) - GCD(2, 8) = 2 (nums becomes [2, 16, 2, 2]) - GCD(2, 16) = 2 (nums becomes [2, 2, 2, 2]) 2. In the second example, we can perform the following operations: - GCD(3, 6) = 3 (nums becomes [3, 9, 3]) - GCD(3, 9) = 3 (nums becomes [3, 3, 3]) 3. In the third example, it is impossible to make all integers equal using GCD operations.","solution":"from math import gcd from typing import List from functools import reduce def make_all_equal(nums: List[int]) -> int: Returns the minimum number of operations required to make all integers in the list equal by replacing any two distinct integers with their gcd. If it is impossible to make all integers equal, return -1. # Calculate the gcd of the entire list overall_gcd = reduce(gcd, nums) # If overall_gcd is not 1, it\'s possible to reduce all values to this gcd if overall_gcd == 1: return -1 # The number of operations is just the number of elements minus one return len(nums) - 1"},{"question":"Bob has recently stumbled upon a rare and ancient board game that involves placing tokens on a grid. The grid is an n x n matrix, and each cell can either be empty (denoted by \'.\') or contain a token (denoted by \'T\'). A move consists of placing a token in an empty cell such that no two tokens are in the same row, column, or either diagonal. Bob wants to know the maximum number of tokens he can place on the board following these rules. The first line of the input contains a single integer n (1 ≤ n ≤ 500), which is the size of the board. Each of the next n lines contains exactly n characters, representing the current state of the board. A dot (\'.\') represents an empty cell, and a \'T\' represents a cell that already contains a token. Print a single integer, the maximum number of tokens that can be placed on the board following the rules. **Example:** Input: ``` 3 ... .T. ... ``` Output: ``` 2 ``` In the example, Bob can place two tokens: one in row 1 column 1, and one in row 3 column 3, without violating any rules.","solution":"def max_tokens(n, board): Given an n x n board, find the maximum number of tokens that can be placed on the board following the rules. max_count = 0 def is_safe(row, col, placed_tokens): Check if placing a token at (row, col) is safe (no conflicts). for r, c in placed_tokens: if r == row or c == col or abs(r - row) == abs(c - col): return False return True def backtrack(row, placed_tokens): nonlocal max_count if row == n: max_count = max(max_count, len(placed_tokens)) return for col in range(n): if board[row][col] == \'.\' and is_safe(row, col, placed_tokens): placed_tokens.append((row, col)) backtrack(row + 1, placed_tokens) placed_tokens.pop() backtrack(row + 1, placed_tokens) backtrack(0, []) return max_count"},{"question":"Bob recently found a mysterious box with a set of keys, where each key has a unique identifier between 1 and m. He also found a list of locks, each corresponding to a unique identifier between 1 and m. The keys and locks are placed in separate rooms, but they can communicate with each other through teleporters. Bob observed that each teleporter can be activated, allowing any sequence of keys to be transported from the keys\' room to the locks\' room and vice versa. However, Bob can only use a limited number of teleporters to transfer keys and locks. He can plan his sequence of actions such a way to match every lock with its corresponding key by minimizing the number of teleporter activations. Given the initial permutation of keys in the keys\' room and initial permutation of locks in the locks\' room, you need to determine the minimum number of teleporter activations Bob needs to match each key with its corresponding lock. The first line of the input contains an integer m (1 le m le 1,000), the number of keys (and locks). The second line contains m integers k_1, k_2, ldots, k_m (1 leq k_i leq m), representing the initial permutation of keys\' identifiers in the room. The third line contains m integers l_1, l_2, ldots, l_m (1 leq l_i leq m), representing the initial permutation of locks\' identifiers in the room. Print a single integer representing the minimum number of teleporter activations necessary to match each key with its corresponding lock. Example: Input: ``` 5 5 2 3 1 4 2 3 1 5 4 ``` Output: ``` 2 ``` In this example, Bob needs at least two teleporter activations to match all keys with their corresponding locks.","solution":"def find_min_teleporter_activations(m, keys, locks): key_to_lock_index = {key: idx for idx, key in enumerate(locks)} visited = [False] * m count_cycles = 0 for i in range(m): if not visited[i]: current = i while not visited[current]: visited[current] = True current = key_to_lock_index[keys[current]] count_cycles += 1 return count_cycles # Example usage m = 5 keys = [5, 2, 3, 1, 4] locks = [2, 3, 1, 5, 4] print(find_min_teleporter_activations(m, keys, locks)) # Output: 2"},{"question":"Given an array of integers a_1, a_2, ldots, a_n, an element a_i is called a peak element if it is greater than both its neighbors (if they exist). For example, in the array [1, 3, 2, 4, 1], both 3 and 4 are peak elements. Your task is to find an index i such that a_i is a peak element, or determine if there are no peak elements. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Each test case starts with an integer n (3 le n le 3 cdot 10^4) — the number of elements in the array. The next line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. For each test case, print the index of any peak element if one exists, or -1 if there are no peak elements. If there are multiple answers, you may print any of them. Note that the index is expected to be 1-based. **Example Input:** ``` 2 5 1 3 2 4 1 4 1 2 2 1 ``` **Example Output:** ``` 2 -1 ``` In the first example, both the second element (3) and the fourth element (4) are peaks and either index could be printed. In the second example, there are no peak elements.","solution":"def find_peak_element(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] found = False for j in range(1, n - 1): if arr[j] > arr[j - 1] and arr[j] > arr[j + 1]: results.append(j + 1) # converting to 1-based index found = True break if not found: results.append(-1) return results"},{"question":"Johnny is playing a word game with his friends. The game requires them to transform a given word into another word using a series of valid operations. An operation is defined as changing one letter in the word to any other letter. Each word must always remain a valid English word throughout the transformations. Johnny\'s friends provided him with a dictionary of valid English words. Given the dictionary and two words, determine the minimum number of operations required to transform the starting word into the target word. If it is not possible, return -1. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), representing the number of words in the dictionary. The next n lines each contain one valid English word. The last line contains two words of equal length: the starting word and the target word. Print a single integer representing the minimum number of operations required to transform the starting word into the target word. If it is not possible, print -1. Example input: 7 hot dot dog lot log cog hit hit cog Example output: 4 Explanation: hit -> hot -> dot -> dog -> cog Each transformation must be a valid English word from the provided dictionary.","solution":"from collections import deque def shortest_transformation(n, dictionary, start, end): def differ_by_one(word1, word2): Helper function to check if two words differ by exactly one character. if len(word1) != len(word2): return False differences = sum(1 for a, b in zip(word1, word2) if a != b) return differences == 1 if start not in dictionary or end not in dictionary: return -1 queue = deque([(start, 0)]) visited = set(start) while queue: current_word, transformation_count = queue.popleft() if current_word == end: return transformation_count for word in dictionary: if word not in visited and differ_by_one(current_word, word): visited.add(word) queue.append((word, transformation_count + 1)) return -1"},{"question":"You are given a weighted undirected graph with n vertices and m edges. Each edge has a positive integer weight w. In this graph, you need to find a subgraph that is a simple path (a path that does not intersect itself) with the maximum possible weight. The weight of a path is the sum of the weights of its edges. The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^5) — the number of vertices and edges in the graph, respectively. The following m lines contain three integers each, u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), describing an edge between vertices u and v with weight w. Print a single integer — the maximum weight of a simple path in the given graph. In the first example, the edges {2, 3, 4} and {3, 4, 5} form the maximum weight path. In the second example, choosing the edges {1, 2, 5} and {2, 3, 6} results in the maximum weight path.","solution":"import heapq from collections import defaultdict import sys sys.setrecursionlimit(200000) def calculate_max_path_weight(n, m, edges): Calculate the maximum weight of a simple path in a given graph. :param n: Number of vertices :param m: Number of edges :param edges: List of edges represented as (u, v, w) tuples :return: Maximum weight of simple path graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dfs(node, visited): Depth-First Search to calculate maximum path starting from `node` visited[node] = True max1 = max2 = 0 for neighbor, weight in graph[node]: if not visited[neighbor]: max_path = dfs(neighbor, visited) + weight if max_path > max1: max2 = max1 max1 = max_path elif max_path > max2: max2 = max_path nonlocal max_weight max_weight = max(max_weight, max1 + max2) return max1 max_weight = 0 visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: dfs(i, visited) return max_weight"},{"question":"A museum has an exhibition with a collection of paintings arranged in a single row from left to right. Each painting has an intrinsic beauty value associated with it. You are tasked to select a set of contiguous paintings (at least one painting) and determine the maximum possible sum of their beauty values. You must write a function to find the maximum sum of beauty values for any contiguous subarray of the painting\'s beauty values. The input consists of a single line containing an integer `n` (1 <= n <= 10^5), followed by `n` space-separated integers representing the beauty values of the paintings. Each beauty value will be between -1000 and 1000 inclusively. Print a single integer which is the maximum sum of the beauty values for any contiguous subarray. # Example **Input** ``` 5 1 2 3 -2 5 ``` **Output** ``` 9 ``` **Explanation** The contiguous subarray `[1, 2, 3, -2, 5]` has the maximum sum of its beauty values equal to `9`. Another subarray `[1, 2, 3, -2]` gives a smaller sum of `4`. **Input** ``` 3 -1 -2 -3 ``` **Output** ``` -1 ``` **Explanation** The contiguous subarray `[-1]` has the maximum sum of its beauty values equal to `-1`. Other subarrays give a smaller or equal sum as all values are negative.","solution":"def max_contiguous_sum(n, beauty_values): Determine the maximum sum of any contiguous subarray of beauty values. Parameters: n (int): The number of paintings. beauty_values (list of int): The beauty values of the paintings. Returns: int: The maximum sum of any contiguous subarray of beauty values. max_current = beauty_values[0] max_global = beauty_values[0] for i in range(1, n): max_current = max(beauty_values[i], max_current + beauty_values[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a non-empty string s, you can perform the following operation on any substring of s: 1. Choose any substring of s and reverse it, note that certain substrings when reversed may yield palindromes. Your task is to find the minimum number of operations required to make the entire string s a palindrome. A palindrome is a string that reads the same backward as forward. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output t lines — each containing the minimum number of operations required to make the corresponding string a palindrome. For example, given the input: ``` 2 abba abb ``` The output will be: ``` 0 1 ```","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the string s a palindrome. n = len(s) operations = 0 # Two pointers to compare characters from both ends left = 0 right = n - 1 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations def solve(test_cases): Processes multiple test cases and returns the minimum number of operations for each. results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"Ivan loves playing with dominoes. He has a collection of domino pieces and wants to arrange them on a rectangular grid such that every cell is covered by exactly one piece. A domino piece is a 1 × 2 or 2 × 1 rectangle and can be placed either horizontally or vertically on the grid. Given the dimensions of the grid, determine if it\'s possible to completely cover the grid with dominoes without leaving any gaps or overlapping pieces. The first line of input contains two integers m and n (1 ≤ m, n ≤ 10^5), representing the dimensions of the grid. Output \\"YES\\" if it is possible to cover the entire grid with dominoes, and \\"NO\\" otherwise. # Example Input: 6 4 Output: YES Input: 7 5 Output: NO # Explanation In the first example, the grid has dimensions 6x4 which has an even number of cells (24 cells). Since each domino covers 2 cells, it is possible to cover the entire grid with 12 domino pieces. In the second example, the grid has dimensions 7x5 which has an odd number of cells (35 cells). Since 35 is not divisible by 2, it is impossible to cover the entire grid with dominoes.","solution":"def can_cover_with_dominoes(m, n): Determines if a mxn grid can be completely covered with 1x2 or 2x1 domino pieces. total_cells = m * n if total_cells % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Given two strings `S` and `T`, determine if `S` can be transformed into `T` by performing the following operations zero or more times: 1. Select a non-empty substring of `S` and reverse it. 2. Insert any single character \'a\' or \'b\' at any position in `S`. If it\'s possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains a single integer `n` (1 ≤ n ≤ 100) indicating the number of test cases. Then follow `n` test cases. Each test case is given in two lines. - The first line contains the string `S` (1 ≤ |S| ≤ 100). - The second line contains the string `T` (1 ≤ |T| ≤ 100). Output \\"YES\\" if it\'s possible to transform `S` into `T` using the allowed operations, otherwise, print \\"NO\\". Example: Input: ``` 3 ab ba abc bca ab abc ``` Output: ``` YES YES NO ``` Explanation: - For the first test case, we can reverse the entire string \\"ab\\" to get \\"ba\\". - For the second test case, we can select \\"a\\" and \\"c\\" from \\"abc\\" and reverse \\"bc\\" to get \\"bca\\". - For the third test case, \\"abc\\" cannot be formed by inserting one character \'a\' or \'b\' into \\"ab\\".","solution":"def can_transform(S, T): if sorted(S) == sorted(T) or set(T).issubset(set(S)): return \\"YES\\" return \\"NO\\" def process_test_cases(n, test_cases): results = [] for i in range(n): S = test_cases[i][0] T = test_cases[i][1] results.append(can_transform(S, T)) return results"},{"question":"Valera and Arcady are now programming enthusiasts. They are working on a new project and have stumbled upon an interesting problem related to binary strings. Let\'s help them solve it. Given a binary string (containing only \'0\'s and \'1\'s), determine the minimum number of contiguous substrings that need to be modified such that each \'0\' substring becomes \'1\' and vice versa, until the entire string consists of alternating \'0\'s and \'1\'s. A substring in this context is a contiguous sequence of characters within the string. For example, if the string is \\"00110011\\", to make it alternating, you can modify \\"00\\" to \\"11\\" and \\"11\\" to \\"00\\" to get \\"11001100\\". The first line of input contains a non-negative integer n (1 ≤ n ≤ 100) – the length of the binary string. The second line contains a binary string of length n. Output the minimum number of contiguous substrings that need to be modified. Here are some example scenarios: 1. For the binary string \\"00110011\\", divide the string into 2 substrings: \\"00\\" and \\"11\\". 2. For the binary string \\"01010\\", the string is already alternating, so no modifications are needed. In summary: - The first example will output 2. - The second example will output 0.","solution":"def min_modifications_to_alternating(binary_string): Returns the minimum number of contiguous substrings that need to be modified to make the binary_string alternating. n = len(binary_string) # If the length of the binary string is <= 1, no modifications needed. if n <= 1: return 0 modifications = 0 # Traverse through the binary string to count the number of contiguous same characters. for i in range(1, n): if binary_string[i] == binary_string[i - 1]: modifications += 1 # Each pair of same character accounts for one modification. return (modifications + 1) // 2"},{"question":"In a kingdom, there are n cities connected by m roads. Each road has a toll. The king wants to upgrade the kingdom\'s road network by minimizing the toll cost to travel between the cities. If you are given the layout of the cities and the roads between them, determine the minimum cost required to connect all the cities. Use Kruskal\'s algorithm to solve this problem. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100000), the number of cities and roads, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), indicating that there is a road between city u and city v with a toll cost of w. It is guaranteed that there will be no more than one road between any pair of cities. Print a single integer, the minimum total toll cost to connect all the cities. If it\'s impossible to connect all the cities, print \\"Impossible\\".","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return \\"Impossible\\" u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result) def min_cost_to_connect_cities(n, m, roads): edges = [] for road in roads: edges.append(road) return kruskal(n, edges)"},{"question":"Alice and Bob are playing a card game with a deck of cards consisting of n cards, each card having a different integer value written on it. The rules of the game are as follows: 1. Alice starts, and they take turns alternately. 2. On their turn, the player must pick either the card from the top of the deck or the card from the bottom of the deck. 3. The goal is to maximize the sum of the values of the cards picked by each player. Alice and Bob both play optimally. You are given the values of the n cards in the deck as an array. Determine the maximum possible sum of the card values that Alice can collect if both play optimally. # Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of cards. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values on the cards in the order they form a deck. # Output: - Print a single integer — the maximum sum of the card values that Alice can collect if both players play optimally. # Example: Input: ``` 4 1 2 9 4 ``` Output: ``` 10 ``` # Explanation: In the given example, Alice will pick the card with value 1, Bob will pick the card with value 4, Alice will pick the card with value 9, and Bob will pick the card with value 2. The total value Alice collects is 1 + 9 = 10.","solution":"def max_alice_sum(cards): n = len(cards) def play(start, end, turn): if start > end: return 0 if dp[start][end] != -1: return dp[start][end] if turn == 0: # Alice\'s turn, maximize the score dp[start][end] = max(cards[start] + play(start + 1, end, 1), cards[end] + play(start, end - 1, 1)) else: # Bob\'s turn, minimize Alice\'s possible score next dp[start][end] = min(play(start + 1, end, 0), play(start, end - 1, 0)) return dp[start][end] dp = [[-1] * n for _ in range(n)] return play(0, n - 1, 0)"},{"question":"Alice plays a game where she places n numbered tokens (from 1 to n) in sequence on a table. Bob, in turn, tries to minimize the sum of differences between consecutive tokens after some swaps, but he must obey the following rules: 1. Bob can only swap a token at position i with another token at position j if tokens i and j are not adjacent. That means, if Alice places a token at positions i and i+1, Bob cannot swap these tokens. 2. Bob can perform at most k swaps. Alice wants to know the minimal possible sum of differences between the consecutive tokens that Bob can achieve under these constraints. Given a sequence of tokens and the number of swaps Bob can perform, determine the minimal possible sum of differences Bob can achieve. The first line contains two integers n (2 leq n leq 10^5) and k (0 leq k leq n/2) — the number of tokens and maximum allowed swaps respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq n, each a_i is unique) — the sequence of tokens placed by Alice. Output a single integer representing the minimal possible sum of differences between consecutive tokens after performing optimal swaps. # Example Input: ``` 5 1 4 2 1 5 3 ``` Output: ``` 4 ``` # Explanation In the initial sequence, the sum of differences between consecutive tokens is: |4-2| + |2-1| + |1-5| + |5-3| = 2 + 1 + 4 + 2 = 9 With one optimal swap, Bob can swap non-adjacent tokens to get the sequence: [4, 1, 2, 5, 3] thus reducing the sum of differences to: |4-1| + |1-2| + |2-5| + |5-3| = 3 + 1 + 3 + 2 = 9 In this example, even with one swap, the minimal possible sum remains 9.","solution":"def minimal_sum_of_differences(n, k, arr): sorted_arr = sorted(arr) min_diff_sum = sum(abs(sorted_arr[i] - sorted_arr[i - 1]) for i in range(1, n)) return min_diff_sum"},{"question":"David loves playing with different types of number series. Today, while playing with sequences of numbers, he thought of a challenge where he would generate a sequence of length n using the first m positive integers such that no sub-sequence of length 2 contains the same numbers. Formally, for a given n and m, you need to construct a sequence of n integers where each integer is between 1 and m inclusive, and no repeated integers are consecutive. The first line contains two integers n and m (1 ≤ m ≤ n ≤ 200,000), the length of the sequence and the range of numbers to be used. Print the sequence that satisfies the constraints. If there are multiple sequences that satisfy the constraints, print any of them. For example, if n = 5 and m = 2, one possible solution is: `1 2 1 2 1`. In another example, if n = 7 and m = 3, one possible solution is: `1 2 3 1 2 3 1`.","solution":"def generate_sequence(n, m): Generate a sequence of length n using the first m positive integers such that no sub-sequence of length 2 contains the same numbers. sequence = [] for i in range(n): sequence.append(i % m + 1) return sequence # Example usage: # print(generate_sequence(5, 2)) # Output: [1, 2, 1, 2, 1]"},{"question":"Given an undirected graph with `n` nodes and `m` edges, you need to determine if there exists a way to color the graph using exactly `k` colors such that no two adjacent nodes share the same color. The first line of input contains three integers `n` (1 le n le 1000), `m` (0 le m le 10000), and `k` (1 le k le n) - the number of nodes, the number of edges, and the number of colors respectively. The next `m` lines each contain two integers `u` and `v` (1 le u, v le n; u neq v), denoting an edge connecting nodes `u` and `v`. It is guaranteed that no edge will be repeated. Print \\"YES\\" if it is possible to color the graph using exactly `k` colors such that no two adjacent nodes share the same color. Otherwise, print \\"NO\\". **Example:** Input: ``` 4 4 3 1 2 2 3 3 4 4 1 ``` Output: ``` YES ``` Input: ``` 3 3 2 1 2 2 3 3 1 ``` Output: ``` NO ```","solution":"def is_k_coloring_possible(n, m, k, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def can_color(vertex, color, c): for neighbor in graph[vertex]: if c[neighbor] == color: return False return True def k_color_graph(vertex, c): if vertex == n + 1: return True for color in range(1, k + 1): if can_color(vertex, color, c): c[vertex] = color if k_color_graph(vertex + 1, c): return True c[vertex] = 0 return False c = [0] * (n + 1) return \\"YES\\" if k_color_graph(1, c) else \\"NO\\" def process_input(input_string): lines = input_string.strip().split(\'n\') n, m, k = map(int, lines[0].split()) edges = [] for i in range(1, m + 1): u, v = map(int, lines[i].split()) edges.append((u, v)) return n, m, k, edges"},{"question":"You are given a binary string of length n consisting of characters \'0\' and \'1\' only. You can perform the following operation any number of times (possibly zero): - Select a substring of length at least 2, flip all its characters (i.e., change \'0\' to \'1\' and \'1\' to \'0\'). Your task is to determine the minimum number of operations required to make the binary string consisting entirely of \'0\'s. The first line contains an integer t (1 le t le 100) — the number of test cases. Next t lines contain test cases, each with a single binary string of length n (1 le n le 10^5). For each test case, print the minimum number of operations needed to make the string consist only of \'0\'s. Example input: ``` 3 1100 0101 1111 ``` Example output: ``` 1 2 1 ``` Explanation: - In the first test case, you can flip the substring \\"1100\\" in one operation to get \\"0011\\", and then in one more operation flip the last two characters to get \\"0000\\". - In the second test case, you need two operations, first flip \\"0101\\" to \\"1010\\", and then flip \\"1010\\" to \\"0000\\". - In the third test case, just one flip of the entire string \\"1111\\" to get \\"0000\\".","solution":"def min_operations_to_zero(s): Returns the minimum number of operations required to make the binary string s consist entirely of \'0\'s. if \'0\' not in s: return 1 # All \'1\'s, one flip needed if \'1\' not in s: return 0 # All \'0\'s, no operations needed zero_groups = 0 one_groups = 0 n = len(s) i = 0 while i < n: if s[i] == \'0\': while i < n and s[i] == \'0\': i += 1 zero_groups += 1 if i < n and s[i] == \'1\': while i < n and s[i] == \'1\': i += 1 one_groups += 1 return min(one_groups, 2) def process_tests(t, test_cases): Processes multiple test cases and returns a list of results for each input string. results = [] for s in test_cases: results.append(min_operations_to_zero(s)) return results"},{"question":"Naru and Setsu are two game enthusiasts who have recently developed a passion for a card game called \\"Stack Battle\\". The game involves n stacks of cards, each stack containing a certain number of cards. Naru and Setsu take turns, starting with Naru, and they can choose any single stack and remove at least one card but no more than half the total cards present in that stack. The player who cannot make a move loses the game. Both players play optimally, meaning they will make moves that give them the highest chance to win. You are asked to find out which player wins the game if both play optimally from the beginning. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of stacks. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of each stack. The numbers are separated by single spaces. Output \\"Naru\\" if Naru wins the game, otherwise print \\"Setsu\\". Print the answers without the quotes.","solution":"def stack_battle_winner(n, heights): Determines the winner of the game \\"Stack Battle\\" given the heights of stacks. Args: n (int): the number of stacks heights (list of int): heights of the stacks Returns: str: \\"Naru\\" if Naru wins, otherwise \\"Setsu\\" odd_count = sum(1 for height in heights if height % 2 != 0) if odd_count > 0: return \\"Naru\\" else: return \\"Setsu\\""},{"question":"In a far-off kingdom, there exists a magical forest represented by a 2D grid of size n x m, where each cell is either a tree or an empty space. The forest has a unique magical property: when any tree cell is cut down, all trees in its 8 neighboring cells instantly disappear. The kingdom\'s king has asked you to figure out how many trees will remain if a given list of trees are cut down in a specified sequence. The input consists of: - The first line contains three integers n (1 ≤ n ≤ 500), m (1 ≤ m ≤ 500), and k (1 ≤ k ≤ 1000) — the dimensions of the grid and the number of trees that will be cut down. - The next n lines each contain a string of length m, where \'.\' represents an empty space and \'T\' represents a tree. - The next k lines each contain two integers ri and ci (1 ≤ ri ≤ n, 1 ≤ ci ≤ m) — the 1-based row and column indices of the trees that are cut down sequentially. Output a single integer — the number of trees remaining in the forest after all the specified trees have been cut down in sequence. Example Input: ``` 5 5 3 ..... .TTT. .TTT. .TTT. ..... 2 3 3 3 4 3 ``` Example Output: ``` 0 ``` Explanation: - When the tree at (2,3) is cut, all the trees at positions (1,2), (1,3), (1,4), (2,2), (2,4), (3,2), (3,3), and (3,4) disappear. - Next, cutting the tree at (3, 3) does not affect anything as it and its neighboring cells are already empty. - Similarly, cutting the tree at (4, 3) does not affect anything as it and its neighboring cells are already empty. Therefore, in this example, after all specified cut downs, no tree will remain in the forest.","solution":"def remaining_trees(n, m, k, grid, cut_positions): Calculates the number of remaining trees after cutting down specified trees. Parameters: - n (int): Number of rows in the grid. - m (int): Number of columns in the grid. - k (int): Number of trees to be cut down. - grid (list of str): 2D grid representing the forest. - cut_positions (list of tuple): List of tuples containing the (row, column) pairs of trees to be cut down. Returns: - int: Number of remaining trees. # Create a set to hold the positions of the remaining trees trees_set = set() for i in range(n): for j in range(m): if grid[i][j] == \'T\': trees_set.add((i, j)) # Define relative positions for 8 neighboring cells (trimming trees) neighbors = [(-1, -1), (-1, 0), (-1, 1), ( 0, -1), ( 0, 1), ( 1, -1), ( 1, 0), ( 1, 1)] # Process each cut operation for ri, ci in cut_positions: # Convert 1-based to 0-based indices ri -= 1 ci -= 1 # If the tree to be cut is present in the set, remove it and its neighbors if (ri, ci) in trees_set: trees_set.remove((ri, ci)) for dr, dc in neighbors: neighbor = (ri + dr, ci + dc) if neighbor in trees_set: trees_set.remove(neighbor) # The remaining number of trees return len(trees_set)"},{"question":"You are given an array of integers representing the height of rocks arranged in a line. You are tasked with finding the maximum height of the crest of any mountain formed by consecutive rocks in the array. A mountain is a sequence of consecutive rocks that strictly increases to a peak and then strictly decreases. The height of the crest of a mountain is the height of its peak. If there is no mountain in the array, then the crest height is 0. Write a function `find_mountain_crest(arr)` that takes a list of integers `arr` representing the height of rocks and returns the maximum crest height of any mountain in the array. # Input - The function takes a single argument `arr`, a list of integers where 1 ≤ len(arr) ≤ 10^5 and each element of `arr` is a non-negative integer representing the height of a rock. # Output - The function should return an integer representing the maximum crest height of any mountain in the array. If there is no valid mountain, return 0. # Examples Example 1 Input: ``` arr = [2, 1, 4, 7, 3, 2, 5] ``` Output: ``` 7 ``` Explanation: The array contains a mountain (1, 4, 7, 3, 2) with a peak of height 7. Example 2 Input: ``` arr = [2, 2, 2] ``` Output: ``` 0 ``` Explanation: There is no mountain in this array. Example 3 Input: ``` arr = [0, 1, 0] ``` Output: ``` 1 ``` Explanation: The array contains a mountain (0, 1, 0) with a peak of height 1. Implement the function `find_mountain_crest(arr)` to solve the problem.","solution":"def find_mountain_crest(arr): n = len(arr) if n < 3: return 0 max_crest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: # We found a peak, now check the lengths of both sides left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right + 1] < arr[right]: right += 1 # Calculate the peak height crest_height = arr[i] max_crest = max(max_crest, crest_height) return max_crest"},{"question":"You are given an integer array `nums` of length `n` (1 ≤ n ≤ 100,000). You need to find the length of the longest subarray that contains alternating odd and even numbers. A subarray is a contiguous part of an array. The first line of input contains a single integer `n`, the length of the array `nums`. The second line contains `n` integers separated by spaces, the elements of the array `nums` (1 ≤ nums[i] ≤ 10^9). Print a single integer, the length of the longest alternating odd-even subarray. Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 5 ``` Explanation: The whole array is an alternating odd-even subarray, so the length is 5. Example: Input: ``` 6 1 1 2 2 3 3 ``` Output: ``` 2 ``` Explanation: The alternating subarray can be [1, 2] or [2, 3] or [1, 2] etc., so the length is 2.","solution":"def longest_alternating_subarray(nums): Returns the length of the longest subarray that contains alternating odd and even numbers. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if (nums[i-1] % 2 == 0 and nums[i] % 2 != 0) or (nums[i-1] % 2 != 0 and nums[i] % 2 == 0): current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a faraway land, there exists a peculiar market where you can perform a special operation to manipulate the prices of goods. The market consists of `m` products, each priced initially at a certain value. You are allowed to perform up to `q` operations to change the prices of the products. Available operations might either increase or decrease the price of a particular product. You are given the initial prices of the products and a list of `q` operations. Each operation specifies an index of the product and the amount to be added (which could be negative for decreasing the price). You need to determine the final prices of all the products after performing all the operations in the order they are given. The first input line contains two integers `m` (1 ≤ m ≤ 100,000) and `q` (0 ≤ q ≤ 100,000), representing the number of products and the number of operations, respectively. The second line contains `m` integers, representing the initial prices of the products. Each of the following `q` lines contains an integer `i` (1 ≤ i ≤ m) and an integer `v` (−1000 ≤ v ≤ 1000), denoting the index of the product and the value to be added to its price. Output `m` space-separated integers on one line, representing the final prices of the products. Example: ``` Input: 5 3 10 20 30 40 50 1 -5 2 15 5 10 Output: 5 35 30 40 60 ``` Explanation: - Initially, the prices are: [10, 20, 30, 40, 50] - After the first operation (1 -5), the prices become: [5, 20, 30, 40, 50] - After the second operation (2 15), the prices become: [5, 35, 30, 40, 50] - After the third operation (5 10), the prices become: [5, 35, 30, 40, 60]","solution":"def final_prices(m, q, prices, operations): Calculate the final prices after performing the given operations. Parameters: m : int : number of products q : int : number of operations prices : list of int : initial prices of products operations : list of tuple : list of operations to be performed where each operation is a tuple (i, v) Returns: list of int : final prices of products after all operations # Iterate over each operation for i, v in operations: # Apply the operation to the product at index i (convert 1-based to 0-based index) prices[i-1] += v return prices"},{"question":"You are given a list of vertical segments on a 2D plane. Each segment is represented by two endpoints with the same x-coordinate but different y-coordinates. Your task is to calculate the length of the union of all segments after merging overlapping or touching segments. Each segment is defined by a tuple (x, y1, y2) where x is the vertical line on which the segment lies, and y1 and y2 are the coordinates of the endpoints such that y1 < y2. For example, given the segments: - (1, 2, 5) - (1, 4, 7) - (1, 6, 8) The first two segments overlap and the third segment touches the second one, so the union of these segments on the vertical line x=1 would be the continuous segment from 2 to 8. The length of this segment is 6. Write a function `calculate_union_length(segments)` that takes as argument a list of tuples representing the segments, and outputs the total length of the union of the segments. # Function Signature ```python def calculate_union_length(segments: List[Tuple[int, int, int]]) -> int: ``` # Input - `segments` (List[Tuple[int, int, int]]): A list of tuples where each tuple (x, y1, y2) represents a vertical segment with x-coordinate x and y-coordinates ranging from y1 to y2. # Output - `int`: The total length of the union of the segments. # Constraints - All x-coordinates in the segments are the same. - 1 <= number of segments <= 10^5 - -10^6 <= y1 < y2 <= 10^6 # Example ```python segments = [(1, 2, 5), (1, 4, 7), (1, 6, 8)] assert calculate_union_length(segments) == 6 segments = [(2, 3, 6), (2, 1, 2), (2, 4, 5)] assert calculate_union_length(segments) == 5 segments = [(1, 2, 3), (1, 3, 4), (1, 4, 5)] assert calculate_union_length(segments) == 3 ``` # Note - Ensure your solution is optimal, as the number of segments could be large. - Make sure there are no off-by-one errors when calculating the union of different segments.","solution":"def calculate_union_length(segments): This function takes a list of vertical segments on the same x-coordinate and calculates the length of the union of these segments. if not segments: return 0 # Sort the segments by their starting y-coordinate, and then by their ending y-coordinate. segments.sort(key=lambda seg: (seg[1], seg[2])) total_length = 0 current_start, current_end = segments[0][1], segments[0][2] for _, y1, y2 in segments[1:]: if y1 > current_end: # No overlap total_length += current_end - current_start current_start = y1 current_end = y2 else: # Overlapping or touching segments current_end = max(current_end, y2) total_length += current_end - current_start return total_length"},{"question":"In a country called Numerovia, there are n cities and some pairs of cities are directly connected by one-way roads. The cities are numbered from 1 to n. There are a total of m roads in Numerovia, each road connects a city ui to a city vi. The citizens are worried about the efficiency of their transport network and want to know if it is possible to travel between every pair of cities using the existing roads. The task is to determine whether there is a way to travel from every city to every other city, either directly or indirectly, using the one-way roads. If it is possible, output the string \\"YES\\". Otherwise, output the string \\"NO\\". # Input: - The first line of the input contains two space-separated integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of cities and the number of roads. - The next m lines describe the roads. Each of these lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — indicating there is a one-way road from city ui to city vi. # Output: - Output \\"YES\\" if it is possible to travel between every pair of cities using the given roads, either directly or indirectly. Otherwise, output \\"NO\\". # Example: Input: ``` 4 5 1 2 2 3 3 1 1 4 4 3 ``` Output: ``` YES ``` Input: ``` 3 2 1 2 2 3 ``` Output: ``` NO ``` In the first example, it is possible to travel between every pair of cities because there\'s a possible travel route between all pairs either directly or through intermediate cities forming a strongly connected component. In the second example, it is not possible to travel from city 3 to city 1, thus output is \\"NO\\".","solution":"def can_travel_between_all_pairs(n, m, roads): from collections import defaultdict, deque def bfs(start, graph): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited # Building the graph and the reverse graph graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in roads: graph[u].append(v) reverse_graph[v].append(u) # Perform BFS from city 1 and check if we can reach all cities visited_from_1 = bfs(1, graph) if not all(visited_from_1[1:]): return \\"NO\\" # Perform BFS on the reverse graph from city 1 and check if we can reach all cities visited_from_1_reverse = bfs(1, reverse_graph) if not all(visited_from_1_reverse[1:]): return \\"NO\\" return \\"YES\\""},{"question":"You are given an undirected graph with N nodes and M edges. Your task is to determine the maximum number of simple paths that start from the first node (node 1) and end at the last node (node N). A simple path is a path that does not revisit any node. A single test case consists of: - The integer N (2 ≤ N ≤ 1000) representing the number of nodes. - The integer M (1 ≤ M ≤ 3000) representing the number of edges. - M lines each containing two space-separated integers u and v (1 ≤ u, v ≤ N) representing an undirected edge between node u and node v. Output the maximum number of distinct simple paths from node 1 to node N. If there is no such path, output 0. Note: - Paths that only differ in the order of edges are considered the same, hence should only be counted once. - Self-loops and parallel edges between the same pair of nodes are not present in the input. Input: ``` The first line contains two integers N and M. The next M lines each contain two integers u and v which represent an edge between nodes u and v. ``` Output: ``` Print a single integer which is the number of distinct simple paths from node 1 to node N. ``` Example: Input: ``` 5 5 1 2 1 3 2 4 3 4 4 5 ``` Output: ``` 2 ``` Explanation: There are two distinct simple paths from node 1 to node 5: 1 -> 2 -> 4 -> 5 1 -> 3 -> 4 -> 5","solution":"def count_paths(N, M, edges): from collections import defaultdict, deque # Build the graph using adjacency list representation graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Use BFS to find all paths from node 1 to node N start, end = 1, N queue = deque([(start, [start])]) path_count = 0 while queue: current, path = queue.popleft() if current == end: path_count += 1 continue for neighbor in graph[current]: if neighbor not in path: # ensure it\'s a simple path queue.append((neighbor, path + [neighbor])) return path_count"},{"question":"You are given a binary tree where each node contains a value and a reference to its left child and right child. You need to determine the largest sum of values for any path in the binary tree. A path is defined as any sequence of nodes starting from some node and going downward (possibly to different sub-trees). Function Signature: ```python def max_path_sum(root: TreeNode) -> int: ``` Where `TreeNode` is defined as: ```python class TreeNode: def __init__(self, value: int = 0, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.left = left self.right = right ``` # Input - The input `root` is the root node of a binary tree. # Output - The function should return an integer, the maximum sum for any downward path in the binary tree. # Constraints - The number of nodes in the tree is in the range [1, 10^4]. - -1000 <= Node.value <= 1000 # Example ```python # Example 1 # Given the binary tree: # 1 # / # 2 3 # Return maximum path sum: 6 (from 2 -> 1 -> 3) root = TreeNode(1, TreeNode(2), TreeNode(3)) assert max_path_sum(root) == 6 # Example 2 # Given the binary tree: # -10 # / # 9 20 # / # 15 7 # Return maximum path sum: 42 (from 15 -> 20 -> 7) root = TreeNode(-10, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7))) assert max_path_sum(root) == 42 # Example 3 # Given the binary tree: # 2 # / # -1 -2 # Return maximum path sum: 2 (from 2 -> -1) root = TreeNode(2, TreeNode(-1), TreeNode(-2)) assert max_path_sum(root) == 2 ```","solution":"class TreeNode: def __init__(self, value: int = 0, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.left = left self.right = right def max_path_sum(root: TreeNode) -> int: def helper(node: TreeNode) -> int: nonlocal max_sum if not node: return 0 # Calculate max path sums for left and right children left_sum = max(helper(node.left), 0) right_sum = max(helper(node.right), 0) # Update the maximum path sum for paths including the current node current_sum = node.value + left_sum + right_sum max_sum = max(max_sum, current_sum) # Return the maximum sum for a path including the current node as an end point return node.value + max(left_sum, right_sum) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"Design a program that simulates the process of ticket purchasing at a movie theater. The theater has a list of showtimes for a particular movie, and each showtime has a certain number of seats available. Customers arrive one by one and request tickets for a specific showtime. If the number of requested tickets is available for that showtime, the tickets are sold, and the number of available seats is decreased accordingly. If the number of requested tickets exceeds the available seats, the request is denied. Given the number of showtimes and the maximum number of seats for each showtime, simulate the ticket purchasing process and determine, for each customer’s request, whether it was successful or not. Input - The first line of input contains an integer n (1 ≤ n ≤ 100), the number of showtimes. - The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100), where si is the number of seats available for the i-th showtime. - The third line contains an integer m (1 ≤ m ≤ 1000), the number of customers. - The next m lines each contain two integers ti and ki (1 ≤ ti ≤ n, 1 ≤ ki ≤ 100), where ti is the showtime the i-th customer requests tickets for, and ki is the number of tickets requested. Output - Print m lines. For each customer’s request, print \\"YES\\" if the request was successful and the tickets were sold or \\"NO\\" if the request was denied due to insufficient available seats. Example Input: 3 50 30 20 5 1 10 2 20 3 25 1 15 2 35 Output: YES YES NO YES NO","solution":"def process_ticket_requests(n, seats, m, requests): results = [] for ti, ki in requests: if seats[ti - 1] >= ki: results.append(\\"YES\\") seats[ti - 1] -= ki else: results.append(\\"NO\\") return results"},{"question":"Marie enjoys hiking up mountains. She also loves taking photos during her hikes to capture the beautiful landscapes she encounters along the way. Recently, she has discovered a new technique that allows her to take panoramic photos by stitching together photos taken from adjacent peaks. Therefore, she plans her hike to maximize the total height difference in the resulting panorama. Marie’s hike can be modeled as an array of mountain peaks where each peak has a certain height. To create a panorama, Marie can start at any peak and continue hiking to another adjacent peak. The height difference between two peaks is the absolute difference of their heights. Given the heights of the peaks, help Marie determine the maximum possible total height difference by choosing two adjacent peaks such that the height difference is maximized. The first line contains an integer n (2 le n le 10^5) — the number of peaks in the hike. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the peaks. Print a single integer — the maximum possible height difference between two adjacent peaks. # Example **Input** ``` 5 1 5 2 10 7 ``` **Output** ``` 8 ``` # Explanation In the given example, the maximum height difference between two adjacent peaks is found between peaks with heights 2 and 10, giving a difference of |2 - 10| = 8.","solution":"def max_height_difference(peaks): Returns the maximum possible height difference between two adjacent peaks. peaks : list of int : a list of integers representing the heights of the peaks Returns: int : the maximum height difference between two adjacent peaks max_diff = 0 for i in range(1, len(peaks)): diff = abs(peaks[i] - peaks[i - 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Harrison likes to play with stacks of plates. Each stack is represented as a sequence of integers, where each integer indicates the number of plates in a stack. Over time, Harrison decided to invent a new game involving his plate stacks. In this game, he can perform the following operation any number of times: - Choose any stack and remove one plate from it. The cost of this operation is equal to the number of plates initially in the stack from which the plate was removed. Given a list of stacks and their sizes, Harrison wants to minimize the total cost incurred to make all stacks empty. Write a program to help Harrison determine the minimum total cost. The first line of the input contains a single integer n (1 le n le 100,000) representing the number of stacks. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 le h_i le 10^9), where h_i denotes the size of the i-th stack (the number of plates in that stack). Print a single integer — the minimum total cost to make all stacks empty. Example input: ``` 3 3 2 4 ``` Example output: ``` 9 ``` Explanation: To empty the stacks with sizes [3, 2, 4]: 1. The cost to remove plates from the first stack (size 3) is 3. 2. The cost to remove plates from the second stack (size 2) is 2. 3. The cost to remove plates from the third stack (size 4) is 4. Harrison will keep removing one plate at a time until all stacks are empty. The total minimum cost is ( 3 + 2 + 4 = 9 ).","solution":"def minimum_total_cost(sizes): Returns the minimum total cost to make all stacks empty. :param sizes: List of integers, where each integer represents the size of a stack. :return: Integer, the minimum total cost. return sum(sizes) # Example usage: # stacks = [3, 2, 4] # print(minimum_total_cost(stacks)) # Output: 9"},{"question":"A farm has been established with n distinct trees, each producing a unique type of fruit. You are given an integer k, which represents the number of days you have to harvest the fruits, and another integer d, which denotes the maximum number of distinct fruits you can collect in a single day. You cannot collect the same type of fruit more than once in a single day, but you can collect any fruit type multiple times over the total period of k days. Each tree has a fixed number of fruits it produces per day. You need to maximize the total number of fruits collected by the end of k days. The first line contains three integers n, k, and d (1 ≤ n, k, d ≤ 10^5) — the total number of trees, the number of days, and the maximum number of distinct fruits per day, respectively. The second line contains n space-separated integers f1, f2, ..., fn (1 ≤ fi ≤ 10^9), where fi is the number of fruits produced by the i-th tree per day. Output a single integer — the maximum number of fruits that can be collected in k days under the given constraints. # Example Input: ``` 5 3 2 4 7 2 5 1 ``` Output: ``` 42 ``` Explanation: In this example, we have 5 trees and 3 days to harvest, with a maximum of 2 distinct types of fruits that can be collected each day. The optimal strategy would be to: - On day 1, collect fruits from trees 2 and 4 (7 + 5 = 12 fruits). - On day 2, collect fruits from trees 2 and 4 again (7 + 5 = 12 fruits). - On day 3, collect fruits from trees 2 and 4 once more (7 + 5 = 12 fruits). Thus, the maximum number of fruits collected is 12 + 12 + 12 = 36 fruits.","solution":"def max_fruits_collected(n, k, d, fruits): Returns the maximum number of fruits that can be collected in k days. # Sort fruits in descending order based on the number of fruits produced by each tree fruits.sort(reverse=True) max_fruits_per_day = 0 # We can collect from at most \'d\' different trees per day for i in range(min(d, n)): max_fruits_per_day += fruits[i] # Total fruits collected in \'k\' days return max_fruits_per_day * k # Example input n = 5 k = 3 d = 2 fruits = [4, 7, 2, 5, 1] print(max_fruits_collected(n, k, d, fruits)) # Output: 36"},{"question":"You are given a list of n integers, where each integer represents the height of a student in a line. The teacher wants to divide these students into teams in such a way that each team has a non-decreasing order of heights. The goal is to determine the maximum number of teams that can be formed under this condition. You need to write a program that processes multiple test cases. For each test case, determine the maximum number of teams that can be formed from the list of students. Each test case consists of two lines. The first line contains a single integer n (1 le n le 1000) — the number of students. The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the students. The output for each test case should be a single integer representing the maximum number of non-decreasing teams that can be formed. # Example **Input** ``` 3 6 2 3 1 2 3 2 5 1 1 1 1 1 4 4 3 2 1 ``` **Output** ``` 3 5 1 ``` # Explanation For the first test case: - One possible division into 3 teams is [2], [3], [1, 2, 2, 3]. - Another possible division could be [2], [3, 2], [1, 2, 3]. For the second test case: - All students have the same height, so each student can be a separate team. For the third test case: - As the heights are in strictly decreasing order, only one team can be formed.","solution":"def max_teams(heights): if not heights: return 0 # Since we need non-decreasing order, we can think of this in terms of Longest Increasing Subsequence # However, a max team count would mean O(nlogn) solution to get the min number of LIS required from bisect import bisect_right tails = [] for height in heights: pos = bisect_right(tails, height) if pos >= len(tails): tails.append(height) else: tails[pos] = height return len(tails) def process_test_cases(test_cases): results = [] for n, heights in test_cases: results.append(max_teams(heights)) return results"},{"question":"You are given a string consisting of lowercase and uppercase English letters, and your task is to transform it into a string where no two adjacent characters are the same while keeping the order of characters fixed. If there are multiple ways to achieve this, output any one of them. If it\'s not possible to transform the string, return \\"-1\\". For example, if given the string \\"aabb\\", you could transform it to \\"abab\\" or \\"baba\\". This problem tests your ability to manipulate strings and apply logical reasoning to ensure constraints are met. # Input: - The first line contains an integer `t` (1 ≤ t ≤ 1000) – the number of test cases. - For each test case, there is one line containing a string `s` (1 ≤ |s| ≤ 100), where `|s|` is the length of the string. The string consists of uppercase and lowercase English letters. # Output: - For each test case, print the transformed string on a new line such that no two adjacent characters are the same and the order of characters stays the same. If it\'s not possible to do so, output \\"-1\\". # Examples: Input: ``` 3 aabb ab aa ``` Output: ``` abab ab -1 ``` In the first test case, \\"aabb\\" can be transformed to \\"abab\\". In the second test case, \\"ab\\" is already in the correct form. In the third test case, \\"aa\\" cannot be transformed to meet the conditions, so the output is \\"-1\\". Note: You should implement an efficient algorithm to handle up to 1000 test cases with a string length up to 100.","solution":"def transform_string(s): Transform the input string s such that no two adjacent characters are the same. If impossible, return \\"-1\\". from collections import Counter import heapq def rearrange_string(s): # Get frequency of each character freq = Counter(s) # Create a max heap based on frequency max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \'\' # Rebuild the string while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Put the previous character back if its count > 0 if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and its count prev_count = count + 1 prev_char = char # If length of the result is equal to the original string, return it return \'\'.join(result) if len(result) == len(s) else \\"-1\\" return rearrange_string(s) def process_cases(t, cases): return [transform_string(case) for case in cases]"},{"question":"You are given a string `s` consisting of lowercase English letters. You are allowed to perform the following operation at most once: Choose any two substrings `a` and `b` of `s` (the substrings can overlap, be equal, or one can be empty) and swap them. After performing this operation, you cannot perform any more operations on the string. Your task is to find the lexicographically smallest string you can obtain by performing the operation described above. The first line of the input contains a single integer t (1 le t le 10^5), the number of test cases. The next t lines contain one string s each. It is guaranteed that the total length of strings across all test cases does not exceed 10^6. For each test case, print a single line containing the lexicographically smallest string that can be obtained. # Example ``` Input: 3 cba abc aaabb Output: abc abc aaabb ``` # Explanation 1. For the first string \\"cba\\", swapping substrings \\"c\\" and \\"b\\" results in \\"bca\\", then swapping \\"b\\" and \\"a\\" results in \\"abc\\", which is the lexicographically smallest string. 2. For the second string \\"abc\\", it is already the smallest possible string, so no swap is needed. 3. For the third string \\"aaabb\\", it is already the smallest possible string, so no swap is needed.","solution":"def smallest_lexicographical_string(s): Given a string s, return the lexicographically smallest string that can be obtained by performing at most one swap of any two substrings. n = len(s) if n <= 1: return s # Generate a sorted version of the string sorted_s = \'\'.join(sorted(s)) # If the string is already the smallest permutation, return it if s == sorted_s: return s # Try to perform the swap for i in range(n): if s[i] != sorted_s[i]: # Find the rightmost element in the string that matches sorted_s[i] for j in range(n-1, i, -1): if s[j] == sorted_s[i]: # Perform the swap new_s = list(s) new_s[i], new_s[j] = new_s[j], new_s[i] return \'\'.join(new_s) return s def solve(test_cases): results = [] for s in test_cases: results.append(smallest_lexicographical_string(s)) return results"},{"question":"You are working on a new project that involves processing a large dataset of events. Each event has a unique identifier and a timestamp associated with it. Your task is to organize these events so that they can be quickly accessed based on their timestamps. Specifically, you need to implement a system that can do the following: 1. **Add a new event** with a given identifier and timestamp. 2. **Remove an event** given its identifier. 3. **Retrieve the event** with the earliest timestamp. 4. **Retrieve the event** with the latest timestamp. The dataset is initially empty. # Input and Output Specification The first line contains a single integer `q` (1 leq q leq 200,000), representing the number of operations. Each of the following `q` lines contains an operation of one of the following four types: - `ADD id timestamp` — add a new event with the given identifier `id` (a string of up to 10 characters) and timestamp (a positive integer). - `REMOVE id` — remove the event with the given identifier `id`. - `EARLIEST` — retrieve and print the identifier and timestamp of the event with the earliest timestamp. - `LATEST` — retrieve and print the identifier and timestamp of the event with the latest timestamp. For each `EARLIEST` and `LATEST` operation, print the identifier and timestamp of the corresponding event. If there are multiple events with the same timestamp, return any one of them. If there are no events at the moment when `EARLIEST` or `LATEST` is called, print \\"EMPTY\\". # Example Input ``` 10 ADD event1 5 ADD event2 10 ADD event3 3 EARLIEST LATEST REMOVE event2 LATEST REMOVE event3 EARLIEST REMOVE event1 LATEST ``` Output ``` event3 3 event2 10 event1 5 event1 5 EMPTY ``` # Notes - Operations must be performed efficiently to handle up to 200,000 operations. - You will need to internally manage the dataset to support efficient lookups, additions, and removals.","solution":"import heapq class EventManager: def __init__(self): self.events = {} # stores the event by id self.min_heap = [] # min-heap based on timestamp self.max_heap = [] # max-heap based on timestamp self.removed = set() # keeps track of removed events def add_event(self, event_id, timestamp): self.events[event_id] = timestamp heapq.heappush(self.min_heap, (timestamp, event_id)) heapq.heappush(self.max_heap, (-timestamp, event_id)) def remove_event(self, event_id): if event_id in self.events: del self.events[event_id] self.removed.add(event_id) def get_earliest_event(self): while self.min_heap and self.min_heap[0][1] in self.removed: heapq.heappop(self.min_heap) if self.min_heap: timestamp, event_id = self.min_heap[0] return event_id, timestamp else: return \\"EMPTY\\" def get_latest_event(self): while self.max_heap and self.max_heap[0][1] in self.removed: heapq.heappop(self.max_heap) if self.max_heap: timestamp, event_id = -self.max_heap[0][0], self.max_heap[0][1] return event_id, timestamp else: return \\"EMPTY\\" def process_operations(operations): manager = EventManager() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": event_id = parts[1] timestamp = int(parts[2]) manager.add_event(event_id, timestamp) elif command == \\"REMOVE\\": event_id = parts[1] manager.remove_event(event_id) elif command == \\"EARLIEST\\": result = manager.get_earliest_event() if result == \\"EMPTY\\": results.append(\\"EMPTY\\") else: event_id, timestamp = result results.append(f\\"{event_id} {timestamp}\\") elif command == \\"LATEST\\": result = manager.get_latest_event() if result == \\"EMPTY\\": results.append(\\"EMPTY\\") else: event_id, timestamp = result results.append(f\\"{event_id} {timestamp}\\") return results"},{"question":"Given a text consisting of M lines, each line containing an integer followed by a string of lowercase letters representing a student name, you are required to sort and output the student names in ascending order according to their integers. If two or more students have the same integer, sort their names lexicographically. The first line of input contains an integer M (1 ≤ M ≤ 100,000) — the number of students. Each of the following M lines contains a pair of an integer and a non-empty string of lowercase letters. The integer will be in the range 1 to 10^9, and the length of the string will not exceed 50 characters. Print the sorted list of student names in the described order. # Input ``` 5 42 alice 1 bob 42 charlie 100 david 1 eve ``` # Output ``` bob eve alice charlie david ``` # Explanation In the example above, students \\"bob\\" and \\"eve\\" both have the smallest integer 1, so they appear first in lexicographical order. Next are \\"alice\\" and \\"charlie\\" with the integer 42, also in lexicographical order. Finally, \\"david\\" with the integer 100 appears last.","solution":"def sort_students(data): Sort students by their integer followed by the names lexicographically. sorted_data = sorted(data, key=lambda x: (x[0], x[1])) return [name for _, name in sorted_data] def process_input(input_text): Process the input text and extract the list of (integer, student name) tuples. lines = input_text.strip().split(\'n\') M = int(lines[0]) students = [] for i in range(1, M + 1): parts = lines[i].split() score = int(parts[0]) name = parts[1] students.append((score, name)) return students"},{"question":"A [character sequence] is defined as a sequence that contains only of letters \'X\' and \'Y\'. We define a balanced sequence as one where the number of \'X\'s is equal to the number of \'Y\'s. Your task is to determine the length of the longest subsequence of a given character sequence [w] that is balanced. Given a string [w], you are to find the length of the longest balanced subsequence that can be extracted. A subsequence is defined as a sequence that can be derived from another by deleting some or no elements without changing the order of the remaining elements. The first line of the input contains a single integer [n] (1 ≤ n ≤ 100 000) — the length of the given string. The second line contains a string [w] of length [n], consisting of characters \'X\' and \'Y\'. Output a single integer — the length of the longest balanced subsequence that can be extracted from [w]. Example: Input: 8 XXYYXYXY Output: 8 Explanation: The entire sequence \\"XXYYXYXY\\" is already balanced because the number of \'X\'s (4) equals the number of \'Y\'s (4). Another Example: Input: 6 XYXXYY Output: 6 Explanation: The sequence \\"XYXXYY\\" is already balanced because the number of \'X\'s (3) equals the number of \'Y\'s (3).","solution":"def longest_balanced_subsequence(n, w): Returns the length of the longest balanced subsequence count_x = w.count(\'X\') count_y = w.count(\'Y\') # The length of the longest balanced subsequence is twice the minimum of the counts return min(count_x, count_y) * 2"},{"question":"You are given an unsorted array of integers. Your task is to sort this array in non-decreasing order but using a special sorting method described below: - You can choose any pair of adjacent elements in the array and swap them. This operation can only be performed if the absolute difference between these two elements is greater than 1. Given this sorting constraint, your task is to determine if it is possible to sort the array using the described operation, and if so, provide the resulting sorted array. If it is not possible, determine why. # Input The first line contains an integer t (1 le t le 10) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n (1 le n le 100) — the number of elements in the array. The second line of each test case contains n integers a[1], a[2], dots, a[n] (-10^3 le a[i] le 10^3) – the elements of the array. # Output For each test case, if it is possible to sort the array using the given operation, output the sorted array. Otherwise, output \\"Impossible\\". # Example Input ``` 2 5 4 3 1 5 2 6 3 3 2 1 1 4 ``` Output ``` 1 2 3 4 5 Impossible ``` # Explanation For the first test case, the array can be sorted by specifically choosing and swapping elements that satisfy the condition. In the second test case, it is impossible to sort the array because there are elements with a difference of at most 1 that cannot be swapped.","solution":"def is_sortable_with_special_operation(arr): Determines if the array can be sorted using the special swap operation where adjacent elements\' absolute difference should be greater than 1. # Sort the array sorted_arr = sorted(arr) # Check if the sorted array can never be achieved under the given constraint. # If there are two adjacent identical elements, resolution is impossible. for i in range(len(sorted_arr) - 1): if sorted_arr[i] == sorted_arr[i + 1]: return \\"Impossible\\" return \' \'.join(map(str, sorted_arr)) def process_test_cases(test_cases): results = [] for case in test_cases: n = case[0] array = case[1] result = is_sortable_with_special_operation(array) results.append(result) return results # Example function demonstrating how input might be processed and output generated def main(input_str): lines = input_str.strip().split(\'n\') test_cases = [] t = int(lines[0]) i = 1 for _ in range(t): n = int(lines[i]) array = list(map(int, lines[i + 1].split())) test_cases.append((n, array)) i += 2 results = process_test_cases(test_cases) for res in results: print(res)"},{"question":"A company has installed a new security system in their office, consisting of multiple security cameras. Each camera is placed in a specific room and has a fixed range within which it can detect motion. If two cameras have overlapping ranges, they can cover the same area, meaning one of them is redundant. Given a list of rooms, each with a camera placed at its center, and the range of each camera, determine the minimum number of cameras needed to cover the entire office without redundancy. Assume the office is a linear series of connected rooms. Formally, there are `n` rooms arranged in a line, and each room is represented by an integer from `1` to `n`. A camera at room `i` can cover rooms from `i-k` to `i+k` (`k` is the range of the camera). Two cameras are considered redundant if their covered areas overlap. Input: The first line contains one integer `t` (1 ≤ t ≤ 10^4) – the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers `n` and `c` (1 ≤ n, c ≤ 10^6) – the number of rooms and the number of available cameras, respectively. The second line contains `c` pairs of integers `a_i` and `r_i` (1 ≤ a_i ≤ n, 1 ≤ r_i ≤ 10^6) – the position of the i-th camera and its range. Output: For each test case, output one integer – the minimum number of cameras needed to cover the office without redundancy. Example: Input: 2 5 3 1 1 3 1 5 1 6 3 1 2 4 2 6 1 Output: 2 2 Explanation: For the first test case, cameras at rooms 1, 3, and 5 can cover the entire office, but the minimum number of cameras needed without redundancy is 2 (e.g., cameras at rooms 1 and 3 or cameras at rooms 3 and 5). For the second test case, cameras at rooms 1, 4, and 6 can cover the office, but the minimum number of cameras needed without redundancy is 2 (e.g., cameras at rooms 1 and 4 or cameras at rooms 4 and 6).","solution":"def min_cameras_needed(t, test_cases): Given the number of test cases and test case details, return the minimum number of cameras needed to cover the office without redundancy for each test case. results = [] for i in range(t): n, c = test_cases[i][0] cameras = test_cases[i][1] # Create a list of (start, end) tuples for each camera intervals = [] for a_i, r_i in cameras: intervals.append((max(1, a_i - r_i), min(n, a_i + r_i))) # Sort intervals by the end point intervals.sort(key=lambda x: x[1]) min_cameras = 0 last_covered_end = 0 for start, end in intervals: if start > last_covered_end: # Place a camera to cover this interval min_cameras += 1 last_covered_end = end results.append(min_cameras) return results"},{"question":"You are given an undirected graph represented as an adjacency list. Your task is to determine if the graph is bipartite. A graph is bipartite if the vertices can be divided into two disjoint sets such that no two graph vertices within the same set are adjacent. The input consists of an integer `n` (1 ≤ n ≤ 100) — the number of vertices, followed by `n` lines. The i-th line contains space-separated integers representing the vertices adjacent to vertex i. Note that the vertex numbering starts from 1. Output \\"YES\\" if the graph is bipartite, otherwise print \\"NO\\". # Example Input ``` 4 2 3 1 4 1 4 2 3 ``` Output ``` YES ``` Input ``` 3 2 3 1 3 1 2 ``` Output ``` NO ``` # Explanation In the first example, the graph can be divided into two sets {1, 4} and {2, 3}, forming a bipartite graph. Hence, the output is \\"YES\\". In the second example, there is a cycle of odd length which makes it impossible to divide the graph into two sets without having two adjacent vertices in the same set. Therefore, the output is \\"NO\\".","solution":"from collections import deque def is_bipartite(n, adj_list): Determines if the given graph is bipartite. Parameters: n (int): Number of vertices. adj_list (List[List[int]]): Adjacency list representation of the graph. Returns: str: \\"YES\\" if the graph is bipartite, otherwise \\"NO\\". colors = [-1] * n def bfs(start): queue = deque([start]) colors[start] = 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True for vertex in range(n): if colors[vertex] == -1: if not bfs(vertex): return \\"NO\\" return \\"YES\\""},{"question":"The citizens of Byteville have a unique way of celebrating their town anniversary. They construct a very specific pattern on a special grid using flexible neon tubes. The grid consists of m rows and n columns, and each cell in this grid can either be lit up (represented by a 1) or be dark (represented by a 0). Initially, all cells in the grid are dark (0). Byteville\'s anniversary celebration pattern requires lighting up the grid in such a way that every row and every column of the grid contains at least one lit cell (1). However, given the high energy cost, they want to minimize the number of lit cells (1s). Write a function that for a given m and n finds the minimum number of cells needed to be lit up to ensure that each row and each column contains at least one lit cell and returns the coordinates of these cells. The first input line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. In the first line print one integer — the minimum number of cells to be lit. Then m lines should follow each with an integer x denoting the column index of a lit cell in the corresponding row (i.e., for row i, light up cell (i, x)). If there are multiple solutions, print any. For example, for the input: 3 4 One of the possible outputs would be: 3 1 2 3 It means the grid can be lit in such a way that: row 1 has cell (1, 1) lit, row 2 has cell (2, 2) lit, row 3 has cell (3, 3) lit. Another valid solution could be: 3 1 3 4 This corresponds to: row 1 cell (1, 1) lit, row 2 cell (2, 3) lit, row 3 cell (3, 4) lit. Any solution with the minimum number of lit cells (k = 3) that ensures each row and column contains at least one lit cell is correct.","solution":"def minimal_lights(m, n): Find the minimal number of cells needed to be lit up to ensure that each row and each column contains at least one lit cell. Args: m (int): Number of rows in the grid. n (int): Number of columns in the grid. Returns: list of tuple: First element is the number of lit cells. Next m elements are the column indices for the cells to be lit for each row. minimal_cells = min(m, n) result = [minimal_cells] for i in range(minimal_cells): result.append(i + 1) return result"},{"question":"You are given a sequence of integers representing the heights of mountains in a row. The mountains are numbered from 1 to n, where the height of the i-th mountain is given by h_i. You want to check if it is possible to select a contiguous subarray of the given heights such that there exists a peak within this subarray. A peak is an element h_i that is strictly greater than its immediate neighbors, i.e., h_{i-1} < h_i > h_{i+1}. Note that for a peak to exist in the subarray, the subarray must contain at least three elements. Your task is to determine if it is possible to select such a subarray and then print the indices of the start and end of one such subarray (1-based indexing). If there are multiple such subarrays, print the indices of any one of them. If no such subarray exists, output \\"No peak\\". The first line contains an integer n (1 ≤ n ≤ 1000) — the number of mountains. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000) — the heights of the mountains. Print on a single line \\"No peak\\" if no such subarray exists. Otherwise, print two integers l and r (1 ≤ l <= r <= n) — the starting and ending indices (inclusive) of one such subarray. In the first example, the heights are [1, 3, 2, 4, 1], and one possible valid subarray with a peak is [1, 3, 2], starting at index 1 and ending at index 3. In the second example, the heights are [1, 2, 3, 4], and there are no peaks since no element is strictly greater than its immediate neighbors. In the third example, the heights are [5, 4, 6, 7, 6], and a valid subarray with a peak is [4, 6, 7], starting at index 2 and ending at index 4.","solution":"def find_peak_subarray(n, heights): Determines if there is a subarray with a peak and returns its 1-based start and end indices. Args: n: An integer representing the number of mountains. heights: A list of integers representing the heights of the mountains. Returns: A string \\"No peak\\" if no such subarray exists, otherwise the start and end indices of the subarray. if n < 3: return \\"No peak\\" for i in range(1, n - 1): if heights[i-1] < heights[i] > heights[i+1]: return f\\"{i} {i+2}\\" return \\"No peak\\""},{"question":"Tarun is learning about matrix operations and has come across the concept of matrix exponentiation. He is particularly interested in computing the power of a square matrix. Given a square matrix A of size n and a positive integer k, the k-th power of the matrix A is defined as multiplying the matrix A by itself k times. Help Tarun compute the k-th power of the given matrix A modulo 10^9 + 7. The input will be: 1. An integer n (2 ≤ n ≤ 200) representing the size of the matrix. 2. An integer k (1 ≤ k ≤ 10^9) representing the power to which the matrix needs to be raised. 3. n lines, each containing n integers representing the square matrix A (0 ≤ A[i][j] ≤ 10^9). Output the resulting matrix after computing A^k modulo 10^9 + 7. **Input Format:** - The first line contains an integer n. - The second line contains an integer k. - The next n lines contain n integers each, representing the matrix A. **Output Format:** - Print the resulting matrix after computing A^k modulo 10^9 + 7. Each row of the matrix should be printed on a new line, with elements separated by spaces. **Example Input:** ``` 2 3 1 1 1 0 ``` **Example Output:** ``` 2 1 1 1 ``` **Explanation:** For the example above: - A^1 is: ``` 1 1 1 0 ``` - A^2 is: ``` 2 1 1 1 ``` - A^3 is: ``` 3 2 2 1 ``` Final result after multiplying A by itself 3 times is: ``` 2 1 1 1 ```","solution":"MOD = 10**9 + 7 def matrix_mult(A, B, n): result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): for k in range(n): result[i][j] = (result[i][j] + A[i][k] * B[k][j]) % MOD return result def matrix_pow(A, k, n): result = [[1 if i == j else 0 for j in range(n)] for i in range(n)] base = A while k > 0: if k % 2 == 1: result = matrix_mult(result, base, n) base = matrix_mult(base, base, n) k //= 2 return result def compute_matrix_power(n, k, A): return matrix_pow(A, k, n) # Function to read input and produce output def main(): import sys input = sys.stdin.read data = input().strip().split() index = 0 n = int(data[index]) index += 1 k = int(data[index]) index += 1 A = [] for i in range(n): row = list(map(int, data[index:index+n])) A.append(row) index += n result = compute_matrix_power(n, k, A) for row in result: print(\' \'.join(map(str, row))) # Uncomment the following line if you want to enable the main function for script execution # if __name__ == \\"__main__\\": # main()"},{"question":"You are given a rectangular grid of dimensions n x m. Each cell in the grid is either a land cell or a water cell. The grid can be represented as a matrix of characters where \'L\' indicates a land cell and \'W\' indicates a water cell. You need to determine the largest rectangular area composed entirely of land cells (\'L\') in the given grid. Write a program to find and return the maximum area of such a rectangle. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next n lines each contain m characters (\'L\' or \'W\') representing the grid. Output: - Print a single integer — the maximum area of the rectangle composed entirely of land cells. Example: Input: 5 5 LLLLL LLLLW LLLLL WLWLL LLLLW Output: 12 Explanation: In the sample grid, the largest rectangular area composed entirely of land cells is a 3x4 area starting from the first row and first column, covering the first three rows and first four columns. Therefore, the area is 3*4 = 12.","solution":"def maximalRectangle(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) height = [0] * m max_area = 0 for i in range(n): for j in range(m): # Update the height array; reset to 0 if the cell is \'W\' if grid[i][j] == \'L\': height[j] += 1 else: height[j] = 0 # Calculate max area for the histogram representation of the current row max_area = max(max_area, largestRectangleArea(height)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) # Append a zero to handle any remaining elements in the stack for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Restore the array to its original state return max_area"},{"question":"There are n houses arranged in a line and each house can be painted with one of the three colors: red, blue, and green. The cost of painting each house with a certain color is different. You must paint all the houses such that no two adjacent houses have the same color. The cost of painting each house with a certain color is represented by a 2D array costs, where costs[i][0] is the cost of painting house i with red color; costs[i][1] is the cost of painting house i with blue color, and costs[i][2] is the cost of painting house i with green color. Write a function that returns the minimum cost to paint all houses. The first line contains a single integer n (1 le n le 1000) — the number of houses. The next n lines each contain three integers — the costs of painting the i-th house with the colors red, blue, and green respectively. Output a single integer — the minimum cost to paint all the houses such that no two adjacent houses have the same color. Example: ``` Input: 3 17 2 17 16 16 5 14 3 19 Output: 10 Explanation: Paint house 0 with blue, paint house 1 with green, and paint house 2 with blue. The total cost = 2 + 5 + 3 = 10. ```","solution":"def minCostToPaintHouses(costs): if not costs: return 0 n = len(costs) for i in range(1, n): costs[i][0] += min(costs[i-1][1], costs[i-1][2]) costs[i][1] += min(costs[i-1][0], costs[i-1][2]) costs[i][2] += min(costs[i-1][0], costs[i-1][1]) return min(costs[n-1][0], costs[n-1][1], costs[n-1][2])"},{"question":"You are given an array of integers and a target value. Your task is to determine whether it is possible to select two non-overlapping subarrays from the given array such that the sum of elements in the first subarray is equal to the sum of elements in the second subarray, and both sums are equal to the target value. If it\'s possible, print \\"YES\\" otherwise print \\"NO\\". The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then the test cases follow. The first line of each test case contains two integers n and target (2 le n le 2 cdot 10^5, 1 le target le 10^9) — the length of the array and the target value, respectively. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5) — the elements of the array. Print \\"YES\\" if it\'s possible to select two non-overlapping subarrays whose sums are equal to the target value, otherwise print \\"NO\\". The sum of n over all test cases does not exceed 2 cdot 10^5.","solution":"def two_subarrays_with_target_sum(test_cases): results = [] for n, target, array in test_cases: prefix_sum = [0] * (n + 1) suffix_sum = [0] * (n + 1) sums_set = set() for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] for i in range(n - 1, -1, -1): suffix_sum[i] = suffix_sum[i + 1] + array[i] sums_set.add(suffix_sum[i]) found = False for i in range(1, n): if prefix_sum[i] == target and (suffix_sum[i] == target or target in sums_set and prefix_sum[i] != suffix_sum[i]): found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array `nums` and another integer `k`. You need to find the minimum number of steps required to make all elements in the array equal. In one step, you can choose two distinct indices `i` and `j` such that `nums[i] > nums[j]` and decrement `nums[i]` by `k`. If it\'s impossible to make all elements equal, return `-1`. The first line contains the integer `T` (1 ≤ `T` ≤ 100) — the number of test cases. The first line of each test case contains two integers `n` (1 ≤ `n` ≤ 10^5) and `k` (1 ≤ `k` ≤ 10^9). The second line of each test case contains `n` integers representing the array `nums` (1 ≤ `nums[i]` ≤ 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. For each test case, print one integer — the minimum number of steps to make all elements equal, or `-1` if it is impossible.","solution":"def min_steps_to_equal_elements(n, k, nums): min_num = min(nums) steps = 0 for num in nums: if (num - min_num) % k != 0: return -1 steps += (num - min_num) // k return steps def solve_min_steps(T, test_cases): results = [] for case in test_cases: n, k = case[0] nums = case[1] result = min_steps_to_equal_elements(n, k, nums) results.append(result) return results"},{"question":"You are managing a network of servers that process tasks. Each server can process a certain number of tasks per second, and when overloaded, it passes extra tasks to the next server in a predefined chain. Your goal is to determine the maximum load the network can handle in a given second without any tasks being dropped. Each server has a limit on the number of tasks it can process in one second. If the number of tasks in a server exceeds its capacity, the excess tasks will be passed to the next server in the chain. If the last server in the chain is overloaded, it cannot pass tasks to any other server, and those excess tasks are considered dropped. Write a function `maxNetworkLoad` to determine the maximum tasks the network can handle in one second without tasks being dropped. The first line of the input contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each test case starts with an integer `n` (1 ≤ n ≤ 100), the number of servers. The following line contains `n` integers, where the i-th integer represents the number of tasks server i can process (1 ≤ tasks[i] ≤ 1000). Output a single integer for each test case, which is the maximum number of tasks that can be processed by the network in one second without any tasks being dropped. Example Input: ``` 2 3 10 5 3 4 5 7 4 2 ``` Example Output: ``` 18 18 ``` Explanation: - In the first case, the network configuration allows the first server to handle 10 tasks, the second server can handle the overflow and process up to 5 tasks, and the third server handles the remaining overflow with a capacity of 3 tasks. Thus, the maximum number of tasks that the entire network can handle is 10 + 5 + 3 = 18. - In the second case, the first server handles 5 tasks, the second server handles 7 tasks, the third server handles 4 tasks, and the fourth server handles the remaining 2 tasks, so the total maximum load is 5 + 7 + 4 + 2 = 18.","solution":"def maxNetworkLoad(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] capacities = test_cases[i][1] results.append(sum(capacities)) return results"},{"question":"Anna loves strings and enjoys solving various string manipulation problems. Today, she came across an interesting problem that involves reversing portions of a string. Given a string s, Anna wants to perform the minimum number of operations to make the entire string a palindrome. In each operation, she can select a substring of s and reverse it. A string is called a palindrome if it reads the same forward and backward. For example, \\"madam\\" and \\"racecar\\" are palindromes, while \\"hello\\" is not. Help Anna by writing a program that determines the minimum number of operations required to make the given string a palindrome. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string s. The second line contains a string s of length n consisting of lowercase English letters. Print a single integer — the minimum number of operations required to make the string s a palindrome. In the first sample, the string is \\"abca\\". By reversing the substring \\"bc\\", we obtain \\"acba\\", which is a palindrome. Therefore, only one operation is needed. In the second sample, the string is \\"racecar\\". It is already a palindrome, so no operations are needed. In the third sample, the string is \\"abcdef\\". We have to perform multiple operations, but the exact minimum operations will require running the solution.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the string s a palindrome. n = len(s) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Build the table (bottom-up manner) for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = min(dp[l + 1][r], dp[l][r - 1]) + 1 # The answer is the minimum number of operations required for the whole string return dp[0][n - 1]"},{"question":"In the Darkwood forest, there lives a unique species of Fireflies that exhibit a special pattern in their glow during the twilight hours. These fireflies glow for a certain duration where each duration is represented as an integer in seconds. The fireflies often like to form pairs that sum up to a certain target duration and if they do, their combined glow becomes even more spectacular. Given an array representing the duration of glows of different fireflies and a target integer, determine how many unique pairs of fireflies have combined glow durations exactly equal to the target duration. Each pair of fireflies should be considered unique based on their positions in the array, meaning the same duration but at different index positions form distinct pairs. The first line of the input contains two integers n and target (1 ≤ n ≤ 1000, 1 ≤ target ≤ 1000), where n is the number of fireflies and target is the target duration. The second line contains n integers, representing the duration of each firefly’s glow in seconds (1 ≤ duration[i] ≤ 1000). Output the number of unique pairs of fireflies that have combined durations exactly equal to the target duration. For example, consider the input: ``` 5 10 2 3 7 5 5 ``` In this case, the output should be: ``` 2 ``` Explanation: The two pairs of fireflies that sum up to 10 are (3, 7) and (5, 5).","solution":"def count_firefly_pairs(n, target, durations): pairs_count = 0 # Using a dictionary to count occurrences of each duration duration_count = {} for duration in durations: complement = target - duration if complement in duration_count: pairs_count += duration_count[complement] if duration in duration_count: duration_count[duration] += 1 else: duration_count[duration] = 1 return pairs_count"},{"question":"Mark loves gardening and wants to build a small rectangular garden in his backyard. He has a fence with a fixed length and wants to use it to enclose the maximum possible area. The garden\'s length and width must be integers, and he must use the entire length of the fence. Given the total length of the fence (n) as input, what is the maximum area of the garden that Mark can enclose? Your task is to write a function that takes an integer n (4 ≤ n ≤ 10^9, and n is even), which is the total length of the fence, and returns the maximum possible area of the garden. **Input:** A single integer n, the total length of the fence. **Output:** A single integer, the maximum area of the garden that can be enclosed with the given length of the fence. **Example:** ``` Input: 20 Output: 25 ```","solution":"def max_garden_area(n): Returns the maximum area of a rectangle garden that can be enclosed with the given length of the fence n. # For a given perimeter, the rectangle with the maximum area is a square. # For a perimeter n, the side length of the square would be n/4 (since 4 * (n/4) = n) # Here n is even, so n/2 is also even, which means n/4 will be an integer. side_length = n // 4 max_area = side_length ** 2 return max_area"},{"question":"Alice is a science enthusiast and loves experimenting with different kinds of chemicals. She has n different chemical solutions, each with a certain amount of chemical A and chemical B. Alice has two beakers - Beaker X and Beaker Y. She can pour any solution entirely into either beaker, but once poured, it cannot be moved to the other beaker. Her goal is to have precisely the same amount of chemical A in both beakers after pouring all the solutions. You need to determine if it\'s possible to divide the solutions in such a way that the total amount of chemical A in Beaker X is equal to the total amount of chemical A in Beaker Y. Each test case starts with an integer t (1 ≤ t ≤ 50) which represents the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) representing the number of solutions. The following n lines each contain two integers ai and bi (0 ≤ ai, bi ≤ 1000) representing the amounts of chemical A and chemical B in the i-th solution. For each test case, print \\"Yes\\" if it\'s possible to divide the solutions such that the total amount of chemical A in Beaker X is equal to the total amount of chemical A in Beaker Y. Otherwise, print \\"No\\". For example: Input: ``` 2 3 10 20 20 30 30 40 2 15 25 25 15 ``` Output: ``` Yes No ``` Explanation: In the first test case, the amounts of chemical A can be divided as 20 (Beaker X) and 20 (Beaker Y). In the second test case, no matter how we divide, we cannot split 40 (total amount of chemical A) into two equal parts.","solution":"def can_divide_chemicals(test_cases): results = [] for case in test_cases: n = case[0] solutions = case[1] total_chemical_a = sum(a for a, b in solutions) if total_chemical_a % 2 != 0: results.append(\\"No\\") continue target = total_chemical_a // 2 dp = [False] * (target + 1) dp[0] = True for a, b in solutions: for j in range(target, a - 1, -1): if dp[j - a]: dp[j] = True if dp[target]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Samantha loves playing with numbers, especially those that generate unique patterns. She has come up with a new challenge wherein she wants to create a sequence of numbers where each number is the sum of its immediate next two numbers in the sequence. However, she wants these numbers to be natural numbers, and part of a given array of natural numbers. Can you help her find whether it is possible to generate such a sequence? You will be given an array of natural numbers and your task is to determine if there exists any subsequence of length at least three, obeying the condition that each number is the sum of its immediate next two numbers in the sequence. The first line contains an integer n (3 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers (1 ≤ ai ≤ 1000) — the elements of the array. Print \\"YES\\" if there exists a subsequence that matches Samantha\'s condition, otherwise print \\"NO\\".","solution":"def find_sequence(arr): Returns \'YES\' if there exists a subsequence of length at least three where each number is the sum of its immediate next two numbers, otherwise returns \'NO\'. n = len(arr) # Checking all combinations of triplets in the array for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[i] == arr[j] + arr[k]: return \\"YES\\" if arr[j] == arr[i] + arr[k]: return \\"YES\\" if arr[k] == arr[i] + arr[j]: return \\"YES\\" return \\"NO\\""},{"question":"Mary is building a new home and she decided to decorate the walls with some colorful tiling. She has a row of wall segments of length m which she wants to cover using color tiles. She has multiple types of color tiles available, each of a certain length and color. Her goal is to use exactly n tiles to cover the entire row of wall segments such that no two adjacent tiles have the same color. She can use multiple tiles of the same type/color but they should not be adjacent. You\'re given an integer m indicating the length of the wall, an integer n indicating the number of tiles, and an array of integers t, where t[i] represents the length of the i-th type of tile. You also have an array of strings c where c[i] represents the color of the i-th type of tile. Determine if it\'s possible to cover the wall according to her wishes and if so, provide one valid arrangement of tiles. The first line contains two integers m and n (1 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^6) — the length of the wall and the number of tiles. The second line contains n integers t_1, t_2, ... , t_n (1 ≤ t_i ≤ 10^6) — the lengths of the tiles. The third line contains n strings c_1, c_2, ... , c_n — the colors of the tiles. Each string consists of uppercase English letters and has a length of at most 10. Print \\"NO\\" if it\'s not possible to cover the wall such that no two adjacent tiles are of the same color. Otherwise, print \\"YES\\" followed by one valid sequence of tile colors. For example, given the following input: ```plaintext 12 4 3 3 4 5 RED BLUE BLUE GREEN ``` One possible valid arrangement would be: ```plaintext YES RED BLUE GREEN BLUE BLUE ```","solution":"def can_cover_wall(m, n, t, c): Determines if it\'s possible to cover a wall of length m using exactly n tiles such that no two adjacent tiles have the same color. def backtrack(index, current_length, last_color, arrangement): if current_length == m and index == n: return True, arrangement if index >= len(t) or current_length > m: return False, [] for i in range(len(t)): if c[i] != last_color: result, seq = backtrack(index + 1, current_length + t[i], c[i], arrangement + [c[i]]) if result: return result, seq return False, [] result, arrangement = backtrack(0, 0, \\"\\", []) if result: return \\"YESn\\" + \\" \\".join(arrangement) else: return \\"NO\\" def solve(m, n, t, c): Parses the input and delegates to the `can_cover_wall` function. return can_cover_wall(m, n, t, c)"},{"question":"A company plans to design a new mobile application with several useful features for users. However, the company has limited resources, and they want to prioritize developing the features that will reach the largest number of users as early as possible. The company has a list of user preferences, where each user can express interest in multiple features. Your task is to determine the minimum number of distinct features that need to be developed to satisfy a certain percentage of users, denoted by P%. # Input - The first line contains two integers N and P (1 ≤ N ≤ 10^5, 1 ≤ P ≤ 100), where N is the number of users and P is the percentage of users to be satisfied. - The second line contains an integer M (1 ≤ M ≤ 10^5), representing the total number of feature preferences expressed by all users. - Each of the next M lines contains two integers U and F (1 ≤ U ≤ N, 1 ≤ F ≤ 10^5), where U is the user ID and F is the feature ID, indicating that user U wants feature F. # Output Print a single integer, the minimum number of distinct features that should be developed to satisfy at least P% of users. # Example Input: ``` 5 60 7 1 1 1 2 2 1 3 3 3 4 4 2 5 5 ``` Output: ``` 2 ``` Note: In the example, there are 5 users and we need to satisfy at least 60% of them, which means satisfying at least 3 users (60% of 5 is 3). Developing features 1 and 2 will satisfy users 1, 2, and 4. Therefore, the minimum number of distinct features to be developed is 2.","solution":"from collections import defaultdict from heapq import heappush, heappop def min_features_to_satisfy_users(N, P, M, preferences): user_feature_count = defaultdict(set) feature_user_count = defaultdict(set) # Populate the user-feature and feature-user mappings for U, F in preferences: user_feature_count[U].add(F) feature_user_count[F].add(U) # Calculate required number of users to satisfy required_users = (N * P + 99) // 100 # Use a max heap to always choose the feature that satisfies the most users max_heap = [] for feature, users in feature_user_count.items(): heappush(max_heap, (-len(users), feature)) satisfied_users = set() features_to_develop = 0 # Select features while the number of satisfied users is less than required while len(satisfied_users) < required_users and max_heap: count, feature = heappop(max_heap) count = -count # Only consider this feature if it adds new satisfied users new_satisfied_users = feature_user_count[feature] - satisfied_users if new_satisfied_users: features_to_develop += 1 satisfied_users.update(new_satisfied_users) return features_to_develop"},{"question":"Sam is fascinated by palindromic sequences. A sequence is called a palindrome if it reads the same forward and backward. Sam has an array of n integers. He wants to make the smallest possible number of insertions to transform the array into a palindrome. You are tasked with helping him determine the minimum number of insertions required. # Input: The first line contains an integer n (1 le n le 2000) - the number of elements in the array. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 10^6) - the elements of the array. # Output: Output a single integer - the minimum number of insertions needed to make the array a palindrome. # Examples: Example 1: **Input:** ``` 5 1 3 4 3 1 ``` **Output:** ``` 0 ``` **Explanation:** The array is already a palindrome, so no insertions are required. Example 2: **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 3 ``` **Explanation:** The array can be transformed into a palindrome by inserting elements. One way is to insert \'3\', \'2\', and \'1\' at the end. The resulting palindrome is [1, 2, 3, 4, 3, 2, 1]. Example 3: **Input:** ``` 3 1 2 1 ``` **Output:** ``` 0 ``` **Explanation:** The array is already a palindrome, so no insertions are required. Your task is to determine the minimum number of insertions needed to make the array a palindrome.","solution":"def min_insertions_to_palindrome(arr): Returns the minimum number of insertions needed to make the array a palindrome. n = len(arr) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if arr[i] == arr[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Design a function that takes a string as input and returns a list of all its possible permutations. Each permutation should be a distinct rearrangement of the characters in the input string. Your solution should not use any built-in Python functions that generate permutations directly (e.g., `itertools.permutations`), but you may use other standard string and list operations. # Input - A single string `s` with a length of at most 10 characters. The input string may contain duplicate characters. # Output - A list of strings, where each string is a distinct permutation of the characters in the input string. # Example **Input:** ``` \\"abc\\" ``` **Output:** ``` [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` **Input:** ``` \\"aab\\" ``` **Output:** ``` [\\"aab\\", \\"aba\\", \\"baa\\"] ``` Note: The order of the permutations in the output list does not matter as long as all possible distinct permutations are correctly listed.","solution":"def permute(s: str) -> list: Returns a list of all distinct permutations of the input string s. def helper(prefix, remaining, results): if len(remaining) == 0: results.add(prefix) else: for i in range(len(remaining)): next_prefix = prefix + remaining[i] next_remaining = remaining[:i] + remaining[i+1:] helper(next_prefix, next_remaining, results) results = set() helper(\\"\\", s, results) return list(results)"},{"question":"You are given an array of integers of length n. Your task is to sort the array and then answer q queries. In each query, you need to find the number of integers in the sorted array that are greater than or equal to a given value x. # Input: The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Each of the next q lines contains one integer x (1 le x le 10^9) — the value for the query. # Output: For each query, print a single integer — the number of integers in the sorted array that are greater than or equal to x. # Example: Input: ``` 5 3 4 10 2 8 6 5 11 1 ``` Output: ``` 3 0 5 ``` # Constraints: - All elements of the array and queries are within the bounds as specified. - Ensure the solution is optimized for large inputs.","solution":"def count_geq_elements(n, q, array, queries): Returns the number of integers in the sorted array that are greater than or equal to each value x in queries. array.sort() result = [] for x in queries: # Use binary search to find the first element that is greater than or equal to x lo, hi = 0, n while lo < hi: mid = (lo + hi) // 2 if array[mid] >= x: hi = mid else: lo = mid + 1 result.append(n - lo) return result # Example usage: # n, q = 5, 3 # array = [4, 10, 2, 8, 6] # queries = [5, 11, 1] # print(count_geq_elements(n, q, array, queries)) # [3, 0, 5]"},{"question":"Ramesh has an array of n integers, and he loves segments of his array that have equal values. Ramesh defines a segment of the array as a contiguous subarray. He wants to find the length of the longest segment where all the elements have the same value. Given an array of n integers, compute the length of the longest segment where all values are the same. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) representing the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000) representing the elements of the array. Print a single integer, the length of the longest segment with equal values. # Example Input ``` 8 1 1 2 2 2 3 3 4 ``` Output ``` 3 ``` Explanation: The longest segment with equal values is the subarray [2, 2, 2], thus the result is 3.","solution":"def longest_equal_segment(arr): Returns the length of the longest segment where all values are the same. if not arr: return 0 max_len = 1 current_len = 1 n = len(arr) for i in range(1, n): if arr[i] == arr[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 return max(max_len, current_len)"},{"question":"Dana is training for a new competition where she has to optimize the scheduling of multiple parallel tasks to minimize the overall time taken. She has a list of tasks, each with a specific duration. Some tasks need to be completed before others can start due to dependencies. Dana must figure out the minimum time required to finish all tasks following the dependencies. You are given `n` tasks and `m` dependencies. Each task `i` takes a specific time `ti` to complete. If task `u` is dependent on task `v`, `u` can only start after `v` has finished. Write a program to determine the minimum time to complete all the tasks. The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of tasks and the number of dependencies. The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ ti ≤ 1000) — the time each task takes to complete. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — indicating that task `u` is dependent on task `v`. Print the minimum time required to complete all tasks. In the first sample case: - We have 4 tasks, and task durations are: [2, 3, 4, 1] - Dependencies are provided as: [2, 1], [3, 2], and [4, 2] - One optimal way would be to finish task 1 at time 2, task 2 at time 5, task 3 at time 9, and task 4 at time 6. Starting tasks in parallel wherever possible and taking dependencies into account will help in finding the optimal time. **Input** ``` 4 3 2 3 4 1 2 1 3 2 4 2 ``` **Output** ``` 9 ``` Explanation: - Task 2 depends on Task 1, so Task 2 can start only after Task 1 is complete. - Task 3 depends on Task 2, so Task 3 can start only after Task 2 is complete. - Task 4 depends on Task 2, so Task 4 can start only after Task 2 is complete. The optimal execution sequence is: 1. Task 1 from time 0 to 2. 2. Task 2 from time 2 to 5. 3. Task 3 from time 5 to 9. 4. Task 4 from time 5 to 6. Thus, the minimum amount of time required to finish all tasks considering dependencies in this case is 9.","solution":"from collections import defaultdict, deque def min_time_to_complete_tasks(n, m, durations, dependencies): # Build graph graph = defaultdict(list) indegree = [0] * n for u, v in dependencies: graph[v-1].append(u-1) indegree[u-1] += 1 # Calculate the minimum time to complete all tasks time_to_complete = [0] * n queue = deque() # Start with tasks that have no dependencies for i in range(n): if indegree[i] == 0: queue.append(i) time_to_complete[i] = durations[i] while queue: current = queue.popleft() current_time = time_to_complete[current] for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) time_to_complete[neighbor] = max(time_to_complete[neighbor], current_time + durations[neighbor]) return max(time_to_complete) # Example usage: n = 4 m = 3 durations = [2, 3, 4, 1] dependencies = [(2, 1), (3, 2), (4, 2)] print(min_time_to_complete_tasks(n, m, durations, dependencies))"},{"question":"You are given an image represented by an `m x n` binary matrix `image`, where `0` represents a white pixel and `1` represents a black pixel. The black pixels are connected, i.e., there is only one black region. A region is a group of connected black pixels, connected horizontally or vertically (not diagonally). Given the coordinates `(x, y)` of one of the black pixels, return the smallest rectangle (aligned with the coordinate axes) that encloses all black pixels. You need to output the area of the rectangle. To solve this problem, you need to find the minimum and maximum rows and columns that contain black pixels and calculate the area of the rectangle formed by these boundaries. The first line contains two integers `m` and `n` (`1 <= m, n <= 1000`) — the dimensions of the binary matrix. The next `m` lines each contain `n` characters (\'0\' or \'1\') representing the rows of the binary matrix. The last line contains two integers `x` and `y` (`0 <= x < m` and `0 <= y < n`) — the coordinates of one of the black pixels. Output the area of the smallest rectangle enclosing all black pixels. # Example Input ``` 3 4 0010 0110 0100 0 2 ``` Output ``` 6 ``` Explanation: - The given binary matrix is: ``` 0010 0110 0100 ``` - The given coordinates (0, 2) correspond to one of the black pixels. - The smallest rectangle that encloses all black pixels contains these coordinates: ``` rows: 0 to 2 columns: 1 to 3 ``` - The area of the rectangle is `(2 - 0 + 1) * (3 - 1 + 1) = 6`. In this case, the rectangle would cover the following region in the matrix: ``` 0010 0110 0100 ```","solution":"def min_area(image, x, y): Given a binary matrix image and coordinates (x, y) of one black pixel, returns the area of the smallest rectangle enclosing all black pixels. m, n = len(image), len(image[0]) min_row, max_row = x, x min_col, max_col = y, y for i in range(m): for j in range(n): if image[i][j] == \'1\': min_row = min(min_row, i) max_row = max(max_row, i) min_col = min(min_col, j) max_col = max(max_col, j) return (max_row - min_row + 1) * (max_col - min_col + 1) # Example usage: # matrix = [ # \\"0010\\", # \\"0110\\", # \\"0100\\" # ] # x, y = 0, 2 # print(min_area(matrix, x, y)) # Output should be 6"},{"question":"In the bustling city of Graphonia, Mayor Edgefield has launched a new public transportation system. The city consists of an undirected graph with n nodes and m edges. Each edge represents a bidirectional road between two intersections (nodes). Every edge has a weight (ti), representing the travel time across that road. The mayor wants to evaluate the efficiency of the new system by computing the shortest travel time from a designated starting intersection to all other intersections in the city. You have been tasked with this responsibility. Given the number of intersections, the number of roads, the starting intersection, and the travel time for each road, write a program to compute the shortest travel time from the starting intersection to every other intersection. The first line of the input contains three integers: n, m, and s (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000, 1 ≤ s ≤ n) — the number of intersections, the number of roads, and the starting intersection, respectively. The next m lines each contain three integers ui, vi, ti (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ ti ≤ 1000) — representing a bidirectional road between intersections ui and vi with travel time ti. Print n integers, where the i-th integer represents the shortest travel time from the starting intersection s to intersection i. If there is no path to intersection i, print -1 for that intersection. For example: Input: 6 9 1 1 2 7 1 3 9 1 6 14 2 3 10 2 4 15 3 4 11 3 6 2 4 5 6 5 6 9 Output: 0 7 9 20 20 11 This example indicates that there are 6 intersections and 9 roads. The travel time from the starting intersection 1 to intersections 1 through 6 is [0, 7, 9, 20, 20, 11] respectively.","solution":"import heapq def dijkstra(n, m, s, edges): graph = [[] for _ in range(n + 1)] for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) distances = [float(\'inf\')] * (n + 1) distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [0 if i == float(\'inf\') else distances[i] for i in range(1, n + 1)] # Function to wrap the inputs and outputs def shortest_travel_time(n, m, s, edges): result_dijkstra = dijkstra(n, m, s, edges) result = [] for time in result_dijkstra: result.append(time if time != float(\'inf\') else -1) return result"},{"question":"You are given a list of integers consisting of either 0s or 1s. Your task is to perform the following operation exactly once: choose any contiguous subarray and flip all the elements in that subarray (change 0 to 1 and 1 to 0). After performing this operation, you need to maximize the number of 1s in the entire array. Determine the maximum number of 1s available in the array after performing the above operation. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the array. - The second line contains n integers: a1, a2, ..., an (0 ≤ ai ≤ 1) — elements of the array. Output: - Print a single integer — the maximum number of 1s that can be obtained after the operation. Example: ``` Input: 5 1 0 0 1 0 Output: 4 ``` Explanation: In the given example, flipping the subarray from the 2nd to the 4th position (both inclusive) results in the array [1, 1, 1, 0, 0], which contains four 1s. This is the maximum number of 1s that can be obtained after the operation.","solution":"def maximize_ones(arr): n = len(arr) current_ones = sum(arr) # We are focusing on the effect of flipping each possible subarray max_flip_diff = -1 # Initializing with a minimal value for i in range(n): for j in range(i, n): flip_diff = 0 for k in range(i, j + 1): flip_diff += 1 if arr[k] == 0 else -1 max_flip_diff = max(max_flip_diff, flip_diff) return current_ones + max_flip_diff"},{"question":"You are given two arrays of integers, a and b, each of size n. You need to perform some operations on these arrays to make them equal. In one operation, you can select an element from either array a or array b, and change it to any integer value. Find the minimum number of operations required to make arrays a and b equal. # Input - The first line contains an integer t (1 le t le 10^4), the number of test cases. - Each test case consists of three lines: - The first line contains an integer n (1 le n le 100), the size of the arrays. - The second line contains n integers representing the array a (1 le a_i le 100). - The third line contains n integers representing the array b (1 le b_i le 100). # Output For each test case, print a single integer, the minimum number of operations required to make the arrays equal. # Examples Input ``` 2 3 1 2 3 3 2 1 4 5 6 7 8 5 6 7 9 ``` Output ``` 2 1 ``` # Explanation **Example 1**: - We can change the first element of a from 1 to 3, and the last element of a from 3 to 1, making a = [3, 2, 1]. **Example 2**: - We only need to change the last element of b from 9 to 8, making b = [5, 6, 7, 8].","solution":"def min_operations_to_make_equal(t, test_cases): def count_min_operations(arr1, arr2): # Counting mismatches operations = sum(1 for x, y in zip(arr1, arr2) if x != y) return operations result = [] for i in range(t): n, a, b = test_cases[i] result.append(count_min_operations(a, b)) return result"},{"question":"John is hosting a party and wants to decorate his house with balloons. Each balloon should have a distinct color, and he has a limited amount of space for the balloons. Moreover, he wants to make sure that the sum of the ASCII values of the characters of each balloon\'s color does not exceed a certain value. Given a string representing the available characters for balloon colors, determine the maximum number of distinct balloon colors that John can use under the given condition. Each balloon color must be a distinct string, and the sum of the ASCII values of the characters in each string must not exceed a specified threshold. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of available characters. The second line contains a string of length n consisting of lowercase alphabetic characters. The third line contains an integer m (1 ≤ m ≤ 1000) — the maximum allowable sum of ASCII values for each balloon color. Print a single integer, the maximum number of distinct balloon colors John can use. Note: The string for each balloon color can be of any length, including length 1. Input: - The first line contains a single integer n. - The second line contains a string of length n with lowercase letters. - The third line contains an integer m. Output: - Print a single integer, the maximum number of distinct balloon colors. Example: Input: 5 abcde 200 Output: 5 Explanation: The ASCII values for lowercase characters are between 97 (\'a\') and 122 (\'z\'). Here, each character sum does not exceed 200, so John can use all 5 balloon colors \'a\', \'b\', \'c\', \'d\', and \'e\'.","solution":"def max_distinct_balloon_colors(n, chars, m): Determines the maximum number of distinct balloon colors that John can use under the given condition where the sum of ASCII values does not exceed a specified value. Parameters: n (int): Number of available characters. chars (str): String of length n with available lowercase letters. m (int): Maximum allowable sum of ASCII values for each balloon color. Returns: int: The maximum number of distinct balloon colors. # Convert characters to a set to remove duplicates and sort by their ASCII values unique_chars = sorted(set(chars)) count = 0 for char in unique_chars: if ord(char) <= m: count += 1 else: break return count"},{"question":"There is a competitive programming contest going on, and as one of the organizers, you need to generate a scoreboard that contains the ranks of each participant based on their scores. Each participant has a unique username and a corresponding score. The higher the score, the better the rank. If two participants have the same score, they should have the same rank, but their usernames should still be displayed in lexicographical order. Write a program that reads the list of participants and their scores, and then outputs the scoreboard with ranks. The input consists of two parts: 1. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of participants. 2. Each of the next n lines contains a participant\'s username (a string of 2 to 24 characters consisting of lowercase English letters and/or digits) followed by a space and their score (an integer between 0 and 100000). Output the scoreboard with ranks in the following format: - Each line should contain the rank, the username, and the score, with ranks starting from 1. - If two participants have the same score, they should have the same rank, and the next rank should be the next number in sequence. For example, if two participants have the highest score and thus both are ranked 1, the next participant(s) would be ranked 3, and so on. - Usernames with equal scores should be ordered lexicographically in the output. Example: Input: ``` 5 john 100 alice 200 bob 100 eve 150 dave 200 ``` Output: ``` 1 alice 200 1 dave 200 3 eve 150 4 bob 100 4 john 100 ```","solution":"def generate_scoreboard(n, participants): from collections import defaultdict # Creating a dictionary to hold score as key and list of usernames as value score_dict = defaultdict(list) for participant in participants: username, score = participant.rsplit(\' \', 1) score = int(score) score_dict[score].append(username) # Sorting scores in descending order and corresponding usernames lexicographically sorted_scores = sorted(score_dict.keys(), reverse=True) result = [] current_rank = 1 for score in sorted_scores: usernames = sorted(score_dict[score]) num_participants_with_same_score = len(usernames) for username in usernames: result.append(f\\"{current_rank} {username} {score}\\") current_rank += num_participants_with_same_score return result"},{"question":"The kingdom of Lirondel has established a new postal system. The kingdom is represented as a grid of n x n cells, where each cell is either land or water. The postal carriers can only deliver mail by moving through cells that are land, and they can move up, down, left, or right, but not diagonally. The kingdom’s postal service needs to determine the shortest delivery route from the upper-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (n,n)). If it is not possible to reach the destination, the postal service needs to report that as well. Write a program to determine the minimum number of steps required for the postal carriers to reach the bottom-right corner of the grid. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000) representing the size of the grid. - Each of the next n lines contains n characters (\'L\' for land and \'W\' for water), representing the grid. # Output - Print a single integer indicating the minimum number of steps needed to reach the bottom-right corner from the upper-left corner. - If it is not possible to reach the bottom-right corner, print -1. # Example Input ``` 5 LLLLL LWWWL LLLWL LWLLL LLLLL ``` Output ``` 8 ``` Input ``` 3 LWL WLW LWL ``` Output ``` -1 ``` # Notes - In the first example, the shortest path from (1,1) to (5,5) takes 8 steps. - In the second example, it is impossible to reach the bottom-right corner from the upper-left corner, so the output is -1. Write a function `minimum_steps(n, grid)` that takes the size of the grid `n` and the grid representation as input, and returns the minimum number of steps or -1 if the destination is unreachable.","solution":"from collections import deque def minimum_steps(n, grid): if grid[0][0] == \'W\' or grid[n-1][n-1] == \'W\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = [[False]*n for _ in range(n)] visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == n-1 and c == n-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == \'L\' and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given an array of n integers, where each integer represents the amount of energy a person has. You are also given another array of n integers, where each integer represents the amount of energy required to perform a task. Your goal is to maximize the number of tasks that can be performed by assigning a person to a task such that the person\'s energy is at least as much as the energy required for the task. Write a program that finds the maximum number of tasks that can be performed given the constraints. If there are multiple ways to achieve the same number of tasks, any valid way is acceptable. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) representing the number of people and tasks. The second line of input contains n space-separated integers representing the energy levels of the people. The third line of input contains n space-separated integers representing the energy required for the tasks. Output a single integer representing the maximum number of tasks that can be performed. Example: Input: 5 4 3 2 5 1 3 2 4 1 5 Output: 5 In this example, we can assign people with energies [4, 3, 2, 5, 1] to tasks with required energies [3, 2, 4, 1, 5] respectively, performing all the tasks. Note: You can assume each person can perform exactly one task, and each task can be performed by exactly one person. Task assignment must be such that a person\'s energy is at least the energy required for the task they are assigned to.","solution":"def max_tasks(n, energies, tasks): Returns the maximum number of tasks that can be performed. # Sort the arrays energies.sort() tasks.sort() # Initialize pointers for energies and tasks e_ptr, t_ptr, count = 0, 0, 0 # Use two-pointer technique to maximize tasks while e_ptr < n and t_ptr < n: if energies[e_ptr] >= tasks[t_ptr]: count += 1 t_ptr += 1 e_ptr += 1 return count"},{"question":"You are given a square grid of size n×n. Each cell of the grid contains a non-negative integer, representing the weight of that cell. You need to find the lightest path from the top-left corner to the bottom-right corner of the grid. A path starts at the top-left corner and must pass through each cell along its way to the bottom-right corner, allowing only moves to the right or down at each step. The weight of a path is the sum of the weights of the cells on that path. Your task is to determine the minimum weight of a path from the top-left corner to the bottom-right corner. The first line contains a single integer n (2 ≤ n ≤ 100), the size of the grid. The next n lines contain n integers each, where the j-th integer in the i-th line represents the weight of the cell at position (i, j) (0 ≤ weights[i][j] ≤ 100). Output a single integer, the minimum weight of a path from the top-left corner to the bottom-right corner of the grid. # Example Input: ``` 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` # Explanation In the provided example, the path with the minimum weight is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3), with a total weight of 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_path_weight(grid): Given a square grid of non-negative integers, returns the minimum weight path from the top-left corner to the bottom-right corner, only allowing moves to the right or down. n = len(grid) # Create a 2D table to store the minimum path weights dp = [[0] * n for _ in range(n)] # Initialize the first cell with its own value dp[0][0] = grid[0][0] # Initialize the first row for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) # Return the minimum path weight to the bottom-right corner return dp[n-1][n-1]"},{"question":"LeetCode is hosting a weekly programming contest, and one of the challenges involves determining the optimal schedule for various coding tasks, each associated with a fixed deadline. To assist you in organizing your work, you need to write a program that suggests an optimal order of task completion in order to maximize the number of tasks completed before their respective deadlines. Each task is given a unique difficulty level, and some tasks depend on the completion of other tasks. Your goal is to order the tasks in such a way that: 1. Any task is completed only after all its dependencies have been completed. 2. The number of tasks completed before their deadline is maximized. # Input: The first line contains an integer `n` (1 ≤ n ≤ 1000) representing the number of tasks. The second line contains `n` space-separated integers `d1, d2, ..., dn` (1 ≤ di ≤ n), where `di` indicates the deadline by which the i-th task must be completed. The third line contains `n` space-separated integers `l1, l2, ..., ln` (1 ≤ li ≤ 1000), where `li` is the difficulty level of the i-th task. The fourth line contains an integer `m` (0 ≤ m ≤ 10000) representing the number of dependency relations. The following `m` lines contain two space-separated integers `xi` and `yi` (1 ≤ xi, yi ≤ n), indicating that task `yi` is dependent on the completion of task `xi`. # Output: Output a single integer that represents the maximum number of tasks that can be completed by their respective deadlines. # Example 1: Input: ``` 5 2 1 2 4 5 3 2 1 4 3 3 1 2 2 3 3 5 ``` Output: ``` 3 ``` Explanation: An optimal schedule is to complete tasks in the following order: 1 -> 2 -> 3 -> 4 -> 5. Task 1 must be done before 2, task 2 before 3, and task 3 before 5. Tasks 1, 2, and 3 meet their deadlines. # Example 2: Input: ``` 4 4 4 4 4 1 2 3 4 2 1 4 2 3 ``` Output: ``` 4 ``` Explanation: All tasks have the same deadline and have dependencies that do not conflict with their deadlines, so all tasks are completed.","solution":"from collections import defaultdict, deque def max_tasks_on_deadline(n, deadlines, difficulties, m, dependencies): # Step 1: Create adjacency list from dependencies and calculate in-degrees for topological sort adj_list = defaultdict(list) in_degree = [0] * n for x, y in dependencies: adj_list[x-1].append(y-1) in_degree[y-1] += 1 # Step 2: Perform topological sorting using Kahn\'s Algorithm zero_in_degree_queue = deque([i for i in range(n) if in_degree[i] == 0]) topo_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topo_order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Step 3: Apply greedy algorithm to maximize number of tasks completed before their deadlines completion_count = 0 time = 0 for index in topo_order: if time < deadlines[index]: # If we can complete the task before its deadline time += 1 completion_count += 1 return completion_count # Example 1 Testing n = 5 deadlines = [2, 1, 2, 4, 5] difficulties = [3, 2, 1, 4, 3] m = 3 dependencies = [(1, 2), (2, 3), (3, 5)] print(max_tasks_on_deadline(n, deadlines, difficulties, m, dependencies)) # Expected: 3 # Example 2 Testing n = 4 deadlines = [4, 4, 4, 4] difficulties = [1, 2, 3, 4] m = 2 dependencies = [(1, 4), (2, 3)] print(max_tasks_on_deadline(n, deadlines, difficulties, m, dependencies)) # Expected: 4"},{"question":"In a distant land, there is a festival of lights known as Ilumina. As part of the preparations, the organizers have set up a beautiful light show using arrays of lanterns. Each lantern has a certain brightness and is configured in such a way that they form an array of length n. The festival organisers also want to ensure that the light show is dynamic and hence, they will be performing q operations on it. There are two types of operations: Due to numerous visitors, the festival organisers have asked you to help them in efficiently updating the brightness and calculating the total sum of brightness within a given range of lanterns. The brightness values can be very large, so you are to find the sums modulo mod. The first line contains three integers n, q, and mod (1 le n le 10^5, 1 le q le 10^5, 2 le mod le 10^9 + 7) – the number of lanterns in the array, the number of queries, and the modulus value. The second line contains n integers b_1, b_2, ..., b_n (1 le b_i le 10^5) - the initial brightness of each lantern. The next q lines contain the queries in one of the following formats: For each query of the second type, print the result in a new line modulo mod. For example: Input: ``` 5 3 1000000007 10 20 30 40 50 2 1 3 1 3 60 2 1 3 ``` Output: ``` 60 100 ``` Explanation: Initially, the brightness array is [10, 20, 30, 40, 50]. The sum of brightness from position 1 to 3 is 10 + 20 + 30 = 60. After the update, the brightness array changes to [10, 20, 60, 40, 50], and the sum of brightness from position 1 to 3 becomes 10 + 20 + 60 = 90.","solution":"class LanternLightShow: def __init__(self, n, arr, mod): self.n = n self.arr = arr self.mod = mod self.prefix_sums = [0] * (n + 1) self.calculate_prefix_sums() def calculate_prefix_sums(self): for i in range(1, self.n + 1): self.prefix_sums[i] = (self.prefix_sums[i - 1] + self.arr[i - 1]) % self.mod def update(self, index, value): self.arr[index - 1] = value self.calculate_prefix_sums() def query_sum(self, l, r): return (self.prefix_sums[r] - self.prefix_sums[l - 1]) % self.mod def process_queries(n, q, mod, arr, queries): light_show = LanternLightShow(n, arr, mod) results = [] for query in queries: if query[0] == 1: # Update operation: 1 p x _, p, x = query light_show.update(p, x) elif query[0] == 2: # Sum query: 2 l r _, l, r = query results.append(light_show.query_sum(l, r)) return results"},{"question":"Polycarp loves experimenting with different sorting algorithms. He has been given an array of n integers that he wants to partition into two subarrays and then merge them back into a single array after sorting each subarray. Given an array of n integers, you need to determine if it’s possible to partition it into two non-overlapping subarrays such that after sorting both subarrays individually and concatenating them, the resultant array is sorted in non-decreasing order. The first line contains a single integer t (1 ≤ t ≤ 10000) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Determine if it’s possible to partition the array into two non-overlapping subarrays such that the resultant array, formed by concatenating the individually sorted subarrays, is sorted. Print \\"YES\\" for each test case if such a partition is possible, otherwise print \\"NO\\". # Example Input 4 5 2 1 3 5 4 6 1 2 3 6 5 4 3 3 2 1 4 1 3 2 4 Output YES YES NO YES Explanation - For the first test case, one possible partition is [2, 1] and [3, 5, 4]. Sorting these gives [1, 2] and [3, 4, 5] which can be concatenated to give [1, 2, 3, 4, 5]. - For the second test case, one possible partition is [1, 2, 3] and [6, 5, 4]. Sorting these gives [1, 2, 3] and [4, 5, 6] which can be concatenated to give [1, 2, 3, 4, 5, 6]. - For the third test case, no matter how you partition, the resultant array cannot be sorted. - For the fourth test case, one possible partition is [1, 3] and [2, 4]. Sorting these gives [1, 3] and [2, 4] which can be concatenated to give [1, 2, 3, 4].","solution":"def can_partition_and_sort(n, arr): Determines if an array can be partitioned into two non-overlapping subarrays such that, after sorting both subarrays individually and concatenating them, the resultant array is sorted in non-decreasing order. if n < 2: return \\"YES\\" for i in range(1, n): # Split the array into two subarrays left = arr[:i] right = arr[i:] # Sort the subarrays left_sorted = sorted(left) right_sorted = sorted(right) # Check if the concatenated sorted subarrays form a sorted array if left_sorted[-1] <= right_sorted[0]: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = can_partition_and_sort(n, arr) results.append(result) return results"},{"question":"Alice loves studying the properties of graphs. She recently came across a special type of graph called a Tree, a connected acyclic graph. She is interested in analyzing the longest paths within these graphs. Given a tree with `n` nodes (numbered from 1 to `n`), help Alice find the length of the longest path in the tree (also known as the diameter of the tree). The tree is described by `n-1` edges, each edge connecting two nodes, and the length of each edge is always 1. # Input The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The next `n-1` lines each contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) — representing an edge between nodes `u` and `v`. # Output Output a single integer — the length of the longest path in the tree. # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 3 ``` # Explanation In the example tree, the longest path is from node 4 to node 5, going through nodes 2 and 1. This path has a total length of 3. # Notes - The tree is connected and undirected. - The diameter of a tree can be calculated by first performing a breadth-first search (BFS) or depth-first search (DFS) from an arbitrary node to find the farthest node `X`. Then, perform another BFS/DFS from `X` to determine the farthest distance from `X`, which gives the diameter.","solution":"from collections import deque, defaultdict def find_longest_path(n, edges): Returns the length of the longest path in the tree. if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and return the farthest node and its distance from the start node def bfs(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: current, dist = queue.popleft() for neighbor in graph[current]: if visited[neighbor] == -1: visited[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # Find the farthest node from an arbitrary node (let\'s start with node 1) farthest_node, _ = bfs(1) # Perform BFS again from the farthest node found to get the diameter _, diameter = bfs(farthest_node) return diameter # Example usage n = 5 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(find_longest_path(n, edges)) # Output: 3"},{"question":"Diana is a linguist and she is studying the evolution of languages. She has a list of words in the order they appeared in ancient texts, and she wants to know if there is any repetition of words to identify trends. Specifically, she wants to know the first word that appeared more than once in the texts. Help Diana by identifying this word. The first line of the input contains an integer n (1 ≤ n ≤ 5·10^5) — the number of words in the list. The second line contains n words, where each word is a sequence of lowercase English letters of length between 1 and 100 inclusive. Print one word — the first word that appeared more than once. If there is no such word, print \\"unique\\". **Note:** The words are case sensitive, \\"Word\\" and \\"word\\" would be considered different. **Example:** **Input:** ``` 8 hello world this is a test hello world ``` **Output:** ``` hello ``` **Explanation:** In the given sequence of words, \\"hello\\" is the first word that appears more than once.","solution":"def find_first_repeated_word(n, words): Function to find the first word that appeared more than once in a list of words. Parameters: n (int): The number of words in the list. words (list of str): The list of words in order of their appearance. Returns: str: The first repeated word or \'unique\' if no word is repeated. seen = set() for word in words: if word in seen: return word seen.add(word) return \\"unique\\""},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid contains a non-negative integer. You can perform the following operation: 1. Select a subgrid of size `2 x 2` and increment all the numbers in this subgrid by 1. Your task is to determine if it is possible to make all the numbers in the grid equal using the given operation. If it is possible, provide a sequence of operations to achieve it. Otherwise, print \\"No\\". The first line contains an integer `t` `(1 ≤ t ≤ 1000)` — the number of test cases. Each test case starts with a line containing two integers `n` and `m` `(2 ≤ n, m ≤ 50)` — the number of rows and columns in the grid. The next `n` lines contain `m` integers each, representing the grid. Output \\"Yes\\" if it is possible to make all the numbers in the grid equal, followed by the number of operations and the sequence of operations required. Each operation should be described by four integers — the row and column indices of the top-left cell of the `2 x 2` subgrid. If it is not possible, output \\"No\\". Example: Input: ``` 2 2 2 1 1 1 1 3 3 1 2 3 6 5 4 9 8 7 ``` Output: ``` Yes 0 No ``` Explanation: In the first test case, all numbers are already equal, so no operations are needed. In the second test case, it is not possible to make all the numbers equal using the given operation.","solution":"def can_make_all_equal_using_operations(t, test_cases): results = [] for n, m, grid in test_cases: possible = True target_value = grid[0][0] for row in grid: if any(cell != target_value for cell in row): possible = False break if possible: results.append(\\"Yesn0\\") else: results.append(\\"No\\") return results def process_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) grid = [] for i in range(n): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append((n, m, grid)) index += n + 1 return t, test_cases def format_output(results): return \\"n\\".join(results) # Example Usage: input_string = \\"2n2 2n1 1n1 1n3 3n1 2 3n6 5 4n9 8 7n\\" t, test_cases = process_input(input_string) results = can_make_all_equal_using_operations(t, test_cases) output_string = format_output(results) print(output_string)"},{"question":"A group of friends is planning a treasure hunt in a city. To make the hunt more interesting, they have decided to place several treasures at various locations around the city. Each treasure has a reward value associated with it, and each pair of treasures has a specific distance. The friends aim to collect as much reward as possible while traveling through the city, but they also want to minimize the distance they travel between collected treasures. Given a list of n treasures, each with a reward value, and m distances between pairs of treasures, help the friends determine the maximum reward they can collect without exceeding a given maximum distance they are willing to travel. The first line contains three integers n, m, and d (1 ≤ n ≤ 100, 1 ≤ m ≤ 100, 1 ≤ d ≤ 10000), where n is the number of treasures, m is the number of distances between treasures, and d is the maximum distance the friends are willing to travel. The second line contains n space-separated integers r[1], r[2], ..., r[n] (1 ≤ r[i] ≤ 1000), representing the reward values of the treasures. Each of the following m lines contains three space-separated integers x, y, and dist (1 ≤ x, y ≤ n, 1 ≤ dist ≤ d), representing the treasures at indices x and y, and the distance dist between them. Output the maximum reward the friends can collect without traveling a distance greater than d between any two collected treasures. Example Input: ``` 4 4 15 10 20 30 40 1 2 5 2 3 10 3 4 20 1 4 15 ``` Example Output: ``` 60 ``` Explanation: The friends can collect treasures at indices 1, 2, and 3, yielding rewards 10, 20, and 30 respectively. The total reward is 60, and the distances between them are 5 and 10, which do not exceed the maximum distance of 15.","solution":"def maximize_rewards(n, m, d, rewards, connections): from collections import defaultdict import heapq graph = defaultdict(list) for x, y, dist in connections: graph[x - 1].append((y - 1, dist)) graph[y - 1].append((x - 1, dist)) def dfs(node, accumulated_reward, current_distance, visited): nonlocal max_reward if current_distance > d: return max_reward = max(max_reward, accumulated_reward) for neighbor, distance in graph[node]: if neighbor not in visited: visited.add(neighbor) dfs(neighbor, accumulated_reward + rewards[neighbor], current_distance + distance, visited) visited.remove(neighbor) max_reward = 0 for i in range(n): dfs(i, rewards[i], 0, {i}) return max_reward # Test case n, m, d = 4, 4, 15 rewards = [10, 20, 30, 40] connections = [ (1, 2, 5), (2, 3, 10), (3, 4, 20), (1, 4, 15) ] print(maximize_rewards(n, m, d, rewards, connections)) # should output 60"},{"question":"Alice loves reading books and owns a collection of n books. Each book has a particular number of pages and a difficulty level. Alice wants to read as many books as possible, but she prefers reading books that are not too difficult for her. Alice has a maximum difficulty level d that she can comfortably read. Help Alice determine the maximum number of books she can read without exceeding her maximum difficulty level. You are given an integer n (1 ≤ n ≤ 1000) representing the number of books in Alice\'s collection. The next n lines each contain two integers, pi and di, where pi (1 ≤ pi ≤ 1000) is the number of pages in the i-th book and di (1 ≤ di ≤ 1000) is the difficulty level of the i-th book. Finally, you are given an integer d (1 ≤ d ≤ 1000), which is the maximum difficulty level that Alice can read. Your task is to compute and print the maximum number of books Alice can read without reading any book that exceeds her maximum difficulty level d. **Input:** ``` The first line contains an integer n. Each of the next n lines contains two space-separated integers pi and di. The last line contains a single integer d. ``` **Output:** ``` Print a single integer representing the maximum number of books Alice can read. ``` **Example:** ``` Input: 5 300 5 200 8 400 6 150 4 350 3 5 Output: 3 ``` In the example above, Alice can read the books with difficulties 5, 4, and 3 (first, fourth, and fifth books), making a total of 3 books. She cannot read the second and third books as their difficulty levels exceed her maximum limit of 5.","solution":"def max_books_alice_can_read(n, books, max_difficulty): Returns the maximum number of books Alice can read without exceeding her maximum difficulty level. Parameters: n (int): number of books. books (list): list of tuples (pages, difficulty) for each book. max_difficulty (int): maximum difficulty level Alice can read. Returns: int: maximum number of books Alice can read. count = 0 for pages, difficulty in books: if difficulty <= max_difficulty: count += 1 return count # Example usage if __name__ == \\"__main__\\": n = 5 books = [(300, 5), (200, 8), (400, 6), (150, 4), (350, 3)] d = 5 print(max_books_alice_can_read(n, books, d)) # Output: 3"},{"question":"Valera is playing a game with a grid of size n x m. Each cell in the grid contains a number from 0 to 9 inclusive. In a move, he can select any contiguous subarray (1×k block) in any row and decrement each number in this block by 1, as long as the result is a non-negative number. The task is to determine the minimum number of moves required to make all numbers in the grid equal to zero. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid. Each of the next n lines contains m integers, each representing a cell in the grid. Print a single integer — the minimum number of moves required. Example: Input: 2 3 3 1 2 2 3 1 Output: 6 In the example, one possible sequence of moves is: 1. Decrement the first two columns of the first row: [2, 0, 2] 2. Decrement the entire first row: [1, 0, 1] 3. Decrement the first and last column of the first row: [0, 0, 0] 4. Decrement the entire second row: [1, 2, 0] 5. Decrement the first two columns of the second row: [0, 1, 0] 6. Decrement the second column of the second row: [0, 0, 0] Thus, the total moves are 6.","solution":"def min_moves_to_zero(n, m, grid): Returns the minimum number of moves required to make all numbers in the grid equal to zero. moves = 0 for row in grid: moves += sum(row) return moves"},{"question":"Sophia is an avid reader and enjoys collecting books. She has recently decided to categorize her collection of books and is particularly interested in finding series where each book in the series has a sequentially increasing number of pages compared to the previous one. She then plans to choose the longest such series among her books. The problem is that she has so many books that analyzing them manually would be too time-consuming. Sophia needs your help to automate this process. Given the number of books and the number of pages in each book, find the longest subsequence of books such that the number of pages in each book is strictly greater than the number of pages in the previous book in the subsequence. The goal is to determine the length of the longest strictly increasing subsequence of books based on the number of pages. **Input:** - The first line contains a single integer `n` (1 le n le 10^5) — the number of books Sophia has. - The second line contains `n` integers `p_1, p_2, ..., p_n` (1 le p_i le 10^9) — the number of pages in each book. **Output:** Print a single integer — the length of the longest strictly increasing subsequence of books based on the number of pages. **Example:** ``` Input: 6 5 3 4 8 6 7 Output: 4 Explanation: The longest strictly increasing subsequence is 3, 4, 6, 7. ``` **Note:** - A subsequence is a sequence derived by deleting some or no elements while maintaining the order of the remaining elements. - For the given example, the longest strictly increasing subsequence of book pages is `[3, 4, 6, 7]`, and its length is 4.","solution":"def longest_increasing_subsequence(pages): Returns the length of the longest strictly increasing subsequence of book pages. import bisect subsequence = [] for page in pages: pos = bisect.bisect_left(subsequence, page) if pos == len(subsequence): subsequence.append(page) else: subsequence[pos] = page return len(subsequence) # Example usage: # n = 6 # pages = [5, 3, 4, 8, 6, 7] # print(longest_increasing_subsequence(pages)) # Output: 4"},{"question":"You are given a grid of n x m cells, where each cell represents either an empty space \'.\' or a block \'#\'. A person can move left, right, up, or down from an empty space to another empty space. Given a starting position (sx, sy) and a target position (tx, ty), write a program to determine if the person can reach the target position from the starting position without stepping outside the grid or onto a block. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines each contain m characters (\'.\' or \'#\'), representing the grid. The following line contains two integers sx and sy (1 ≤ sx ≤ n, 1 ≤ sy ≤ m) — the row and column of the starting position. The last line contains two integers tx and ty (1 ≤ tx ≤ n, 1 ≤ ty ≤ m) — the row and column of the target position. Print \\"YES\\" if it is possible to reach the target, and \\"NO\\" otherwise. Example input: ``` 4 4 .... .#.. ..#. .... 1 1 4 4 ``` Example output: ``` YES ```","solution":"def can_reach_target(n, m, grid, sx, sy, tx, ty): # Convert to zero-indexed positions sx -= 1 sy -= 1 tx -= 1 ty -= 1 # Define directions for movement (left, right, up, down) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Function to check if a position is within grid bounds and not on a block def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # BFS to check if we can reach (tx, ty) from (sx, sy) from collections import deque queue = deque([(sx, sy)]) visited = set((sx, sy)) while queue: x, y = queue.popleft() if (x, y) == (tx, ty): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Alice wants to organize a programming contest with p programmers. Each programmer has a unique skill level represented by an integer. Alice needs to form teams of exactly three programmers such that no two programmers in a team have consecutive skill levels when the skill levels are sorted in decreasing order. Alice wants to form the maximum number of teams possible under these conditions. You are given an array of integers where each integer represents a programmer\'s skill level. Determine the maximum number of teams Alice can form and print the teams. The first line contains an integer p (3 ≤ p ≤ 10^5) — the number of programmers. The second line contains p integers a1, a2, ..., ap (1 ≤ ai ≤ 10^9) — the skill levels of the programmers. Output the maximum number of teams that can be formed and then each team on a new line. Each team should be represented by three integers, the skill levels of the team members in any order. If multiple solutions exist, any of them will be accepted. If no valid teams can be formed, print 0. Example Input: 6 10 20 30 40 50 60 Example Output: 2 50 30 10 60 40 20","solution":"def form_teams(p, skill_levels): Determines the maximum number of teams that can be formed with specific rules and returns the teams. Args: p (int): The number of programmers. skill_levels (list of int): A list of integers representing the skill levels of the programmers. Returns: tuple: A tuple where the first element is the maximum number of teams and the second element is a list of teams. if p < 3: return 0, [] # Sort skill levels in descending order skill_levels.sort(reverse=True) # List to keep track of used skill levels used = [False] * p teams = [] # Try to form as many teams as possible for i in range(p - 2): if not used[i]: found_team = False for j in range(i + 1, p - 1): if not used[j] and abs(skill_levels[i] - skill_levels[j]) > 1: for k in range(j + 1, p): if not used[k] and abs(skill_levels[j] - skill_levels[k]) > 1 and abs(skill_levels[i] - skill_levels[k]) > 1: # Form a team teams.append([skill_levels[i], skill_levels[j], skill_levels[k]]) used[i] = used[j] = used[k] = True found_team = True break if found_team: break return len(teams), teams"},{"question":"In an ancient kingdom, there was a village consisting of **n** houses and **m** bidirectional roads connecting some pairs of houses. Each house either had a well or a river was accessible through the roads. The villagers want to construct water pipes such that every house has access to drinking water either directly from a well or from another house through a series of water pipes. The cost of laying a water pipe between two houses equals the distance between them. You are given the costs of constructing water pipes between each pair of connected houses, and the cost of digging a new well in each house. Your task is to find the minimum cost required to supply water to all houses. The input consists of: - An integer **n** (1 ≤ n ≤ 1000), the number of houses. - An integer **m** (0 ≤ m ≤ 10000), the number of bidirectional roads. - A list of integers of size **n**, where the i-th integer is the cost to dig a well in the i-th house. - **m** lines each containing three integers **u**, **v**, **w** (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 1000000), representing a road connecting house u and house v with a pipe construction cost **w**. Output a single integer representing the minimum cost to supply water to all houses. Example: Input: ``` 4 4 5 2 3 4 1 2 1 2 3 1 3 4 1 1 4 3 ``` Output: ``` 5 ``` Explanation: In this example, the most cost-effective way to supply water is to: 1. Dig a well in house 2 with a cost of 2. 2. Construct a water pipe from house 2 to house 1 with a cost of 1. 3. Construct a water pipe from house 2 to house 3 with a cost of 1. 4. Construct a water pipe from house 3 to house 4 with a cost of 1. Thus, the total minimum cost is 2 + 1 + 1 + 1 = 5.","solution":"import heapq def minCostToSupplyWater(n, m, well_costs, roads): # Convert well costs into a form of \\"virtual\\" edges from a virtual node 0 edges = [(well_costs[i], 0, i + 1) for i in range(n)] # Add the actual road connections for road in roads: u, v, w = road edges.append((w, u, v)) # Kruskal\'s algorithm requires sorting edges by weight edges.sort() # Union-Find (Disjoint Set) functionality parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Iterate over sorted edges, adding to result if it connects new components total_cost = 0 for cost, u, v in edges: if find(u) != find(v): union(u, v) total_cost += cost return total_cost"},{"question":"Given a rectangular grid of size N times M, some cells are empty, and some cells contain obstacles. You are provided with two lists of coordinates describing these obstacles, the first denoting initial obstacles placed on the grid and the second denoting planned future obstacles. You are tasked with finding the maximum number of empty cells that could be reduced by placing the planned obstacles on the grid. However, you can only place future obstacles on empty cells that are not adjacent (horizontal or vertical) to any initial obstacles. An obstacle placed at (r,c) is considered to make a cell non-empty. Note that obstacles cannot overlap other obstacles. # Input The first line of the input contains two integers N and M (1 le N, M le 1000) — the number of rows and columns of the grid. The second line contains an integer K (1 le K le 100,000) — the number of initial obstacles. The next K lines contain two integers each, r_i and c_i (1 le r_i le N, 1 le c_i le M) — the coordinates of initial obstacles. The following line contains an integer L (1 le L le 100,000) — the number of planned future obstacles. The next L lines contain two integers each, r_j and c_j (1 le r_j le N, 1 le c_j le M) — the coordinates of planned future obstacles. # Output Print one integer: the maximum number of empty cells that could be reduced by placing the planned future obstacles under the constraint provided. # Example Input: ``` 4 4 3 1 1 2 2 3 3 5 2 1 3 4 4 2 2 3 4 4 ``` Output: ``` 2 ``` Explanation: The initial obstacles are placed at (1,1), (2,2), and (3,3). The planned future obstacles can be placed on either (2,1), (3,4), or (4,2) but not on (2,3) and (4,4) as they are adjacent to the initial obstacles. Placing the planned obstacles at (2,1) and (3,4) maximizes the number of reduced empty cells, hence the answer is 2.","solution":"def max_reduced_empty_cells(N, M, initial_obstacles, planned_obstacles): Given the size of the grid, initial obstacles, and planned future obstacles, this function returns the maximum number of reduced empty cells by placing planned obstacles without placing them adjacent to initial obstacles. # Create a grid to track obstacles grid = [[0] * (M + 2) for _ in range(N + 2)] for obstacle in initial_obstacles: r, c = obstacle grid[r][c] = 1 # Mark initial obstacles on grid # Mark cells adjacent to initial obstacles for obstacle in initial_obstacles: r, c = obstacle if r > 1: grid[r-1][c] = -1 if r < N: grid[r+1][c] = -1 if c > 1: grid[r][c-1] = -1 if c < M: grid[r][c+1] = -1 count = 0 for obstacle in planned_obstacles: r, c = obstacle if grid[r][c] == 0: count += 1 grid[r][c] = 1 # Place the obstacle return count"},{"question":"You are given a 2D grid of size n x m, where each cell contains a lowercase Latin letter. Your task is to find the length of the largest palindrome that can be formed by traversing from any cell to any other cell (or the same cell) in a straight line horizontally, vertically, or diagonally. A palindrome is a sequence of characters that reads the same forward and backward. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. The next n lines each contain a string of length m, representing a row of the grid. Output a single integer — the length of the largest palindrome that can be formed as described. Example: Input: 3 3 aba bbb abx Output: 3 In this sample, \\"aba\\" is the largest palindrome that can be formed by traversing diagonally.","solution":"def largest_palindrome_length(n, m, grid): def is_palindrome(s): return s == s[::-1] max_len = 1 # Check horizontally for i in range(n): for j in range(m): for k in range(j, m): substr = grid[i][j:k+1] if is_palindrome(substr): max_len = max(max_len, k - j + 1) # Check vertically for i in range(m): for j in range(n): for k in range(j, n): substr = \'\'.join(grid[x][i] for x in range(j, k+1)) if is_palindrome(substr): max_len = max(max_len, k - j + 1) # Check diagonally (down-right) for i in range(n): for j in range(m): l, substr = 0, [] while i + l < n and j + l < m: substr.append(grid[i + l][j + l]) if is_palindrome(\'\'.join(substr)): max_len = max(max_len, len(substr)) l += 1 # Check diagonally (down-left) for i in range(n): for j in range(m): l, substr = 0, [] while i + l < n and j - l >= 0: substr.append(grid[i + l][j - l]) if is_palindrome(\'\'.join(substr)): max_len = max(max_len, len(substr)) l += 1 return max_len"},{"question":"In a far-off land, there lies a kingdom that is renowned for its vast libraries of ancient scrolls and wisdom. The citizens of the kingdom hold an annual competition to find the most efficient coder in the realm. This year, the challenge is based on understanding and manipulating sequences of numbers. A sequence of numbers is called \\"Interesting\\" if the greatest common divisor (GCD) of all its elements is 1. As a participant in the competition, your task is to find out if a given sequence, after performing the allowed operations, can be turned into an \\"Interesting\\" sequence. The allowed operations are as follows: 1. You can choose any two elements of the sequence and replace one of them with the difference of these two elements. 2. You can repeat this operation as many times as needed. Given a sequence of n positive integers, determine if it is possible to transform the sequence into an \\"Interesting\\" sequence using the allowed operations. # Input - The first line contains a single integer n, the number of elements in the sequence (1 ≤ n ≤ 100). - The second line contains n space-separated integers, representing the sequence (each integer is between 1 and 1000). # Output - Print \\"YES\\" if it is possible to transform the sequence into an \\"Interesting\\" sequence, otherwise print \\"NO\\". # Example Input ``` 4 6 10 15 20 ``` Output ``` YES ``` Input ``` 3 2 4 8 ``` Output ``` NO ``` # Note In the first example, after some operations, the sequence can be transformed such that the GCD of all elements is 1. For instance, replacing 6 by |6 - 10| = 4, and then replacing 10 by |10 - 4| = 6, results in the sequence [4, 6, 15, 20]. Continuing this process can yield a sequence where the GCD of all elements becomes 1. In the second example, the GCD of all elements is 2, and it is not possible to achieve a GCD of 1.","solution":"import math from functools import reduce def is_interesting_sequence(n, sequence): Determines if the given sequence can be transformed into an \\"Interesting\\" sequence. A sequence is \\"Interesting\\" if the GCD of all its elements is 1. :param n: int, the number of elements in the sequence :param sequence: list[int], the sequence of elements :return: str, \\"YES\\" if possible to transform into an \\"Interesting\\" sequence, otherwise \\"NO\\" overall_gcd = reduce(math.gcd, sequence) return \\"YES\\" if overall_gcd == 1 else \\"NO\\""},{"question":"Two twins, Alice and Bob, love to play games together. One day, they decided to play a coin flipping game. They get enthusiastic whenever an amazing sequence appears during the game. In the game, there is a string of length `n` consisting of characters \'H\' and \'T\', representing the heads and tails outcome of consecutive coin flips. An amazing sequence is defined as a contiguous substring of the original string where the number of heads equals the number of tails. For instance, in the string \\"HTTH\\", the substrings \\"HT\\" and \\"TTH\\" are amazing sequences. Alice and Bob are interested in finding out how many distinct amazing sequences exist in the string. You should help them by writing a program to determine this number. Write a function `countAmazingSequences(n, s)` to solve the problem. The input parameters are: - `n`: an integer (1 ≤ n ≤ 10^5), the length of the string `s`. - `s`: a string of length `n` containing only characters \'H\' and \'T\'. The function should return an integer representing the number of distinct amazing sequences in the string. # Input - An integer `n`. - A string `s`. # Output - A single integer, the number of distinct amazing sequences. # Example The function could be used as follows: ```python countAmazingSequences(4, \\"HTTH\\") ``` Output: `3` Explanation: - \\"HT\\" (Heads: 1, Tails: 1) - \\"TTH\\" (Heads: 1, Tails: 1) - \\"HTTH\\" (Heads: 2, Tails: 2) All of these are distinct amazing sequences.","solution":"def countAmazingSequences(n, s): Returns the number of distinct amazing sequences in the string s where the number of heads (\'H\') equals the number of tails (\'T\'). count = 0 for length in range(2, n+1, 2): # Amazing sequences can only be of even length for i in range(n - length + 1): substr = s[i:i+length] if substr.count(\'H\') == substr.count(\'T\'): count += 1 return count"},{"question":"A software company has a large project that involves processing huge datasets. Each dataset is represented as an array of integers. The project requires frequent range sum queries and updates on these arrays. To facilitate this, they decided to use a segment tree, which allows efficient updates and sum queries. You are tasked with implementing a segment tree to support this functionality. Specifically, you need to implement two operations: 1. `update(index, value)`: Update the element at position `index` in the array to `value`. 2. `sumRange(left, right)`: Return the sum of the elements in the array from index `left` to index `right` inclusive. The first line of input contains two integers, `n` (1 ≤ n ≤ 100,000) and `q` (1 ≤ q ≤ 100,000), representing the size of the array and the number of queries, respectively. The second line contains `n` integers, representing the initial values of the array. The next `q` lines contain queries in the following format: - `\\"u index value\\"`: Update the element at `index` to `value` (1-based indexing). - `\\"s left right\\"`: Compute the sum of elements from `left` to `right` (1-based indexing). Output the result of each sum query in the same order they appear in the input. Example: Input: ``` 5 5 1 3 5 7 9 s 1 3 u 3 10 s 1 3 u 4 6 s 2 5 ``` Output: ``` 9 14 28 ``` In this example, the operations are performed on an initial array [1, 3, 5, 7, 9]. The sum of elements from index 1 to 3 is 9. After updating the element at index 3 to 10, the new array becomes [1, 3, 10, 7, 9], and the sum from index 1 to 3 is 14. After updating the element at index 4 to 6, the new array becomes [1, 3, 10, 6, 9], and the sum from index 2 to 5 is 28.","solution":"class SegmentTree: def __init__(self, nums): self.n = len(nums) self.tree = [0] * (2 * self.n) self.build(nums) def build(self, nums): # Fill the second half of tree with the original nums array for i in range(self.n): self.tree[self.n + i] = nums[i] # Build the segment tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): index += self.n # Shift index to second half self.tree[index] = value while index > 1: index //= 2 self.tree[index] = self.tree[index * 2] + self.tree[index * 2 + 1] def sumRange(self, left, right): left += self.n # Shift left to second half right += self.n # Shift right to second half s = 0 while left <= right: if left % 2 == 1: s += self.tree[left] left += 1 if right % 2 == 0: s += self.tree[right] right -= 1 left //= 2 right //= 2 return s"},{"question":"In a faraway land, there exists a unique sequence of numbers that people believe to be magical. This sequence is defined recursively, and the people of the land frequently engage in tasks involving this sequence. Given an integer ( n ), the ( n )-th number in the magical sequence can be defined as follows: 1. ( a(1) = 1 ) 2. ( a(2) = 1 ) 3. For ( n > 2 ): [ a(n) = begin{cases} a(n-1) + a(n-2) & text{if } n text{ is even} a(n-1) - a(n-2) & text{if } n text{ is odd} end{cases} ] Your task is to write a program that calculates the ( n )-th number in this sequence. # Input - The input consists of a single line containing a single integer ( n ) (( 1 leq n leq 10^5 )) which represents the position in the magical sequence. # Output - Output the ( n )-th number in the magical sequence. # Example Input ``` 5 ``` Output ``` 1 ``` # Explanation The first few numbers in the sequence are: - ( a(1) = 1 ) - ( a(2) = 1 ) - ( a(3) = a(2) - a(1) = 1 - 1 = 0 ) - ( a(4) = a(3) + a(2) = 0 + 1 = 1 ) - ( a(5) = a(4) - a(3) = 1 - 0 = 1 ) Hence, the fifth number in the sequence is ( 1 ).","solution":"def magical_sequence(n): Returns the n-th number in the magical sequence. if n == 1 or n == 2: return 1 a = [1, 1] # Initialize the base cases a(1) and a(2) for i in range(3, n+1): if i % 2 == 0: a.append(a[-1] + a[-2]) else: a.append(a[-1] - a[-2]) return a[-1]"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight that can be either 1 or 2. Your task is to find the shortest path from vertex 1 to vertex n using Breadth-First Search (BFS) while considering the weights of the edges. If there is no path from vertex 1 to vertex n, then print -1. The first line contains two integers n and m (1 le n le 1000, 0 le m le 2000) — the number of vertices and edges in the graph. Each of the next m lines describes an edge by three integers u, v, and w (1 le u, v le n, u ne v, w in {1, 2}) — the vertices connected by this edge and the weight of the edge. Print the length of the shortest path from vertex 1 to vertex n. If there is no such path, print -1. **Example:** Input: ``` 4 4 1 2 1 2 3 2 3 4 1 1 4 2 ``` Output: ``` 2 ``` In this example, one of the shortest paths from vertex 1 to vertex 4 is 1 -> 2 (weight 1) -> 4 (weight 1), giving a total weight of 2.","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges): Finds the shortest path from vertex 1 to vertex n using a weighted BFS approach. Returns the length of the shortest path or -1 if there is no path from vertex 1 to vertex n. graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # BFS with a queue holding (vertex, current_distance) queue = deque([(1, 0)]) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[1] = 0 while queue: current_node, current_distance = queue.popleft() for neighbor, weight in graph[current_node]: new_distance = current_distance + weight if new_distance < distances[neighbor]: distances[neighbor] = new_distance queue.append((neighbor, new_distance)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"- In a particular game, there is a character who needs to traverse a grid of size `n x m`. The character starts at the top-left corner of the grid and needs to reach the bottom-right corner. Each cell in the grid has a specific risk value associated with it, represented by a non-negative integer. - The character can only move right or down from any cell `(i, j)`. The goal is to minimize the total risk value encountered on the path from the top-left corner to the bottom-right corner. - You are given multiple test cases. For each test case, you need to find the minimum total risk value for the character to reach the bottom-right corner from the top-left corner. - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each test case consists of: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the dimensions of the grid. - Each of the next `n` lines contains `m` integers, representing the risk values of the grid cells. The risk value of the cell `(i, j)` is denoted by `a[i][j]` (0 ≤ `a[i][j]` ≤ 1000). Output the minimum total risk value for each test case. Example Input: ``` 2 3 3 1 3 5 2 1 2 4 6 1 2 2 1 2 4 3 ``` Example Output: ``` 7 6 ``` Explanation: - In the first test case, the optimal path is `1 -> 2 -> 1 -> 2 -> 1`, which gives a total risk value of `7`. - In the second test case, the optimal path is `1 -> 2 -> 3`, which gives a total risk value of `6`. Your task is to implement a function that computes the minimum total risk value for each test case.","solution":"def min_risk_path(t, test_cases): results = [] for case in test_cases: n, m, grid = case dp = [[0]*m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[-1][-1]) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) grid = [] for i in range(n): grid.append(list(map(int, input_lines[index + 1 + i].split()))) test_cases.append((n, m, grid)) index += n + 1 return t, test_cases"},{"question":"Kaitlyn is developing a new game where players can collect gems. Each gem has a defined weight and a beauty index. Players can carry as many gems as they like, but they can only carry a total weight that is less than or equal to a given maximum weight limit. Help Kaitlyn design an algorithm that finds the maximum total beauty of gems that a player can carry given the weight limit. The first input line contains two integers n and W, where n (1 ≤ n ≤ 1000) is the number of gems and W (1 ≤ W ≤ 10000) is the maximum weight the player can carry. Each of the next n lines contains two integers wi and bi (1 ≤ wi ≤ 1000 and 0 ≤ bi ≤ 1000), which are the weight and beauty index of the i-th gem respectively. Print one integer — the maximum total beauty of the gems that can be carried within the given weight limit. In the first example, the player can carry gems with weights 2, 2, and 3 (total weight 7) with respective beauty indices 4, 3, and 5 (total beauty 12). In the second example, the player can only carry the gem with weight 2 and beauty index 4, as the other gem exceeds the weight limit. In the third example, the player can carry all gems since their total weight is exactly equal to the maximum weight limit. The total beauty is the sum of each gem\'s beauty index.","solution":"def max_total_beauty(n, W, gems): This function calculates the maximum total beauty of gems that can be carried given a weight limit. :param n: int - Number of gems :param W: int - Maximum weight limit :param gems: list of tuples - Each tuple contains two integers, the weight and beauty index of a gem :return: int - Maximum total beauty of gems that can be carried dp = [0] * (W + 1) for weight, beauty in gems: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + beauty) return dp[W]"},{"question":"A company wants to assign desks to the employees in their new office space. The office is represented as an M x N grid. Some of the cells in the grid contain obstacles (like pillars or other furniture), and employees cannot be assigned to these cells. The company wants to place employees in such a way that no two adjacent cells (horizontally or vertically) are occupied by employees, because they find it too distracting to sit next to each other. Additionally, the company prefers to maximize the number of employees assigned. Write a program that determines a possible placement of employees in the office space. If it is impossible to place any employees, the program should output \\"Not Possible\\". Otherwise, the program should output the grid configuration with employees placed, where an employee is represented by \'E\', an empty space is represented by \'.\', and an obstacle is represented by \'#\'. The first line contains two integers M and N (1 ≤ M, N ≤ 50), representing the number of rows and columns in the grid. Each of the following M lines contains exactly N characters (either \'.\', \'#\'), representing the office layout. Output the grid configuration with the placed employees, or \\"Not Possible\\" if no valid assignment can be made. If there are multiple solutions, you may print any of them. # Example Input: ``` 4 5 ..... .#.#. ..... ..#.. ``` Output: ``` E.E.E .#.#. E.E.E ..#.. ``` Input: ``` 3 3 # # # ``` Output: ``` Not Possible ``` Note: The first example shows one of the possible configurations where employees are placed in a non-adjacent manner. In the second example, it\'s not possible to place any employees due to obstacles filling the entire grid.","solution":"def assign_desks(grid, M, N): result = [list(row) for row in grid] def can_place(i, j): if result[i][j] != \'.\': # Can\'t place on obstacles or other employees return False if i > 0 and result[i-1][j] == \'E\': # Check above return False if j > 0 and result[i][j-1] == \'E\': # Check left return False return True # Convert result grid based on the conditions for i in range(M): for j in range(N): if can_place(i, j): result[i][j] = \'E\' # Check if at least one employee found for row in result: if \'E\' in row: return \'n\'.join(\'\'.join(row) for row in result) return \\"Not Possible\\" # Unit tests def test_assign_desks(): M1, N1 = 4, 5 layout1 = [ \\".....\\", \\".#.#.\\", \\".....\\", \\"..#..\\" ] output1 = assign_desks(layout1, M1, N1) print(output1) # Expected: Any valid configuration with non-adjacent employees. M2, N2 = 3, 3 layout2 = [ \\"#\\", \\"#\\", \\"#\\" ] output2 = assign_desks(layout2, M2, N2) print(output2) # Expected: \\"Not Possible\\""},{"question":"The Warlord has a collection of ancient artifacts, each labeled with a unique integer number. She wants to create a display showcasing the artifacts, but she wants to ensure the artifacts are arranged in order of their labels. However, the display space is limited, so if there are gaps between the artifact labels, she wants to fill those gaps with new artifacts such that the longest increasing subsequence (LIS) of artifact labels in the display remains as long as possible. You are required to determine the length of the LIS after the gaps have been filled optimally. The first line contains an integer n (1 leq n leq 10^5) — the number of artifacts the Warlord currently possesses. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the labels of the artifacts, which are all distinct. Output a single integer — the length of the longest increasing subsequence after optimally filling the gaps. # Examples Input: ``` 5 1 5 3 6 2 ``` Output: ``` 5 ``` Explanation: The Warlord can fill the gaps optimally such that the sequence becomes, for example, [1, 2, 3, 4, 5, 6] which has an LIS of length 5. Input: ``` 4 4 10 7 15 ``` Output: ``` 6 ``` Explanation: Filling the gaps can give the sequence [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] which has an LIS of length 6. # Constraints - The length of the optimal LIS for any given input is guaranteed to fit in a 32-bit signed integer.","solution":"def longest_increasing_subsequence_length(n, labels): Returns the length of the longest increasing subsequence after optimally filling the gaps. # The task requires determining the LIS length of the array in its sorted form return len(set(labels)) # removing possible duplicates that might occur in some other problem sets def process_input(): n = int(input()) labels = list(map(int, input().split())) print(longest_increasing_subsequence_length(n, labels))"},{"question":"Alice is organizing a coding competition and she needs your help to set up the scoreboard system. She has a list of participants, and each participant has a unique name and a score. The scoreboard should allow her to perform the following operations efficiently: 1. Add a participant with a score. 2. Delete a participant. 3. Update the score of a participant. 4. Retrieve the name of the participant with the highest score. In case of a tie, return the name which comes first lexicographically. As usual, there are some constraints and you need to handle the operations in an optimal way. The first line of the input contains an integer Q (1 ≤ Q ≤ 100,000) — the number of operations. The following Q lines describe the operations in the following formats: - add name score — Add a participant with the given name (a string of up to 100 alphabetic characters) and score (an integer between 0 and 1,000,000). If the participant already exists, this operation is ignored. - delete name — Delete the participant with the given name. If the participant does not exist, this operation is ignored. - update name new_score — Update the score of the participant with the given name to new_score (an integer between 0 and 1,000,000). If the participant does not exist, this operation is ignored. - query — Retrieve the name of the participant with the highest score. If there are multiple participants with the highest score, return the name which comes first lexicographically. Print the results of the \\"query\\" operations, each on a new line. If there are no participants in the scoreboard, print \\"EMPTY\\" instead. Example: Input: ``` 8 add Alice 500 add Bob 700 query update Alice 700 query delete Bob query update Alice 600 query ``` Output: ``` Bob Alice Alice Alice ```","solution":"import heapq class Scoreboard: def __init__(self): self.participants = {} self.max_heap = [] self.dirty = False def add(self, name, score): if name not in self.participants: self.participants[name] = score heapq.heappush(self.max_heap, (-score, name)) def delete(self, name): if name in self.participants: del self.participants[name] self.dirty = True def update(self, name, new_score): if name in self.participants: self.participants[name] = new_score heapq.heappush(self.max_heap, (-new_score, name)) self.dirty = True def query(self): while self.dirty: # Remove outdated entries while self.max_heap and (-self.max_heap[0][0] != self.participants.get(self.max_heap[0][1], None)): heapq.heappop(self.max_heap) self.dirty = False if not self.participants: return \\"EMPTY\\" # Get the entry with the max score while self.max_heap: score, name = heapq.heappop(self.max_heap) if name in self.participants and self.participants[name] == -score: heapq.heappush(self.max_heap, (score, name)) return name return \\"EMPTY\\""},{"question":"Vera is training her coding skills by solving algorithmic problems. She has a sequence of numbers and she needs to find the longest subsequence that has a non-decreasing order. A subsequence can be derived from an array by deleting some or no elements without changing the order of the remaining elements. Help Vera write a program that finds the length of the longest non-decreasing subsequence in her sequence. The first line contains integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the sequence of numbers. Print a single integer — the length of the longest non-decreasing subsequence. For example: - If the input sequence is [3, 10, 2, 1, 20], the longest non-decreasing subsequence is [3, 10, 20], so the output is 3. - If the input sequence is [3, 2], the longest non-decreasing subsequence is [3] or [2], so the output is 1.","solution":"def longest_non_decreasing_subsequence_length(n, sequence): Returns the length of the longest non-decreasing subsequence. if n == 0: return 0 # Initialize the DP array dp = [1] * n # Compute the lengths of the longest non-decreasing subsequence ending at each index for i in range(1, n): for j in range(i): if sequence[i] >= sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest non-decreasing subsequence is the maximum value in dp array return max(dp)"},{"question":"You are working in a manufacturing plant that assembles devices from several components. There are n types of components, and you need to assemble exactly one device. Each type of component can be produced in any quantity. However, it is known that the production of a component of type i requires t_i units of time and costs c_i dollars. To assemble the device, you need to use at least one of each type of component. Your goal is to minimize the total cost of assembling one device under the constraint that you have at most T units of time available for production. Write a program that determines the minimum cost required to assemble one device. The first line of the input contains two integers n and T (1 le n le 100,000, 1 le T le 10^9) — the number of components and the maximum available time. The next n lines each contain two integers t_i and c_i (1 le t_i le 10^6, 1 le c_i le 10^6)— the time required to produce one component of type i and the cost of one component of type i. Print a single integer — the minimum cost required to assemble one device within the given time constraint. Example: Input: ``` 3 10 5 8 3 5 2 4 ``` Output: ``` 17 ``` Explanation: You can produce one of each type, consuming 5 + 3 + 2 = 10 units of time and the total cost is 8 + 5 + 4 = 17 dollars. Hence, the minimum cost required to assemble one device within the given time constraint is 17 dollars.","solution":"def minimum_assembly_cost(n, T, components): Determines the minimum cost required to assemble one device within the given time constraint. :param n: Number of component types :param T: Maximum available time units :param components: List of tuples, each containing two integers, t_i and c_i :return: Minimum cost required to assemble one device total_time = 0 total_cost = 0 for t_i, c_i in components: total_time += t_i total_cost += c_i # Check if the total time is within the allowed time T if total_time <= T: return total_cost else: return float(\'inf\') # We consider this as an impossible case scenario n, T = 3, 10 components = [(5, 8), (3, 5), (2, 4)] print(minimum_assembly_cost(n, T, components)) # Expected: 17"},{"question":"You are given two strings, a and b, both consisting of lowercase Latin letters and of length n. A substring is defined as a sequence of contiguous characters within a string. Your task is to find the minimum number of substrings that need to be reversed in string a to make it equal to string b. If it is not possible to make the strings equal by reversing substrings, print \\"IMPOSSIBLE\\". Reversing a substring means taking a substring of a, reversing the order of its characters, and placing it back in a at the same position. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows. Each test case consists of three lines: - The first line contains an integer n (1 le n le 100) — the length of the strings. - The second line contains string a of length n. - The third line contains string b of length n. For each test case, print the minimum number of substring reversals needed to make a equal to b, or print \\"IMPOSSIBLE\\" if it cannot be done. # Input ``` 2 3 abc cba 4 abcd dcba ``` # Output ``` 1 1 ``` # Explanation In the first test case, you can reverse the entire string \\"abc\\" to get \\"cba\\". Only one reversal is needed. In the second test case, you can reverse the entire string \\"abcd\\" to get \\"dcba\\". Only one reversal is needed.","solution":"def min_substring_reversals(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] b = test_cases[i][2] if sorted(a) != sorted(b): results.append(\\"IMPOSSIBLE\\") continue reversals = 0 # We need to find the mismatched segments and count the minimum reversals needed. i, j = 0, n - 1 while i < j: if a[i] != b[i] or a[j] != b[j]: # Starting new reversal operation reversals += 1 # Adjust indices for segment that needs reversal while i < j and (a[i] != b[i] or a[j] != b[j]): i += 1 j -= 1 else: i += 1 j -= 1 results.append(reversals) return results # Example test cases to check the function t = 2 test_cases = [ (3, \\"abc\\", \\"cba\\"), (4, \\"abcd\\", \\"dcba\\") ] print(min_substring_reversals(t, test_cases)) # Output: [1, 1]"},{"question":"Joy is participating in a smartphone scavenger hunt. She needs to find hidden QR codes placed at different locations in the city. Each location is represented by a unique positive integer from 1 to n. There is a special code that Joy is particularly interested in finding which, when scanned, gives her double points. This special code is located at position k. However, Joy is running out of time and she can only visit a subset of these locations. Given the total number of locations n, the position of the special code k, and the number of locations Joy can visit m, determine if it\'s possible for her to visit the special code location. The first line of the input contains three integers n, k, and m (1 ≤ k ≤ n ≤ 10^5; 1 ≤ m ≤ n). The next line contains m unique integers ai (1 ≤ ai ≤ n), representing the subset of locations Joy can visit. Print \\"YES\\" if Joy can visit the special code location; otherwise, print \\"NO\\". In the first example, Joy needs to visit location 3 (the special code) and she can visit locations {1, 2, 3, 4}. Hence, the output is \\"YES\\". In the second example, even though Joy can visit up to 3 locations, none of these locations contain the special code, so the output is \\"NO\\".","solution":"def can_visit_special_location(n, k, m, locations): Determine if Joy can visit the special code location. Args: n (int): Total number of locations. k (int): Position of the special code. m (int): Number of locations Joy can visit. locations (list of int): List of m unique integers representing the subset of locations Joy can visit. Returns: str: \\"YES\\" if Joy can visit the special code location, otherwise \\"NO\\". if k in locations: return \\"YES\\" return \\"NO\\""},{"question":"Shovel is planning for a farming season. He has m fields, and each field needs to be plowed a certain number of times to be ready. He has an old plowing machine with limited durability — it can be used at most d times before it breaks down and needs to be repaired. Shovel wants to minimize the number of times the machine needs to be repaired. The first line of the input contains two integers m and d (1 ≤ m ≤ 10^5, 1 ≤ d ≤ 10^9) — the number of fields and the durability of the machine, respectively. The second line contains m integers a1, a2, ..., am (1 ≤ ai ≤ 10^9), where ai is the number of times field i needs to be plowed. Output a single integer, the minimum number of times the machine needs to be repaired. Consider the times the machine is used before it breaks and needs repair, for example: When m = 3, d = 5, and the number of times each field needs to be plowed are 4, 3, and 2 respectively: First field requires 4 plows. Second field requires 3 more plows, totaling to 7 plows, requiring one machine repair after 5 uses, leaving 2 uses. Third field requires 2 more plows, using up the remaining uses, needing no further repairs. Thus, minimum repairs needed = 1.","solution":"def min_repairs(m, d, plowing_needs): Calculate the minimum number of times the machine needs to be repaired. Arguments: m: int - number of fields d: int - durability of the machine (maximum number of uses before repair) plowing_needs: list of int - list where each value represents the number of times a field needs to be plowed Returns: int - minimum number of repairs needed total_plows = sum(plowing_needs) # Calculate the number of repairs needed repairs_needed = total_plows // d if total_plows % d == 0: # If perfectly divisible, we don\'t need an extra repair repairs_needed -= 1 return repairs_needed"},{"question":"Alice has recently taken an interest in stair-step problems. She has a staircase with `n` steps, and she wants to climb to the top. However, she can only take steps of size `1` or `2` at a time. For example, if the staircase has 3 steps, Alice could climb it in the following ways: [1, 1, 1], [1, 2], [2, 1]. Alice wonders how many distinct ways there are to reach the top of the staircase. Can you help her write a program to calculate this? # Input The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the next `t` lines contains a single integer `n` (0 ≤ n ≤ 50), representing the number of steps in the staircase. # Output For each test case, output the number of distinct ways to climb a staircase with `n` steps. # Example Input ``` 3 2 3 4 ``` Output ``` 2 3 5 ``` # Note - For the first test case, there are 2 ways to climb the staircase: [1, 1], [2]. - For the second test case, there are 3 ways to climb the staircase: [1, 1, 1], [1, 2], [2, 1]. - For the third test case, there are 5 ways to climb the staircase: [1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2].","solution":"def number_of_ways(t, test_cases): Returns the number of distinct ways to climb a staircase with n steps. :param t: Number of test cases :param test_cases: List of integers representing the number of steps in each test case :return: List of integers representing the number of ways to climb staircases for each test case max_n = max(test_cases) ways = [0] * (max_n + 1) # Initialize base cases if max_n >= 0: ways[0] = 1 if max_n >= 1: ways[1] = 1 # Populate the ways array using the relation ways[n] = ways[n-1] + ways[n-2] for i in range(2, max_n + 1): ways[i] = ways[i - 1] + ways[i - 2] # Return the results for each test case return [ways[n] for n in test_cases]"},{"question":"You are working on a project that involves handling currency conversions. Given a list of available exchange rates, you need to determine the maximum amount of money you can end up with after making a series of exchanges starting with a specific amount in a particular currency. You are given n currencies and m exchange rates. Each exchange rate allows you to convert a certain amount of one currency to another at a specified rate. Starting with an initial amount in a starting currency, compute the maximum amount you can obtain in a target currency after performing any number of exchanges. Beware that due to multiple exchange pathways, you might need to use algorithms related to graph traversal and shortest/longest path computations. The first line contains four integers n, m, s, and t (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ s, t ≤ n) — the number of currencies, the number of exchange rates, the starting currency index, and the target currency index, respectively. The second line contains a single integer k (1 ≤ k ≤ 10^6) — the initial amount of money in the starting currency. The next m lines contain the exchange rates. Each rate is represented by three parameters ui, vi, and ri (1 ≤ ui, vi ≤ n, 0 < ri ≤ 100) — indicating that you can exchange 1 unit of currency ui to ri units of currency vi. Print a single decimal number representing the maximum amount of money you can end up with in the target currency. Your answer will be considered correct if its absolute or relative error does not exceed 10^-4. Example: Input: 3 3 1 3 100 1 2 2.0 2 3 1.5 1 3 2.5 Output: 250.0000 Explanation: You can exchange currency 1 directly to currency 3 at a rate of 2.5, thus obtaining 100 * 2.5 = 250 units of currency 3.","solution":"def max_currency(n, m, s, t, k, exchange_rates): from collections import defaultdict import heapq # Create adjacency list from the exchange rates graph = defaultdict(list) for u, v, r in exchange_rates: graph[u].append((v, r)) # Initialize the max amounts dictionary with 0 max_amounts = {i: 0 for i in range(1, n + 1)} max_amounts[s] = k # Use a max heap for the priority queue heap = [(-k, s)] while heap: current_amount, current_currency = heapq.heappop(heap) current_amount = -current_amount if current_currency == t: return current_amount for neighbor, rate in graph[current_currency]: new_amount = current_amount * rate if new_amount > max_amounts[neighbor]: max_amounts[neighbor] = new_amount heapq.heappush(heap, (-new_amount, neighbor)) return max_amounts[t] # Example to demonstrate the functionality n, m, s, t = 3, 3, 1, 3 k = 100 exchange_rates = [(1, 2, 2.0), (2, 3, 1.5), (1, 3, 2.5)] print(max_currency(n, m, s, t, k, exchange_rates)) # Output should be 250.0000"},{"question":"Alice has a collection of unique stamp designs, each identified by a distinct integer from 1 to n. She arranges her stamps in a line on a shelf with some gaps between them. To create an exhibit, she wants to ensure that the arrangement of stamps is such that the differences in positions of consecutive stamps on the shelf are minimized. Given an array `a` of length `n` where each element represents the position of the stamp in the line, you are to compute the minimial possible value of the maximum difference between the positions of any two consecutive stamps after rearranging them optimally. Write a function `minimize_max_gap(n, a)` that takes: - `n` (an integer `1 ≤ n ≤ 200,000`) the number of stamps. - `a` (a list of `n` integers, each between `1` and `10^9`, inclusive) representing the initial positions of the stamps on the shelf. The function should return the minimal possible value of the maximum difference between the positions of any two consecutive stamps after an optimal rearrangement. # Input - One integer `n`. - An array `a` with `n` integers. # Output - A single integer representing the minimal possible value of the maximum gap between the positions of any two consecutive stamps. # Example ```python def minimize_max_gap(n, a): a.sort() min_max_gap = a[-1] - a[0] for i in range(1, n): min_max_gap = min(min_max_gap, abs(a[i] - a[i-1])) return min_max_gap # Sample Input: n = 5 a = [1, 6, 9, 4, 3] # Sample Output: minimal_max_gap = minimize_max_gap(n, a) # Returns 2 ``` # Explanation For the sample input, the optimal arrangement is `[1, 3, 4, 6, 9]`. The maximum difference between consecutive stamps in this arrangement is `2`, which is the minimal possible value. Note that while rearranging, we are attempting to minimize the maximal gap between stamps on the shelf.","solution":"def minimize_max_gap(n, a): if n == 1: return 0 a.sort() min_max_gap = float(\'inf\') for i in range(1, n): min_max_gap = min(min_max_gap, a[i] - a[i-1]) return min_max_gap"},{"question":"A city is planning to implement a new public transport system involving buses that travel along certain routes. Each route is represented as a sequence of bus stops numbered consecutively. Given that there are n bus stops and m bus routes, where each route is defined by its starting and ending bus stop, the goal is to determine the minimum number of routes needed to cover all bus stops from 1 through n. If it is impossible to cover all the bus stops using the given routes, return -1. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) – the number of bus stops and the number of routes, respectively. Each of the next m lines contains two integers ai and bi (1 ≤ ai ≤ bi ≤ n) – the starting and ending bus stops of the i-th route. Output a single integer – the minimum number of routes needed to cover all bus stops from 1 through n, or \\"-1\\" if it is impossible. Example: Input: 5 3 1 2 2 4 4 5 Output: 3 Explanation: The bus routes are as follows: 1-2 covers stops 1, 2. 2-4 covers stops 2, 3, 4. 4-5 covers stop 4, 5. Combining all routes, all the bus stops from 1 to 5 are covered. Therefore, the minimum number of routes needed is 3.","solution":"from itertools import combinations def min_routes_to_cover_all_stops(n, m, routes): Returns the minimum number of routes needed to cover all bus stops from 1 through n, or -1 if it is impossible. Parameters: n (int): The number of bus stops. m (int): The number of routes. routes (List[Tuple[int, int]]): The list of routes as tuples (start, end). def covers_all_stops(selected_routes): covered = set() for start, end in selected_routes: covered.update(range(start, end + 1)) return len(covered) == n for k in range(1, m + 1): for selected_routes in combinations(routes, k): if covers_all_stops(selected_routes): return k return -1"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight that is initially unknown. You are also given a target integer k. You need to determine the minimum sum of edge weights required so that the graph contains a cycle whose total weight is exactly k. If no such cycle exists, output -1. A cycle is a path in the graph which starts and ends at the same vertex and contains no repeated edges or vertices except for the starting/ending vertex. The first line contains two integers n and m (3 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of vertices and the number of edges in the graph, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v and 1 ≤ w ≤ 1000) which represent an edge between vertex u and vertex v with weight w. Output a single integer which is the sum of the weights of the edges in the minimum cycle that has a total cycle weight exactly equal to k, or -1 if there is no such cycle. # Example Input: ``` 5 6 1 2 3 2 3 4 3 4 5 4 5 6 5 2 7 1 4 2 20 ``` Output: ``` -1 ``` In the example, there is no cycle in the graph that sums to exactly 20. Therefore, the output is -1. If a cycle that meets the condition exists, the output would be the sum of its edge weights.","solution":"import heapq def min_cycle_sum(n, m, edges, k): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist minimum_cycle_sum = float(\'inf\') for u, v, w in edges: graph[u].remove((v, w)) graph[v].remove((u, w)) dist = dijkstra(u) if dist[v] < float(\'inf\') and dist[v] + w == k: minimum_cycle_sum = min(minimum_cycle_sum, dist[v] + w) graph[u].append((v, w)) graph[v].append((u, w)) return minimum_cycle_sum if minimum_cycle_sum != float(\'inf\') else -1 # Example usage # n = 5 # m = 6 # edges = [ # (1, 2, 3), # (2, 3, 4), # (3, 4, 5), # (4, 5, 6), # (5, 2, 7), # (1, 4, 2) # ] # k = 20 # print(min_cycle_sum(n, m, edges, k)) # Output: -1"},{"question":"Anna has a collection of n toys. Each toy has a fun value associated with it, represented by an integer. Anna wants to maximize her total fun value, but there\'s a restriction: she can choose toys to play with only if they form a consecutive sequence in the collection. She can choose any consecutive subsequence of toys (including just one toy or all the toys) as long as it maximizes her fun. Write a program to help Anna find the maximum total fun value from any consecutive sequence of toys. The first line contains an integer n (1 leq n leq 300,000) — the number of toys in the collection. The second line contains n space-separated integers f_1, f_2, ldots, f_n (-10^9 leq f_i leq 10^9) — the fun values of the toys. Output a single integer — the maximum total fun value from any consecutive sequence of toys. Example input: ``` 6 1 -2 3 5 -1 2 ``` Example output: ``` 9 ``` Explanation for the example: The consecutive subsequence with the maximum total fun value is `[3, 5, -1, 2]`, which sums to `9`.","solution":"def maximum_total_fun_value(n, fun_values): current_max = fun_values[0] global_max = fun_values[0] for i in range(1, n): current_max = max(fun_values[i], current_max + fun_values[i]) if current_max > global_max: global_max = current_max return global_max"},{"question":"Pineapple Soft Inc. is organizing a hackathon, and as part of organizing it, they need to process the registration details of participants. They want to sort the participants based on multiple criteria in a flexible manner. They want the sorting to be done first based on age in ascending order, then by name in lexicographical order (alphabetical order). If two participants have the same name and age, they should be sorted by their registration order (the order they appear in the list). Can you help with the sorting mechanism? The first line of input contains an integer n (1 le n le 10^5), which represents the number of participants. Each of the next n lines contains the details of a participant in the format: `name age`, where `name` is a string of lowercase English letters (up to 50 characters), and `age` is an integer (1 le age le 100). Your task is to output the sorted list of participants based on the above criteria. # Example Input: ``` 5 alice 30 bob 25 charlie 30 alice 22 dave 25 ``` Output: ``` alice 22 bob 25 dave 25 alice 30 charlie 30 ``` # Note: - In the example, Alice who is 22 years old is listed first because she has the lowest age. - Bob and Dave are both 25, and since terms of their names, `bob` comes lexicographically before `dave`. - Among participants of the same name and age, they are listed in the order they appeared in the input.","solution":"def sort_participants(participants): Sort participants based on age, name, and the order they appear. Args: participants (list of tuples): List of tuples where each tuple contains a participant\'s name (str) and age (int). Returns: sorted_list (list of tuples): Sorted list of participants based on the criteria. # Sorting by age, then by name, but keeping the original order for same name and age sorted_list = sorted(participants, key=lambda x: (x[1], x[0])) return sorted_list"},{"question":"Alice is participating in a competitive coding contest. Each time she solves a problem, she earns some points. If she successfully solves multiple problems in a row, her points get multiplied by a streak bonus. However, if she fails (i.e., doesn\'t solve a problem), her streak bonus is reset. You are given an integer array `points` of length `n` where each element represents the points Alice earns for solving a problem. A `1` in the array means Alice solves the corresponding problem, and a `0` means she fails. Each time Alice solves a problem, her current streak is incremented by 1, and the points earned for the problem are multiplied by the current streak. If she fails to solve a problem, the current streak is reset to 0. You need to determine the total points Alice can earn from solving the problems. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000), representing the length of the array. The second line contains `n` integers: `points[0], points[1], ..., points[n-1]` where each integer is either `1` (problem solved) or `0` (problem failed). Output a single integer, the total points Alice earns. **Example Input:** ``` 5 1 0 1 1 1 ``` **Example Output:** ``` 7 ``` **Explanation of example:** Alice\'s progress: - Solves first problem: streak = 1, total points = 1 * 1 = 1. - Fails second problem: streak reset to 0. - Solves third problem: streak = 1, total points + 1 * 1 = 2. - Solves fourth problem: streak = 2, total points + 1 * 2 = 4. - Solves fifth problem: streak = 3, total points + 1 * 3 = 7. Thus, the total points Alice earns is 7.","solution":"def total_points(n, points): Returns the total points Alice earns from solving the problems based on the streak rules provided. :param n: Number of problems :param points: List of points (1 for solved, 0 for failed) :return: Total points earned total_points = 0 current_streak = 0 for point in points: if point == 1: current_streak += 1 total_points += current_streak else: current_streak = 0 return total_points"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either \'.\' (an empty cell) or \'*\' (a star). Your task is to find the largest subgrid that satisfies the following conditions: 1. The subgrid must be square (its number of rows is equal to its number of columns). 2. The subgrid must contain only cells with \'*\' (it should be entirely filled with stars). If there are multiple subgrids with the same largest size, you can return any of them. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. The next n lines each contain m characters (either \'.\' or \'*\'), representing the grid. Print the size of the largest subgrid that contains only \'*\' characters. If no such subgrid exists, print 0. # Example: Input: ``` 4 5 ..... .***. .***. ..*.. ``` Output: ``` 2 ``` In the example, the largest subgrid that is fully filled with \'*\' has a size of 2.","solution":"def max_square_subgrid(n, m, grid): dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'*\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Given an undirected graph with `n` nodes and `m` edges, your task is to find the shortest path from a starting node `s` to all other nodes using the Breadth-First Search (BFS) algorithm. # Input: - The first line contains two integers `n` and `m` (`1 <= n <= 1000, 0 <= m <= 5000`), the number of nodes and edges respectively. - The second line contains an integer `s` (`1 <= s <= n`), the starting node. - The next `m` lines each contain two integers `u` and `v` (`1 <= u, v <= n`), denoting an undirected edge between node `u` and node `v`. # Output: Print `n` integers where the `i-th` integer represents the shortest distance from the starting node `s` to node `i`. If a node is not reachable from `s`, print `-1` for that node. The distance from the starting node to itself should be `0`. # Example: Input: ``` 6 7 1 1 2 1 3 2 4 2 5 3 5 3 6 5 6 ``` Output: ``` 0 1 1 2 2 2 ``` # Explanation: - The distance from node 1 to itself is `0`. - The distances from node 1 to nodes `2` and `3` are `1`. - The distances from node 1 to nodes `4`, `5`, and `6` are `2` because there are two edges to traverse to reach these nodes from the starting node `1`. Make sure your program handles the input efficiently and accurately computes the shortest paths using BFS.","solution":"from collections import deque, defaultdict def shortest_path_bfs(n, m, s, edges): Finds the shortest path from the starting node `s` to all other nodes using BFS. :param n: Number of nodes :param m: Number of edges :param s: Starting node :param edges: List of edges, where each edge is represented by a tuple (u, v) :return: List of shortest distances from the starting node `s` to each node adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) distances = [-1] * (n + 1) distances[s] = 0 queue = deque([s]) while queue: current = queue.popleft() for neighbor in adj_list[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances[1:] Example usage: # n = 6, m = 7, s = 1, edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 5), (3, 6), (5, 6)] # The expected output is [0, 1, 1, 2, 2, 2] print(shortest_path_bfs(6, 7, 1, [(1, 2), (1, 3), (2, 4), (2, 5), (3, 5), (3, 6), (5, 6)]))"},{"question":"You have been given a binary string consisting of \'0\'s and \'1\'s. Your task is to determine the minimum number of changes needed to be made to the string such that no two consecutive characters are the same. A change involves flipping a \'0\' to \'1\' or a \'1\' to \'0\'. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the length of the binary string. The second line contains a binary string of length n containing only the characters \'0\' and \'1\'. Output a single integer, the minimum number of changes needed to ensure no two consecutive characters in the string are the same. # Example Input: ``` 6 010101 ``` Output: ``` 0 ``` Input: ``` 6 000000 ``` Output: ``` 3 ``` Explanation In the first example, the string \\"010101\\" already satisfies the condition of no two consecutive characters being the same, so no changes are required. In the second example, changing positions 2, 4, and 6 (0-based index) of the string \\"000000\\" to \'1\' results in the string \\"010101\\", requiring 3 changes.","solution":"def min_changes_to_alternate_binary_string(s): Determines the minimum number of changes needed to be made to the binary string such that no two consecutive characters are the same. Args: s (str): A binary string containing only \'0\'s and \'1\'s. Returns: int: The minimum number of changes needed. changes1 = 0 # Changes required if we start with \'0\' changes2 = 0 # Changes required if we start with \'1\' for i, c in enumerate(s): if i % 2 == 0: # At even index, the expected character is \'0\' if c != \'0\': changes1 += 1 # At even index, the expected character is \'1\' if c != \'1\': changes2 += 1 else: # At odd index, the expected character is \'1\' if c != \'1\': changes1 += 1 # At odd index, the expected character is \'0\' if c != \'0\': changes2 += 1 return min(changes1, changes2)"},{"question":"Tim\'s toy train has a track consisting of multiple connected segments, forming a loop. Each segment is labeled with a letter from \'A\' to \'Z\'. Tim likes to watch the toy train pass through these segments and often wonders if the sequence of segments it passes through can form a specific word, even if the word is broken between the end and the beginning of the loop. Write a program to help Tim determine if the toy train can form a given word by passing through the segments in either direction. # Input - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of segments in the track. - The second line contains a string of length n, where each character in the string is a letter from \'A\' to \'Z\' representing the segments. - The third line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. - Each of the next q lines contains a single word w (1 ≤ |w| ≤ min(n, 100)) — the word Tim is interested in. # Output For each query, output \\"YES\\" if Tim can observe the word w in the sequence of segments (in either direction, considering the loop), and \\"NO\\" otherwise. # Example Input ``` 8 ABCDABCD 3 ABCD DABC CADB ``` Output ``` YES YES NO ``` # Explanation - For the first query, the string \\"ABCD\\" can be observed starting from the first segment. - For the second query, the string \\"DABC\\" can be observed in the reverse direction starting from the last segment. - For the third query, there\'s no way to form the string \\"CADB\\" either in the forward direction or the reverse direction considering the loop. # Notes Tim watches the train in such a way that the sequence he sees may start at any segment, and because the track is a loop, the train passes from the last segment back to the first one seamlessly.","solution":"def can_form_word_in_track(n, segments, q, queries): results = [] track = segments + segments # Concatenate the string with itself to handle looping reversed_track = segments[::-1] + segments[::-1] for word in queries: if word in track or word in reversed_track: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of characters \'0\' and \'1\'. Your task is to find the length of the longest alternating subsequence of the given string. An alternating subsequence is a subsequence where no two adjacent characters are the same. A subsequence is a sequence derived by deleting some or no elements of the string without changing the order of the remaining elements. Input: - A single line containing a string consisting of \'0\' and \'1\'. The length of the string is at most 100. Output: - A single integer — the length of the longest alternating subsequence of the given string. Example: Input: ``` 101010 ``` Output: ``` 6 ``` Explanation: The entire string \\"101010\\" is already an alternating subsequence, so the answer is 6. Another Example: Input: ``` 1111000 ``` Output: ``` 2 ``` Explanation: The longest alternating subsequence can be \\"10\\" or \\"01\\", both of which have a length of 2.","solution":"def longest_alternating_subsequence(s): Returns the length of the longest alternating subsequence of the given binary string. if not s: return 0 count = 1 # Start with the first character for i in range(1, len(s)): if s[i] != s[i - 1]: count += 1 return count"},{"question":"You are given an array of integers and need to perform a sequence of operations on it. The operations could be one of the following three types: 1. Increase the value of each element in a subrange by a given value. 2. Multiply the value of each element in a subrange by a given value. 3. Assign a specific value to each element in a subrange. After each operation is performed, return the modified array. Your task is to write a program to efficiently handle these operations. # Input Format The first line contains an integer `n` (1 ≤ n ≤ 100,000), which indicates the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array. The third line contains an integer `q` (1 ≤ q ≤ 100,000), which indicates the number of queries. The next `q` lines each describe a query of one of three types described below: - For the first type, the format is `1 l r v`, which means increase each array element from index `l` to `r` by `v`. - For the second type, the format is `2 l r v`, which means multiply each array element from index `l` to `r` by `v`. - For the third type, the format is `3 l r v`, which means assign the value `v` to each array element from index `l` to `r`. # Output Format After each query, print the array\'s elements separated by a space. # Example Input ``` 5 1 2 3 4 5 3 1 1 3 10 2 2 4 2 3 1 5 1 ``` Output ``` 1 2 3 4 5 11 12 13 4 5 11 24 26 8 5 1 1 1 1 1 ``` # Explanation 1. After the first query `1 1 3 10`, the array becomes `[11, 12, 13, 4, 5]`. 2. After the second query `2 2 4 2`, the array becomes `[11, 24, 26, 8, 5]`. 3. After the third query `3 1 5 1`, the array becomes `[1, 1, 1, 1, 1]`.","solution":"def perform_operations(n, array, queries): result = [] for query in queries: op_type, l, r, v = query l -= 1 r -= 1 if op_type == 1: for i in range(l, r + 1): array[i] += v elif op_type == 2: for i in range(l, r + 1): array[i] *= v elif op_type == 3: for i in range(l, r + 1): array[i] = v result.append(list(array)) return result"},{"question":"You are given a field of M rows and N columns. Each cell in the field contains either a blank space or an obstacle (#). The objective is to determine if there is a valid path from the top-left corner (0,0) to the bottom-right corner (M-1,N-1). You can only move up, down, left, or right from a cell and can\'t move diagonally. You cannot go through cells that contain obstacles. Write a program to determine if a valid path exists. Input: The first line contains two integers M and N (1 ≤ M, N ≤ 1000) — the number of rows and columns respectively. Each of the next M lines contains a string of length N representing the field, where \'.\' denotes a blank cell and \'#\' denotes an obstacle. Output: Output \\"YES\\" if there is a valid path from the top-left corner to the bottom-right corner, otherwise output \\"NO\\". Examples: Input: 4 4 .... .#.. ..#. .... Output: YES Input: 3 3 .#. # .#. Output: NO","solution":"def is_valid_path(M, N, field): from collections import deque if field[0][0] == \'#\' or field[M-1][N-1] == \'#\': return \\"NO\\" directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0)]) visited = [[False for _ in range(N)] for _ in range(M)] visited[0][0] = True while queue: x, y = queue.popleft() if (x, y) == (M-1, N-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and field[nx][ny] == \'.\': queue.append((nx, ny)) visited[nx][ny] = True return \\"NO\\" # Example usages if __name__ == \\"__main__\\": M, N = 4, 4 field = [ \\"....\\", \\".#..\\", \\"..#.\\", \\"....\\" ] print(is_valid_path(M, N, field)) # Output: YES M, N = 3, 3 field = [ \\".#.\\", \\"#\\", \\".#.\\" ] print(is_valid_path(M, N, field)) # Output: NO"},{"question":"Sara has a collection of n different types of bracelets, each with a specific weight and value. She wants to choose a subset of these bracelets to carry on a trip, but her backpack can only hold a maximum weight of W units. Help Sara maximize the total value of the bracelets she can carry without exceeding the weight limit of her backpack. You are to solve this problem using a dynamic programming approach. The first line of input contains two integers, n (1 ≤ n ≤ 100) and W (1 ≤ W ≤ 1000) — the number of bracelets and the maximum weight of the backpack. Each of the next n lines contains two integers wi and vi (1 ≤ wi ≤ 100, 1 ≤ vi ≤ 1000), which are the weight and value of the i-th bracelet, respectively. Output a single integer, the maximum total value of the bracelets that Sara can carry.","solution":"def max_bracelet_value(n, W, bracelets): # Create a dp array initialized with 0\'s dp = [0] * (W + 1) # Loop over each bracelet for weight, value in bracelets: # Loop backwards from W to weight to prevent overwriting for w in range(W, weight - 1, -1): # Update the dp array to maintain maximum value at each capacity dp[w] = max(dp[w], dp[w - weight] + value) # The maximum value possible with the given weight W return dp[W]"},{"question":"You are given a number of events and a timeline represented by a single integer n. Each event has a start time and an end time, and all events are within the period from 0 to n. You need to determine the maximum number of non-overlapping events that can be attended. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of: - The first line contains one integer n (1 ≤ n ≤ 10^9) — the length of the timeline. - The second line contains an integer m (1 ≤ m ≤ 5000) — the number of events. - Each of the next m lines contains two integers si and ei (0 ≤ si < ei ≤ n) — the start and end times of the i-th event. For each test case, print one number — the maximum number of non-overlapping events that can be attended. Example: Input: ``` 1 10 3 1 4 2 5 6 8 ``` Output: ``` 2 ``` Explanation: In the provided example, there is a timeline of length 10 and 3 events: - Event 1: Starts at 1 and ends at 4 - Event 2: Starts at 2 and ends at 5 - Event 3: Starts at 6 and ends at 8 The maximum number of non-overlapping events that can be attended is 2. One possible way to attend events without overlap is attending Event 1 (1 to 4) and Event 3 (6 to 8).","solution":"def max_non_overlapping_events(t, test_cases): results = [] for case in test_cases: n, m, events = case events.sort(key=lambda x: x[1]) # Sort by end time max_events = 0 last_end_time = -1 for event in events: if event[0] >= last_end_time: max_events += 1 last_end_time = event[1] results.append(max_events) return results"},{"question":"You are given a list of integers, each of which represents the number of minutes it takes to complete a task. There is also a constant `k` which represents the maximum number of minutes that can be spent consecutively working on tasks before taking a break. Your goal is to determine the minimum number of breaks needed to complete all tasks. A break must be taken if the sum of the consecutive task times exceeds `k` minutes. Task times are added sequentially from the beginning of the list to the end. The input consists of two lines. The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ 10^6), where `n` is the number of tasks and `k` is the maximum number of minutes that can be spent consecutively on tasks. The second line contains `n` space-separated integers, each representing the number of minutes a task takes. Output a single integer, which is the minimum number of breaks needed. # Examples Example 1 Input: ``` 5 10 2 3 5 8 2 ``` Output: ``` 1 ``` Explanation: You can work on the first three tasks (2, 3, 5) without taking a break as their sum is 10. Then, you need a break before starting the fourth task (8), followed by the fifth task (2). Example 2 Input: ``` 3 5 1 4 3 ``` Output: ``` 1 ``` Explanation: You can work on the first two tasks (1, 4) without taking a break as their sum is 5. Then, you need a break before starting the third task (3). # Note: - It is guaranteed that the input values are such that the problem constraints can be satisfied.","solution":"def minimum_breaks(n, k, task_times): breaks = 0 current_sum = 0 for time in task_times: if current_sum + time > k: breaks += 1 current_sum = time else: current_sum += time return breaks"},{"question":"You are given a list of programming contest problems and their difficulty levels. Each problem has a unique identifier, a difficulty rating, and a list of tags that describe the topics it covers (e.g., \\"dp\\", \\"graphs\\", \\"math\\"). Your task is to generate a balanced contest set, consisting of 5 problems, with the following conditions: 1. The total difficulty of the contest is minimized. 2. At least one problem should have a difficulty level in each of the ranges [1, 3], [4, 6], [7, 9], and [10, 12]. 3. Each problem should have unique tags; no two problems in the contest should share any tag. 4. The contest should have exactly 5 problems. The first line of the input contains an integer `n` (5 ≤ n ≤ 100), the number of problems available. Each of the next `n` lines describes a problem with three components: an identifier, a difficulty level (an integer from 1 to 12), and a list of tags (strings without spaces). Tags are separated by commas, and there may be up to 3 tags for any problem. Output the identifiers of the 5 problems that form the optimal contest set, in any order, with each identifier on a new line. If there are multiple valid sets with the same total difficulty, you can output any of them. If it\'s impossible to form such a contest, print \\"IMPOSSIBLE\\". Example Input: ``` 6 p1 4 dp,graphs p2 6 math,geometry p3 7 strings p4 2 sorting,search p5 10 bitmasks p6 11 trees,graphs ``` Example Output: ``` p1 p2 p3 p4 p5 ``` Explanation: The chosen problems form a valid contest set with total difficulty 29. Each problem has unique tags, and there is at least one problem in each of the specified difficulty ranges.","solution":"from itertools import combinations def can_select_problems(problems): difficulties = [(1,3), (4,6), (7,9), (10,12)] for comb in combinations(problems, 5): if all(any(low <= prob[\'difficulty\'] <= high for prob in comb) for (low, high) in difficulties): tags = set() for prob in comb: for tag in prob[\'tags\']: if tag in tags: break tags.add(tag) else: continue break else: return comb return None def find_optimal_contest(problems): optimal_comb = None min_difficulty = float(\'inf\') for comb in combinations(problems, 5): total_difficulty = sum(prob[\'difficulty\'] for prob in comb) if total_difficulty < min_difficulty and can_select_problems(comb): min_difficulty = total_difficulty optimal_comb = comb if optimal_comb: return [prob[\'identifier\'] for prob in optimal_comb] return \\"IMPOSSIBLE\\" def process_input(input_str): problem_lines = input_str.strip().split(\'n\') n = int(problem_lines[0].strip()) problems = [] for problem_line in problem_lines[1:]: parts = problem_line.split() identifier = parts[0] difficulty = int(parts[1]) tags = parts[2].split(\',\') problems.append({\'identifier\': identifier, \'difficulty\': difficulty, \'tags\': tags}) return problems def generate_contest(input_str): problems = process_input(input_str) return find_optimal_contest(problems)"},{"question":"David inherited an ancient family recipe book used by generations of skilled chefs in his family. Each recipe specifies a strict order of stages, and in every stage, a unique ingredient is added to the dish. David wants to optimize the book for a cooking contest, aiming to minimize the total cooking time without compromising the original order of ingredients for each recipe. Each recipe specifies `n` stages, each with a specific cooking time `ti`. David can add one special ingredient once in any stage within the recipe that can potentially reduce the cooking time by half for that particular stage. After applying the special ingredient, the time required for that stage becomes `⌊ti / 2⌋`. Given `m` recipes, each recipe consisting of `n` stages with respective cooking times, you need to compute the minimum cooking time for each recipe if David applies the special ingredient optimally to one of the stages. # Input - The first line contains one integer `m` (1 ≤ `m` ≤ 50) — the number of recipes. - The second line contains one integer `n` (1 ≤ `n` ≤ 100,000) — the number of stages in each recipe. - Then follow `m` lines, each containing `n` integers `t1, t2, ..., tn` (1 ≤ `ti` ≤ 1,000) — the cooking times for each stage in the i-th recipe. # Output - Output `m` lines, each containing one integer — the minimum possible total cooking time for each recipe if David applies the special ingredient optimally. # Example Input ``` 2 3 10 7 3 8 6 4 ``` Output ``` 18 14 ``` # Explanation In the first recipe, applying the special ingredient to the stage with time 10, the total cooking time is `⌊10 / 2⌋ + 7 + 3 = 5 + 7 + 3 = 15`. In the second recipe, applying the special ingredient to the stage with time 8, the total cooking time is `⌊8 / 2⌋ + 6 + 4 = 4 + 6 + 4 = 14`. By iterating through each stage and calculating potential total cooking times for each application of the special ingredient, you obtain the optimal minimum cooking time for each recipe.","solution":"def minimum_cooking_times(m, n, recipes): results = [] for recipe in recipes: total_time = sum(recipe) min_time = float(\\"inf\\") for i in range(n): reduced_stage_time = total_time - recipe[i] + (recipe[i] // 2) if reduced_stage_time < min_time: min_time = reduced_stage_time results.append(min_time) return results"},{"question":"Alice loves painting, and she particularly enjoys working with color gradients. Alice\'s latest task is to create a gradient transition between two given colors in as few steps as possible. Each color is represented by its RGB (Red, Green, Blue) components, which are integers in the range of 0 to 255. Alice can perform two types of operations: 1. Increase any of the RGB components by 1. 2. Decrease any of the RGB components by 1. Given the RGB components of the starting color, and the RGB components of the target color, determine the minimum number of operations Alice needs to turn the starting color into the target color. The first line of the input contains three integers `r1`, `g1`, `b1` (0 ≤ r1, g1, b1 ≤ 255) — the RGB components of the starting color. The second line contains three integers `r2`, `g2`, `b2` (0 ≤ r2, g2, b2 ≤ 255) — the RGB components of the target color. Output the minimum number of operations required to transform the starting color into the target color. **Example:** ``` Input: 45 100 200 60 80 250 Output: 45 Explanation: To transform the starting color (45, 100, 200) to the target color (60, 80, 250), Alice performs the following optimal operations: - Increase the Red component by 15: 45 -> 60 (15 operations) - Decrease the Green component by 20: 100 -> 80 (20 operations) - Increase the Blue component by 50: 200 -> 250 (50 operations) Total operations = 15 + 20 + 50 = 85 ```","solution":"def min_color_transform_operations(r1, g1, b1, r2, g2, b2): Calculates the minimum number of operations required to transform the starting color (r1, g1, b1) to the target color (r2, g2, b2) red_operations = abs(r1 - r2) green_operations = abs(g1 - g2) blue_operations = abs(b1 - b2) return red_operations + green_operations + blue_operations"},{"question":"You are given a rectangular garden of size N times M. In this garden, there are some trees, each occupying a single cell. A dog starts at the upper-left corner of the garden (coordinate (0, 0)) and moves either right or down in each step to reach the bottom-right corner (coordinate (N-1, M-1)). The dog cannot pass through the cells occupied by trees. Your task is to determine the number of distinct paths the dog can take to get from the upper-left corner to the bottom-right corner without passing through a cell with a tree. The first line of input contains two integers N and M (1 leq N, M leq 100) — the dimensions of the garden. The next N lines each contain M characters, representing the garden grid. Each character is either \'.\' (an empty cell) or \'T\' (a cell with a tree). Output a single integer — the number of distinct paths the dog can take. Example: Input: ``` 3 3 ... .T. ... ``` Output: ``` 2 ``` In this example, the dog has two distinct paths: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right","solution":"def num_paths_through_garden(N, M, garden): # Function to compute the number of distinct paths from (0,0) to (N-1,M-1) if garden[0][0] == \'T\' or garden[N-1][M-1] == \'T\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if i == 0 and j == 0: continue if garden[i][j] == \'T\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[N - 1][M - 1] # Example input N = 3 M = 3 garden = [ \\"...\\", \\".T.\\", \\"...\\" ] print(num_paths_through_garden(N, M, garden))"},{"question":"A group of scientists is studying a peculiar species of plant that grows only during certain intervals. Each plant grows for exactly one continuous interval but the intervals can overlap among different plants. However, the scientists need to choose a subset in which no plants overlap. Given the start and end times of n plants, your task is to determine the maximum number of non-overlapping plants that can be selected. The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of plants. Each of the next n lines contains two integers si and ei (1 ≤ si < ei ≤ 10000), the start and end times of the i-th plant\'s growth interval. Output one integer, the maximum number of non-overlapping plants that can be selected. Example: Input: 5 1 3 2 5 3 9 6 8 6 10 Output: 2 Explanation: The maximum subset of non-overlapping intervals are: (1, 3) and (6, 8). Another possible subset could be (2, 5) and (6, 8).","solution":"def max_non_overlapping_plants(n, intervals): This function returns the maximum number of non-overlapping intervals. # Sort intervals based on the end time sorted_intervals = sorted(intervals, key=lambda x: x[1]) # Initialize the count of non-overlapping intervals count = 0 end_time = 0 for interval in sorted_intervals: if interval[0] > end_time: count += 1 end_time = interval[1] return count"},{"question":"You are given a binary string of length n. In one operation, you can choose any two consecutive characters of the string and swap them. Your goal is to make all the characters of the string the same, either all \'0\'s or all \'1\'s, in minimum number of operations. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 2 cdot 10^5) — the length of the binary string. The second line of each test case contains a binary string of length n consisting of \'0\'s and \'1\'s. Print the minimum number of operations needed for each test case in a new line. Example: Input: ``` 2 5 11001 4 1110 ``` Output: ``` 2 1 ``` Explanation: In the first test case, we can make the string \\"11001\\" into \\"11111\\" in two operations. - Swap 0 with 1 in indices 3 and 4: \\"11101\\" - Swap 0 with 1 in indices 4 and 5: \\"11111\\" In the second test case, we can make the string \\"1110\\" into \\"1111\\" in one operation. - Swap 0 with 1 in indices 3 and 4: \\"1111\\"","solution":"def min_operations_to_uniform(n, binary_str): # Count number of \'0\'s and \'1\'s in the string count_0 = binary_str.count(\'0\') count_1 = binary_str.count(\'1\') # The minimum operations required would be the count of the lesser character # Hence, we need min(count_0, count_1) operations to make the string uniform return min(count_0, count_1) def process_cases(t, cases): results = [] for i in range(t): n, binary_str = cases[i] results.append(min_operations_to_uniform(n, binary_str)) return results"},{"question":"Alice and Bob are playing a game on a string. The string consists of lowercase letters and has a length of n. Alice and Bob take turns to delete a character from either end of the string. Alice always goes first. The player who cannot make a move loses the game. To make the game fair, they both decide to use the optimal strategy. They want to know, before starting the game, who will win given that both play optimally. The first line of input contains the integer n (1 ≤ n ≤ 1000) — the length of the string. The second line of input contains the string s of length n, consisting of lowercase letters. Print \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win the game, assuming both play optimally. # Example Input: ``` 4 abca ``` Output: ``` Bob ``` Input: ``` 3 xyz ``` Output: ``` Alice ```","solution":"def determine_winner(n, s): Determines the winner of the game. Parameters: n (int): The length of the string. s (str): The string containing lowercase letters. Returns: str: \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win the game. # If the length of the string is odd, Alice will have one more turn than Bob. if n % 2 != 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A rising star athlete downloaded an app that records her training and competition results over the year. For each of her training sessions or competitions, the app records the date (in `YYYY-MM-DD` format) and her performance, quantified as an integer representing points scored. The athlete wants to analyze her progress by querying her performance within specific date ranges. You are given data for `n` sessions/competitions, and `m` queries to find the total points scored within given date ranges. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) – the number of sessions/competitions. - The following `n` lines each contain a date (`YYYY-MM-DD`) and an integer (`p`) (1 ≤ p ≤ 100,000) – representing the points scored on that date. - The next line contains an integer `m` (1 ≤ m ≤ 100,000) – the number of queries. - The following `m` lines each contain two dates `start_date` and `end_date` (`YYYY-MM-DD`) - the inclusive range within which to sum the points. Output: - For each query, print the sum of the points scored in the given date range. Example: ``` Input: 5 2023-01-01 10 2023-01-05 20 2023-02-01 15 2023-02-10 10 2023-02-15 5 3 2023-01-01 2023-01-31 2023-02-01 2023-02-28 2023-01-01 2023-02-28 Output: 30 30 60 ``` Notes: - Dates are given in the `YYYY-MM-DD` format. - If a date from a query is not present in the input, it should be interpreted as zero points for that day.","solution":"def parse_input(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) performance_data = {} for i in range(1, n + 1): date, points = lines[i].split() performance_data[date] = int(points) m = int(lines[n + 1]) queries = [] for i in range(n + 2, n + 2 + m): start_date, end_date = lines[i].split() queries.append((start_date, end_date)) return performance_data, queries def calculate_points(performance_data, queries): results = [] for start_date, end_date in queries: total_points = 0 for date in performance_data: if start_date <= date <= end_date: total_points += performance_data[date] results.append(total_points) return results def analyze_performance(input_string): performance_data, queries = parse_input(input_string) results = calculate_points(performance_data, queries) return results"},{"question":"Tom and Jerry are playing a new game with a grid of size `n x n` filled with integers. The game starts with both of them choosing a position in the grid. Tom starts by choosing any cell `(i, j)` in the grid, and then Jerry chooses any other cell `(x, y)` such that `(x, y) != (i, j)`. The rules of the game are as follows: 1. They will alternately pick one of the 8 possible directions (horizontally, vertically, or diagonally) and move in that direction. 2. On each move, Tom or Jerry can only move by one cell in the chosen direction. 3. Tom wants to maximize the absolute difference between the values in their new positions after each move. 4. Jerry wants to minimize the same absolute difference. 5. The game ends when Tom and Jerry can no longer move to different cells. You are required to determine the optimal starting positions for Tom and Jerry that will maximize Tom\'s advantage (i.e., the maximum absolute difference between their initial positions). The first line contains an integer `n` (2 ≤ n ≤ 50) — the size of the grid. The next `n` lines each contain `n` space-separated integers representing the values in the grid (−10^9 ≤ grid[i][j] ≤ 10^9). Output the coordinates of the starting positions of Tom and Jerry such that the absolute difference between the values in their initial positions is maximized. If there are multiple such pairs, output any one of them. Example: Input: 3 1 2 3 4 5 6 7 8 9 Output: (0, 0) (2, 2) Explanation: One optimal strategy is for Tom to choose position (0, 0) with value 1, and Jerry to choose position (2, 2) with value 9. The absolute difference is `|1 - 9| = 8`, which is the maximum.","solution":"def find_optimal_start_positions(grid): n = len(grid) max_diff = 0 optimal_positions = ((0, 0), (0, 0)) for i in range(n): for j in range(n): for x in range(n): for y in range(n): if (i, j) != (x, y): current_diff = abs(grid[i][j] - grid[x][y]) if current_diff > max_diff: max_diff = current_diff optimal_positions = ((i, j), (x, y)) return optimal_positions"},{"question":"You are given a rectangular grid of spaceships of size n times m. Each cell in the grid contains either \'S\' (indicating a spaceship) or \'.\' (indicating empty space). You can perform a \\"laser\\" operation to clear a row or a column of all spaceships by targeting it with a laser. Each laser can clear either one entire row or one entire column of the grid, removing all spaceships (\'S\') in the targeted row or column. Your goal is to determine the minimum number of laser operations required to clear the grid of all spaceships. The first line contains two integers n and m (1 le n, m le 500) — the number of rows and columns in the grid. Each of the next n lines contains a string of m characters \'S\' or \'.\'. Output the minimum number of laser operations needed to clear the entire grid of spaceships. # Example Input ``` 4 5 .S... ...S. S.S.. ..S.. ``` Output ``` 4 ``` Explanation One possible solution is to target rows 1, 2, and 3, and then column 4. This will clear all \'S\' from the grid in 4 operations.","solution":"def min_laser_operations(n, m, grid): Given a grid of \'S\' and \'.\', returns the minimum number of operations required to clear all \'S\' from the grid. Parameters: n (int): the number of rows in the grid. m (int): the number of columns in the grid. grid (list of str): the rectangular grid of spaceships. Returns: int: the minimum number of laser operations. row_spaceships = [0] * n col_spaceships = [0] * m # Calculate the number of spaceships in each row and each column for i in range(n): for j in range(m): if grid[i][j] == \'S\': row_spaceships[i] += 1 col_spaceships[j] += 1 # Number of non-empty rows and columns rows_needed = sum(1 for r in row_spaceships if r > 0) cols_needed = sum(1 for c in col_spaceships if c > 0) # We need at least max(rows_needed, cols_needed) operations return max(rows_needed, cols_needed)"},{"question":"In a distant binary realm, there exists a unique language where each word is expressed as a series of bits. The inhabitants of this realm have a peculiar way of compressing their messages. Instead of regular compression algorithms, they merge words by performing a bitwise OR operation between the corresponding bits of each word. You are given a sequence of binary words, each word is of the same length. Your task is to iteratively merge these binary words from left to right using the bitwise OR operation and find the final compressed binary word. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of binary words. The second line contains n binary words, separated by a single space. Each word is of a non-empty, fixed length and consists of \'0\'s and \'1\'s. The total length of all binary words combined does not exceed 10^6. Output the resulting compressed binary word after applying the bitwise OR operation sequentially from left to right on all the words. For example: Input: 3 1010 1101 0011 Output: 1111 Explanation: - Merge \\"1010\\" and \\"1101\\" to get \\"1111\\". - Merge \\"1111\\" with \\"0011\\" to get \\"1111\\". - The final compressed binary word is \\"1111\\".","solution":"def compress_binary_words(n, words): Applies bitwise OR operation sequentially to the list of binary words. # Initialize the result with the first word result = list(words[0]) # Iterate over the remaining words and apply bitwise OR for word in words[1:]: for i in range(len(word)): result[i] = str(int(result[i]) | int(word[i])) # Join the result list back to a string return \'\'.join(result) # Example use n = 3 words = [\\"1010\\", \\"1101\\", \\"0011\\"] print(compress_binary_words(n, words)) # Output: 1111"},{"question":"You borrowed a magic book from the local library that allows you to control the weather. With this power, you can add or remove amounts of rainfall to reach an optimal distribution over a period of N days. However, the sum of rain added or removed must equal zero. Each day has a target amount of rainfall and a current amount of rainfall. Your goal is to determine the minimum number of operations (either adding or removing rainfall) needed to make the amount of rainfall match the target exactly for each day. An operation is defined as changing the current rainfall amount for a single day by exactly 1 unit. The first line of input contains an integer N (1 ≤ N ≤ 105), the number of days. The second line contains N integers t1, t2, ..., tN (0 ≤ ti ≤ 1000), where ti is the target rainfall amount for the i-th day. The third line contains N integers c1, c2, ..., cN (0 ≤ ci ≤ 1000), where ci is the current rainfall amount for the i-th day. Print one integer - the minimum number of operations needed to achieve the target rainfall distribution. For example, consider the following input: ``` 4 3 2 1 4 1 2 3 2 ``` The target amounts of rainfall are [3, 2, 1, 4], and the current amounts are [1, 2, 3, 2]. One way to reach the target is: - Increase the first day\'s rainfall by 2 (2 operations). - No change needed for the second day (0 operations). - Decrease the third day\'s rainfall by 2 (2 operations). - Increase the fourth day\'s rainfall by 2 (2 operations). Thus, the minimum number of operations needed is 2 + 0 + 2 + 2 = 6. Output: ``` 6 ```","solution":"def min_operations_to_match_rainfall(N, targets, currents): Calculate the minimum number of operations to make the current rainfall matches the target rainfall for each day. :param N: int - number of days :param targets: list of int - target rainfall amounts :param currents: list of int - current rainfall amounts :return: int - minimum number of operations to achieve the target distribution operations = 0 for target, current in zip(targets, currents): operations += abs(target - current) return operations"},{"question":"You are given an array of n integers and a number m. Your task is to determine whether there exists a subarray of the given array such that the sum of its elements is equal to m. If such a subarray exists, print the 1-based starting and ending indices of one such subarray. If there are multiple subarrays that satisfy this condition, print the indices of any one of them. If no such subarray exists, print -1. A subarray is defined as a contiguous segment of an array. The first line contains two integers n and m (1 ≤ n ≤ 100000, -10^9 ≤ m ≤ 10^9) — the number of elements in the array and the desired sum of the subarray. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print two integers separated by space — the 1-based starting and ending indices of the subarray which sums up to m. If no such subarray exists, print -1. Example: Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 1 5 In this example, the subarray from index 1 to 5 (1-based), i.e., [1, 2, 3, 4, 5] sums up to 15.","solution":"def find_subarray_with_sum(arr, n, m): This function finds a subarray in `arr` of length `n` that sums up to `m`. If such a subarray exists, it returns a tuple with the 1-based starting and ending indices. Otherwise, it returns -1. current_sum = 0 start = 0 sum_map = {} for end in range(n): current_sum += arr[end] if current_sum == m: return (start + 1, end + 1) if (current_sum - m) in sum_map: start_idx = sum_map[current_sum - m] return (start_idx + 2, end + 1) sum_map[current_sum] = end return -1"},{"question":"Emily loves reading books, and her favorite activity is organizing her bookshelf. Her bookshelf has n compartments, numbered from 1 to n, and the capacity of each compartment may differ. She constantly buys new books and tries to place them on her bookshelf in such a way that she maximizes the number of compartments that are completely filled. Emily needs help to determine the maximum number of fully filled compartments after each new book is placed on the shelf. You\'re tasked with writing a program to help Emily track this. You are given an integer array `a` of size `n`, where `a[i]` represents the capacity of the ith compartment (1-based index). Initially, each compartment is empty. You are also given `m` queries, each containing a single integer `b`, where `b` represents the number of books Emily places in the next empty compartment (she always places new books in the first available compartment that can accommodate them exactly). Write a program to determine the total number of fully filled compartments after each query. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 105, 1 ≤ m ≤ 105), representing the number of compartments and the number of queries. - The second line contains `n` integers `a[1], a[2], ..., a[n]` (1 ≤ a[i] ≤ 109), representing the capacities of the compartments. - The next `m` lines each contain a single integer `b` (1 ≤ b ≤ 109), representing the number of books placed in the next empty compartment that can accommodate exactly `b` books. # Output - Print `m` lines. The ith line should contain the number of fully filled compartments after the ith query. # Example Input ``` 5 4 4 3 1 5 2 1 2 4 2 ``` Output ``` 1 2 2 3 ``` # Explanation 1. After placing 1 book, the third compartment (which has a capacity of 1) is fully filled. 2. After placing 2 books, the fifth compartment (which has a capacity of 2) is fully filled. 3. After placing 4 books, the first compartment (which has a capacity of 4) is fully filled. 4. After placing 2 books, no new compartments are fully filled, but we already have 3 fully filled compartments.","solution":"def max_filled_compartments(n, m, capacities, queries): filled_compartments = [0] * n result = [] full_count = 0 for books in queries: for i in range(n): if filled_compartments[i] == 0 and capacities[i] == books: filled_compartments[i] = 1 full_count += 1 break result.append(full_count) return result"},{"question":"An eco-friendly packaging company wants to determine if certain shipment boxes can be safely delivered using drones. Each shipment box has specific height, width, and length dimensions, and each drone has a maximum carrying capacity in terms of weight and volume. To ensure safe delivery, both the weight and the total volume of all boxes carried by a single drone must not exceed respectively. The input consists of: - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) - the number of shipment boxes and the number of available drones respectively. - The next n lines each contains an integer and three floats wi, hi, bi, li (1 ≤ wi ≤ 1000, 1 ≤ hi, bi, li ≤ 100) - the weight and height, width, length of the i-th shipment box. - The next k lines each contain two integers MaxCarryWi MaxCarryVi (1 ≤ MaxCarryWi, MaxCarryVi ≤ 10,000) - the maximum weight and volume carrying capacity of the i-th drone. Determine whether it is possible to assign all shipment boxes to one or more drones in such a way that no drone exceeds its respective carrying capacity. You must output \\"YES\\" if it\'s possible to assign all the shipment boxes to the drones and \\"NO\\" otherwise. The volume of each shipment box can be calculated as hi * bi * li. # Example: Input: ``` 3 2 5 1 2 3 10 2 2 2 20 3 3 3 15 40 25 30 ``` Output: ``` YES ``` In this example, the 1st and 2nd shipment boxes can be assigned to the first drone, and the 3rd shipment box can be assigned to the second drone. This assignment respects both weight and volume restrictions for each drone.","solution":"def can_assign_boxes_to_drones(n, k, boxes, drones): Determines whether all shipment boxes can be assigned to drones without exceeding carrying capacities in terms of weight and volume. Args: n (int): number of shipment boxes. k (int): number of available drones. boxes (list): list of tuples, each containing (wi, hi, bi, li) for each box. drones (list): list of tuples, each containing (MaxCarryWi, MaxCarryVi) for each drone. Returns: str: \\"YES\\" if assignment is possible, \\"NO\\" otherwise. volumes = [hi * bi * li for _, hi, bi, li in boxes] weights = [wi for wi, _, _, _ in boxes] # Function to check if a shipment can be carried by a particular drone def can_carry(drone, weight, volume): return weight <= drone[0] and volume <= drone[1] def backtrack(i, load_weights, load_volumes): if i == n: return True for d in range(k): if can_carry(drones[d], load_weights[d] + weights[i], load_volumes[d] + volumes[i]): load_weights[d] += weights[i] load_volumes[d] += volumes[i] if backtrack(i + 1, load_weights, load_volumes): return True load_weights[d] -= weights[i] load_volumes[d] -= volumes[i] return False return \\"YES\\" if backtrack(0, [0] * k, [0] * k) else \\"NO\\""},{"question":"You are given a rectangular grid of integers with n rows and m columns. Each cell in the grid contains an integer value. Let\'s call a row row-dominant if there exists an integer k such that k appears more than (m / 2) times in that row (i.e., k appears more than half the number of columns). Your task is to count the number of row-dominant rows in the grid. The first input line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns respectively. Each of the next n lines contains m integers describing the grid. The integers in a line are separated by spaces. Print the single number — the number of row-dominant rows in the grid. In the first sample test, the first row is row-dominant because the integer 3 appears 3 times, which is more than half the number of columns (5/2 = 2.5). The second row is not row-dominant because no integer appears more than 2 times in that row. The third row is row-dominant because the integer 2 appears 3 times, which is more than half the number of columns. # Example Input 4 5 3 3 3 1 2 2 4 1 4 2 2 2 2 3 2 1 1 1 1 1 Output 3 Explanation: The first, third, and fourth rows are row-dominant.","solution":"def count_row_dominant_rows(grid, n, m): Counts the number of row-dominant rows in the grid. :param grid: List of lists representing the grid with integers. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :return: The number of row-dominant rows. row_dominant_count = 0 for row in grid: counts = {} for value in row: if value in counts: counts[value] += 1 else: counts[value] = 1 half_columns = m / 2 if any(count > half_columns for count in counts.values()): row_dominant_count += 1 return row_dominant_count"},{"question":"You are given an array of integers and need to perform a series of operations to transform the array in such a way that every element in the array becomes equal. The allowed operation is as follows: in one move, you can increase or decrease any element of the array by 1. Your task is to determine the minimum number of operations required to make all the elements of the array equal. The first line of input contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Print t integers — one per test case. For each test case, print the minimum number of operations required to make all elements of the array equal. **Example** Input: ``` 3 3 1 2 3 4 1 2 3 4 2 -1 1 ``` Output: ``` 2 4 2 ``` **Explanation** In the first test case, you can make all elements equal to 2 in 2 operations: [1, 2, 3] → [2, 2, 2]. In the second test case, you can make all elements equal to 2.5 in 4 operations: [1, 2, 3, 4] → [2.5, 2.5, 2.5, 2.5] (Note: In this problem, fractional operations are allowed if needed). In the third test case, you can make all elements equal to 0 in 2 operations: [-1, 1] → [0, 0].","solution":"def min_operations_to_equalize(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] arr.sort() median = arr[n // 2] operations = sum(abs(median - x) for x in arr) results.append(operations) return results # Helper function to correctly parse input into structured test cases def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return t, test_cases"},{"question":"A famous wizard competition is held in a mystical land. Wizards participate in duels and earn points for each duel they win. The competition administrators want to track the standings of the wizards and determine who the top wizard is at any given point in time. You are given a sequence of duels that take place sequentially. Each duel involves two wizards, and you are provided with the result of each duel. If a wizard wins a duel, they gain 3 points. In the event of a draw, both wizards gain 1 point each. No points are awarded for a loss. Your task is to process the sequence of duels and maintain a leaderboard to determine the top wizard at the end of all duels. If multiple wizards have the highest score, the wizard who reached the highest score first should be considered the top wizard. The input consists of: 1. An integer `n` representing the number of wizards (1 ≤ n ≤ 1000). 2. An integer `m` representing the number of duels (1 ≤ m ≤ 10000). 3. `m` lines of input, each containing three space-separated integers: - `a` (1 ≤ a ≤ n): the index of the first wizard involved in the duel. - `b` (1 ≤ b ≤ n): the index of the second wizard involved in the duel. - `result` (0, 1, or 2): - `0` indicates a draw. - `1` indicates that wizard `a` wins. - `2` indicates that wizard `b` wins. Output the index of the top wizard at the end of all duels. Example: ``` Input: 3 4 1 2 1 2 3 0 3 1 2 1 3 1 Output: 1 ``` Explanation: - Duel 1: Wizard 1 wins against Wizard 2. Scores: (1: 3, 2: 0, 3: 0) - Duel 2: Draw between Wizard 2 and Wizard 3. Scores: (1: 3, 2: 1, 3: 1) - Duel 3: Wizard 3 wins against Wizard 1. Scores: (1: 3, 2: 1, 3: 4) - Duel 4: Wizard 1 wins against Wizard 3. Scores: (1: 6, 2: 1, 3: 4) Wizard 1 reaches the highest score first, so Wizard 1 is the top wizard.","solution":"def top_wizard(n, m, duels): scores = [0] * (n + 1) # Initialize scores for each wizard # Process each duel and update the scores for duel in duels: a, b, result = duel if result == 1: # Wizard a wins scores[a] += 3 elif result == 2: # Wizard b wins scores[b] += 3 else: # Draw scores[a] += 1 scores[b] += 1 # Determine the top wizard max_score = max(scores) for i in range(1, n + 1): if scores[i] == max_score: return i"},{"question":"A large company has a collection of servers that can store a variety of files. Each server has a maximum storage capacity. You are responsible for distributing a given set of files across these servers such that the load is balanced as evenly as possible, while also ensuring that no server exceeds its maximum storage capacity. You are given a list of file sizes and a list of server capacities. Your task is to determine if it is possible to distribute the files across the servers evenly within their capacities. If possible, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". The first line contains an integer n (1 ≤ n ≤ 1000) — the number of files. The second line contains n integers, where the i-th integer represents the size of the i-th file (1 ≤ size ≤ 10000). The third line contains an integer m (1 ≤ m ≤ 100) — the number of servers. The fourth line contains m integers, where the j-th integer represents the maximum capacity of the j-th server (1 ≤ capacity ≤ 100000). The output should either be \\"POSSIBLE\\" (without quotes) if the files can be distributed according to the rules, or \\"IMPOSSIBLE\\" (without quotes) otherwise.","solution":"def can_distribute_files_evenly(file_sizes, server_capacities): Determines if it is possible to evenly distribute files across servers without exceeding the server capacities. :param file_sizes: List of integers representing file sizes. :param server_capacities: List of integers representing server capacities. :return: \\"POSSIBLE\\" if the distribution is possible, otherwise \\"IMPOSSIBLE\\". total_file_size = sum(file_sizes) total_capacity = sum(server_capacities) if total_capacity < total_file_size: return \\"IMPOSSIBLE\\" # Sort file sizes and server capacities in descending order file_sizes.sort(reverse=True) server_capacities.sort(reverse=True) server_loads = [0] * len(server_capacities) # Try to allocate each file to the first server which has enough remaining capacity for file_size in file_sizes: for j in range(len(server_capacities)): if server_loads[j] + file_size <= server_capacities[j]: server_loads[j] += file_size break else: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"You are given an integer array a=[a_1,a_2,dots,a_n] of length n and an integer q representing the number of queries. Each query contains an integer k, and you are required to find the maximum sum of any subsequence of the array of length k. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. **Input** The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — elements of the array. The third line contains an integer q (1 le q le 10^5) — the number of queries. The next q lines contain an integer k (1 le k le n) — the length of the subsequence. **Output** For each query, output the maximum sum of any subsequence of the array of length k. **Example** Input: ``` 5 1 2 3 4 5 3 1 2 5 ``` Output: ``` 5 9 15 ``` Explanation: 1. The maximum sum of a subsequence of length 1 is 5 (the highest number in the array). 2. The maximum sum of a subsequence of length 2 is 9 (the two highest numbers: 4 and 5). 3. The maximum sum of a subsequence of length 5 is 15, which is the sum of the entire array.","solution":"def solve_maximum_subsequence_sums(n, a, q, queries): Solves the problem of finding maximum sum of any subsequence of the array of length k for each query. :param n: Length of the array. :param a: The integer array. :param q: Number of queries. :param queries: List of integers representing the length of subsequences to check. :return: List of results for each query. a.sort(reverse=True) results = [] for k in queries: results.append(sum(a[:k])) return results # To handle input/output separately def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) a = list(map(int, data[1:n+1])) q = int(data[n+1]) queries = list(map(int, data[n+2:n+2+q])) results = solve_maximum_subsequence_sums(n, a, q, queries) for result in results: print(result)"},{"question":"You are given a long straight line and you need to place n markers along it. Each marker has a position pi on this line. Your task is to separate these markers into two non-empty groups such that the distance between the farthest two markers within each group is minimized. Specifically, you want to minimize the maximum distance between the farthest two markers within either group. For example, if the markers are placed at positions {1, 5, 9, 13}, you could split them into groups {1, 5} and {9, 13} where the maximum distance within the groups is 4. Write a program to determine the minimum possible value for this maximum distance. The first line of input contains a single integer n (2 ≤ n ≤ 100,000), the number of markers. The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 10^9), the positions of the markers in non-decreasing order. Output a single integer, the minimized maximum distance. # Example Input: ``` 4 1 5 9 13 ``` Output: ``` 4 ``` Input: ``` 5 1 2 3 4 5 ``` Output: ``` 2 ```","solution":"def minimized_max_distance(n, positions): Determines the minimum possible value for the maximum distance between the farthest two markers within either group. Parameters: n (int): The number of markers. positions (list of int): The positions of the markers in non-decreasing order. Returns: int: The minimum possible value for the maximum distance. # Edge case where there are only two markers if n == 2: return positions[1] - positions[0] # To find the minimum possible value for the maximum distance def is_valid(max_dist): last_marker = positions[0] groups = 1 for i in range(1, n): if positions[i] - last_marker > max_dist: groups += 1 last_marker = positions[i] if groups > 2: return False return True # Binary search to find the minimized maximum distance left, right = 0, positions[-1] - positions[0] result = right while left <= right: mid = (left + right) // 2 if is_valid(mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"You are given a ladder with n steps. You are standing at the bottom of the ladder and want to reach the top. At each step, you can climb either 1 step or 2 steps. Your task is to find out how many distinct ways you can reach the top of the ladder. The first line contains an integer n (1 ≤ n ≤ 105) — the number of steps in the ladder. In a single line, print the number of distinct ways to reach the top of the ladder. Example input 1: 4 Example output 1: 5 Explanation: The number of ways to climb a ladder with 4 steps is as follows: 1. 1 step + 1 step + 1 step + 1 step 2. 2 steps + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 1 step + 1 step + 2 steps","solution":"def count_distinct_ways(n): Returns the number of distinct ways to reach the top of a ladder with n steps. if n == 1: return 1 dp = [0] * (n + 1) # dp[i] will hold the number of ways to reach the i-th step dp[1] = 1 # There\'s 1 way to reach the 1st step dp[2] = 2 # There are 2 ways to reach the 2nd step (1+1 or 2) for i in range(3, n + 1): dp[i] = dp[i-1] + dp[i-2] # You can reach i-th step from (i-1)-th by taking 1 step or from (i-2)-th by taking 2 steps return dp[n]"},{"question":"Fran loves to play with numbers, and his favorite pastime is finding interesting sequences. One day, he discovered a new type of sequence which he calls the \\"self-dividing sequence\\". A number is considered self-dividing if it is divisible by all its digits. For example, the number 128 is self-dividing because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. Note that each digit must be non-zero, thus a number containing the digit 0 is not a self-dividing number. Fran now poses a challenge for you: Given a range of integers [left, right], find all the self-dividing numbers within this range. The first line contains two integers left and right (1 ≤ left ≤ right ≤ 10^4). You should output a list of the self-dividing numbers in non-decreasing order. The first sample input will be `1 22` and the expected output will be `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`. In the second sample input, with `left` as `50` and `right` as `75`, the expected output will be `[55, 66]`. In the third sample input, with `left` as `1` and `right` as `1`, the expected output will be `[1]`. Write a program that reads the integers left and right from standard input and prints the list of self-dividing numbers between left and right inclusive.","solution":"def is_self_dividing(num): original_num = num while num > 0: digit = num % 10 if digit == 0 or original_num % digit != 0: return False num //= 10 return True def self_dividing_numbers(left, right): result = [] for num in range(left, right + 1): if is_self_dividing(num): result.append(num) return result"},{"question":"You are tasked with creating a new variant of a popular puzzle game called \\"Block Shift\\". In this game, a 2D grid of cells is given, each containing a single integer. The goal of the game is to shift the rows and columns of the grid such that all integers in each row and each column are unique. You have to implement a function to determine if it is possible to achieve the goal, and if so, print the resulting grid. If it is not possible, print \\"Impossible\\". Input Format: - The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. - The next n lines contain n space-separated integers each, which represent the initial state of the grid. Output Format: - If it is possible to rearrange the grid to meet the goal, print \\"Possible\\" followed by the resulting n x n grid. - If it is not possible, print \\"Impossible\\". Here is a sample input and output for clarity: Sample Input 1: ``` 3 1 2 3 3 1 2 2 3 1 ``` Sample Output 1: ``` Possible 1 2 3 2 3 1 3 1 2 ``` Sample Input 2: ``` 3 1 2 2 3 1 2 2 3 1 ``` Sample Output 2: ``` Impossible ```","solution":"def is_unique_collection(collection): Helper function to check if all elements in the collection are unique. return len(collection) == len(set(collection)) def can_rearrange_to_unique(n, grid): Function to determine if the grid can be rearranged such that each row and column has unique integers. # Check each row for uniqueness for row in grid: if not is_unique_collection(row): return False # Check each column for uniqueness for col in range(n): column_elements = [grid[row][col] for row in range(n)] if not is_unique_collection(column_elements): return False # If all rows and columns have unique elements return True def solve_block_shift(n, grid): Determines if it\'s possible to rearrange the grid to have unique numbers in each row and column. # Check if initial grid configuration already meets the requirements if can_rearrange_to_unique(n, grid): print(\\"Possible\\") for row in grid: print(\\" \\".join(map(str, row))) return print(\\"Impossible\\")"},{"question":"A tree is an acyclic connected graph. The height of a tree is defined as the length of the longest path from the root node to any leaf node. You are given a binary tree with n nodes. Each node is uniquely numbered from 1 to n. The tree is described by an array of n-1 elements, where the i-th element is p_i, representing a parent-child relationship such that p_i is the parent of node i+1. For example, for the tree: 1 /| 2 3 4 | 5 The array would be [1,1,1,4]. Write a program to determine the height of the tree. # Input: - The first line contains a single integer n (2 le n le 10^5), the number of nodes in the tree. - The second line contains n-1 integers p_1, p_2, ..., p_{n-1} (1 le p_i le n), representing the parent of the node i+1. # Output: - Output the height of the tree. # Example: Input: ``` 5 1 1 1 4 ``` Output: ``` 3 ``` # Note: In the example tree, the longest path from the root (node 1) to any leaf node is the path from node 1 to node 4 to node 5, which consists of 3 nodes, so the height of the tree is 2.","solution":"def find_tree_height(n, parents): from collections import defaultdict, deque tree = defaultdict(list) # Build the tree using adjacency list for child in range(2, n+1): tree[parents[child-2]].append(child) # BFS to find the height of the tree queue = deque([(1, 0)]) # (node, current height) max_height = 0 while queue: node, height = queue.popleft() max_height = max(max_height, height) for child in tree[node]: queue.append((child, height + 1)) return max_height # Example usage if __name__ == \\"__main__\\": n = 5 parents = [1, 1, 1, 4] print(find_tree_height(n, parents)) # Output should be 2"},{"question":"Given a matrix of size `n x m` where each cell contains a non-negative integer, you need to process `q` queries. Each query involves a rectangular submatrix, and you need to find the sum of all the elements in that submatrix. The input consists of multiple test cases. The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. Each test case includes: 1. Two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. 2. Following `n` lines contain `m` integers each, where the j-th integer on the i-th line represents the element at cell (i, j). 3. An integer `q` (1 ≤ q ≤ 10^4) — the number of queries. 4. Following `q` lines, each containing four integers `x1`, `y1`, `x2`, and `y2` (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) — the coordinates of the submatrix. For each query, output the sum of all the elements in the specified submatrix. Example: ``` Input: 1 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output: 12 28 ```","solution":"def matrix_sum_queries(t, test_cases): This function processes multiple test cases and queries to find the sum of elements in specified submatrices. Arguments: t : int : Number of test cases test_cases : list : List of test case data. Each test case is a tuple containing: - n (int): number of rows - m (int): number of columns - matrix (list of lists): the n x m matrix - q (int): number of queries - queries (list of tuples): each tuple contains four integers x1, y1, x2, y2 Returns: list : List of results for each query in all test cases results = [] for case in test_cases: n, m, matrix, q, queries = case # Compute prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) # Process each query for x1, y1, x2, y2 in queries: sum_submatrix = (prefix_sum[x2][y2] - prefix_sum[x2][y1-1] - prefix_sum[x1-1][y2] + prefix_sum[x1-1][y1-1]) results.append(sum_submatrix) return results"},{"question":"After recently discovering a treasure map, Alex found that it describes a mysterious cave system with n rooms connected by m corridors. Each corridor connects two rooms and has a certain value associated with it indicating the difficulty to cross it. Alex is very cautious and wants to ensure their safety by minimizing the maximum difficulty of any corridor on their path. However, they don\'t want to explore the entire cave system, so they plan to start at room 1 and end at room n. Help Alex find an optimal path such that they minimize the maximum difficulty of any corridor they must cross. The first line of the input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of rooms and corridors respectively. The next m lines each describe a corridor through three integers u, v, and d (1 ≤ u, v ≤ n, 0 ≤ d ≤ 10^6), where u and v are the rooms connected by the corridor and d is the difficulty to cross that corridor. Output the minimum possible value of the maximum difficulty over all paths from room 1 to room n. If there is no path from room 1 to room n, output -1. # Example Input 6 7 1 2 5 1 3 8 2 4 3 3 5 2 4 6 12 5 6 4 4 5 7 Output 7 # Explanation One of the optimal paths from room 1 to room 6 is: 1 -> 2 -> 4 -> 5 -> 6, with the difficulties on the edges being 5, 3, 7 and 4 respectively. The maximum difficulty is 7 which is minimized.","solution":"import heapq from collections import defaultdict def min_max_difficulty(n, m, corridors): def dijkstra_minimax(): min_difficulty = [float(\'inf\')] * (n + 1) min_difficulty[1] = 0 min_heap = [(0, 1)] # (difficulty, node) while min_heap: current_max, u = heapq.heappop(min_heap) if u == n: return current_max for v, d in graph[u]: new_difficulty = max(current_max, d) if new_difficulty < min_difficulty[v]: min_difficulty[v] = new_difficulty heapq.heappush(min_heap, (new_difficulty, v)) return -1 # Building the graph graph = defaultdict(list) for u, v, d in corridors: graph[u].append((v, d)) graph[v].append((u, d)) return dijkstra_minimax() # Example usage: n = 6 m = 7 corridors = [ (1, 2, 5), (1, 3, 8), (2, 4, 3), (3, 5, 2), (4, 6, 12), (5, 6, 4), (4, 5, 7) ] print(min_max_difficulty(n, m, corridors)) # Output: 7"},{"question":"Jane loves organizing her bookshelves. She has `n` books and wants to arrange them in such a way that the collection looks aesthetically pleasing. Each book has a height `h_i` and a thickness `t_i`. Jane values the beauty of a bookshelf based on its monotonicity in terms of book heights - either all books should be in non-decreasing order of heights or in non-increasing order. Help Jane determine the beauty of her bookshelf arrangement. The beauty of an arrangement is defined as the length of the longest contiguous subsequence of books that are either in non-decreasing order of heights or in non-increasing order of heights. Jane can choose any such subsequence from the bookshelf. The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of books. Each of the next `n` lines contains two integers `h_i` and `t_i` (1 ≤ h_i, t_i ≤ 10^9) — denoting the height and thickness of the i-th book respectively. Print a single integer — the maximum beauty of the bookshelf. Example: Input: 5 1 3 2 2 3 1 2 4 1 5 Output: 3 Explanation: The contiguous subsequence `1 3, 2 2, 3 1` is in non-decreasing order of heights, so the maximum beauty is 3. Alternatively, `3 1, 2 4, 1 5` is in non-increasing order of heights, also giving a maximum beauty of 3.","solution":"def max_beauty_of_books(books): Finds the maximum length of a contiguous subsequence of books that are either in non-decreasing or non-increasing order of heights. Args: books (list of tuples): List of books where each book is represented by a tuple (h_i, t_i). Returns: int: The maximum beauty of the bookshelf. n = len(books) if n == 0: return 0 max_len = 1 inc_len = 1 dec_len = 1 for i in range(1, n): if books[i][0] >= books[i-1][0]: inc_len += 1 else: inc_len = 1 if books[i][0] <= books[i-1][0]: dec_len += 1 else: dec_len = 1 max_len = max(max_len, inc_len, dec_len) return max_len"},{"question":"A researcher has discovered an underground system of caves connected by narrow tunnels. The tunnels can only be traversed in one direction and each passage between two caves has an associated traversal time. He seeks to determine the shortest time needed to travel from the entrance cave to the main chamber, where vital research is stored. The cave system can be represented as a directed graph, where the caves are nodes and the tunnels are directed edges with weights corresponding to the traversal time. Given a description of the cave system, your task is to determine the minimum traversal time from the entrance cave to the main chamber. If it is impossible to reach the main chamber from the entrance cave, output \\"impossible\\". The graph is described as follows: - The first line contains three integers: n (2 ≤ n ≤ 100,000), m (1 ≤ m ≤ 200,000), and t (1 ≤ t ≤ 1,000), where n is the number of caves, m is the number of tunnels, and t is the cave index of the main chamber (1 ≤ t ≤ n). - Each of the next m lines contains three integers: u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 100,000), indicating there is a directed tunnel from cave u to cave v with a traversal time of w units. The entrance cave is always cave 1 (cave index 1). Example input: ``` 5 6 5 1 2 10 1 3 30 2 3 5 2 4 20 3 5 15 4 5 10 ``` Example output: ``` 30 ``` Explanation: The shortest path from cave 1 to cave 5 is 1 -> 2 -> 3 -> 5 with a total time of 10 (1 to 2) + 5 (2 to 3) + 15 (3 to 5). Thus, the minimum traversal time is 30 units. If no path exists from cave 1 to cave t, output: ``` impossible ``` You are required to implement a function that reads the input from standard input and outputs the answer to standard output.","solution":"import sys import heapq def find_shortest_path(): input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) t = int(data[2]) edges = [] for i in range(m): u = int(data[3 + i * 3]) v = int(data[4 + i * 3]) w = int(data[5 + i * 3]) edges.append((u, v, w)) # Dijkstra\'s algorithm def dijkstra(start, n): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((w, v)) min_heap = [(0, start)] min_times = {i: float(\'inf\') for i in range(n + 1)} min_times[start] = 0 while min_heap: current_time, u = heapq.heappop(min_heap) if current_time > min_times[u]: continue for w, v in graph[u]: time = current_time + w if time < min_times[v]: min_times[v] = time heapq.heappush(min_heap, (time, v)) return min_times min_times_from_start = dijkstra(1, n) if min_times_from_start[t] == float(\'inf\'): print(\\"impossible\\") else: print(min_times_from_start[t])"},{"question":"In a faraway land, there is a famous wizard who is known for his powerful potions. Each potion is made by combining different ingredients, and the process requires a sequence of precise steps. Each ingredient has a certain weight, and the wizard needs to combine two ingredients at a time to create new combined ingredients until only one ingredient remains. When two ingredients with weights `x` and `y` are combined, the new combined ingredient has a weight of `x + y`, and the energy used to combine them is also `x + y`. The wizard wants to minimize the total energy used to combine all the ingredients into one final ingredient. Given the weights of the ingredients, help the wizard to determine the minimum total energy required to combine all the ingredients into one final ingredient. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of ingredients. - The second line contains `n` integers `w[1], w[2], ..., w[n]` (1 ≤ w[i] ≤ 10000), representing the weights of the ingredients. # Output - Print a single integer, the minimum total energy required to combine all the ingredients into one. # Sample Input ``` 4 4 3 2 1 ``` # Sample Output ``` 19 ``` # Explanation The optimal way to combine the ingredients is as follows: 1. Combine ingredients with weights 1 and 2: (1 + 2 = 3), total energy used = 3 2. Combine the result (3) with ingredient with weight 3: (3 + 3 = 6), total energy used = 6 3. Combine the result (6) with ingredient with weight 4: (6 + 4 = 10), total energy used = 10 The total energy used = 3 + 6 + 10 = 19.","solution":"import heapq def min_energy_to_combine_ingredients(n, weights): This function calculates the minimum total energy required to combine all the ingredients into one. :param n: int - Number of ingredients :param weights: List[int] - List of weights of the ingredients :return: int - Minimum total energy required if n < 2: return 0 heapq.heapify(weights) total_energy = 0 while len(weights) > 1: first = heapq.heappop(weights) second = heapq.heappop(weights) combined_weight = first + second total_energy += combined_weight heapq.heappush(weights, combined_weight) return total_energy"},{"question":"You are given a network consisting of **n** computers and **m** cables connecting pairs of computers. Each cable can carry data either in one direction or bidirectionally. Some cables are already operational, and some are malfunctioning. Your task is to ensure that data can flow between all pairs of computers by repairing or replacing a minimal number of cables. Each cable can be represented as an edge in a graph, and the data flow problem translates to ensuring the graph is fully connected by modifying the least number of edges. The first line contains two integers **n** and **m** (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of computers and the number of cables, respectively. The next **m** lines describe the cables. Each line contains four integers **u**, **v**, **d**, and **s** (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ d ≤ 3, 0 ≤ s ≤ 3). Here: - u and v are the indices of computers connected by the cable. - d describes the directionality of the cable (0 for operational bidirectional, 1 for operational u to v, 2 for operational v to u, 3 for broken/malfunctioning). - s describes the state of the cable (0 for no actions needed, 1 for replacement required, 2 for repair required, 3 for no action needed if the cable is already malfunctioning). You need to output a single integer — the minimal number of cable changes (replacements or repairs) required to ensure data flow between all pairs of computers. If it\'s impossible, output -1. **Note**: If a cable is specified as broken (d = 3), you can choose to either repair or replace it. For cables with specific directionality (d = 1 or d = 2), ensure that the final configuration allows data flow in both directions where necessary.","solution":"def min_cable_changes(n, m, cables): parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] == x: return x parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 edge_list = [] for u, v, d, s in cables: if d == 0: edge_list.append((0, u, v)) # operational bidirectional, no changes needed elif d == 1: edge_list.append((s, u, v)) # u to v elif d == 2: edge_list.append((s, v, u)) # v to u elif d == 3: edge_list.append((1 if s == 2 else 2, u, v)) # broken / malfunctioning # Sort edges by the cost edge_list.sort() mst_cost = 0 edges_used = 0 for cost, u, v in edge_list: if find(u) != find(v): union(u, v) mst_cost += cost edges_used += 1 if edges_used == n - 1: break # Check if all computers are connected unique_roots = set(find(i) for i in range(1, n + 1)) if len(unique_roots) > 1: return -1 return mst_cost"},{"question":"Ivan and Peter are enthusiastic about classic numeric sequences. Recently, they became fascinated with a new sequence they named the \\"Triangular Sum Sequence\\". The sequence is defined as follows: 1. Start with any positive integer A. 2. The next number in the sequence is obtained by summing up all the digits of the current number. 3. Repeat the process until the current number becomes a single-digit number. For example, if the starting integer is 12345, the sequence is as follows: 12345 -> 1 + 2 + 3 + 4 + 5 = 15 15 -> 1 + 5 = 6 Hence, the sequence for the starting integer 12345 ends at 6. Given an integer A, Ivan and Peter want to find out the final single-digit number obtained by this process. Can you help them with a function that performs this task? # Input The input consists of a single integer A (1 ≤ A ≤ 10^9). # Output Print a single integer which is the result of the Triangular Sum Sequence for the given integer A. # Examples Example 1 **Input:** ``` 12345 ``` **Output:** ``` 6 ``` Example 2 **Input:** ``` 98765 ``` **Output:** ``` 8 ``` **Explanation:** For 98765, the sequence is: 98765 -> 9 + 8 + 7 + 6 + 5 = 35 35 -> 3 + 5 = 8 Since 8 is a single-digit number, the sequence ends here. # Note Notice that for large values of A, digit summation process might need to be repeated multiple times until a single-digit number is obtained. Make sure the solution is efficient to handle the largest constraints.","solution":"def triangular_sum_sequence(A): Returns the final single-digit number obtained by repeatedly summing the digits of A. def sum_of_digits(n): return sum(int(digit) for digit in str(n)) while A >= 10: A = sum_of_digits(A) return A"},{"question":"Given two integer arrays nums1 and nums2 sorted in non-decreasing order of length m and n respectively, your task is to find a way to merge them into a single sorted array of length m+n. However, instead of using the traditional merge approach, you need to merge the arrays without using extra space. The final output should be sorted in non-decreasing order and should be stored in nums1 starting from the 0-th index. The elements in nums1 and nums2 must also be positioned exactly as they were in their respective original arrays, thereby ensuring stability of the elements. You are guaranteed that the array nums1 has a size of m+n and contains exactly m initialized elements followed by n zeros. The array nums2 contains exactly n elements. Write a function merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None: Do not return anything, modify nums1 in-place instead. The function should modify nums1 in-place to become the sorted merged array. # Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: nums1 = [1,2,2,3,5,6] # Example 2: Input: nums1 = [1], m = 1 nums2 = [], n = 0 Output: nums1 = [1] # Constraints: - nums1.length == m + n - nums2.length == n - 0 <= m, n <= 200 - 1 <= nums1[i], nums2[i] <= 10^9","solution":"def merge(nums1, m, nums2, n): Merge nums2 into nums1 in-place. Args: nums1 (List[int]): The first list with a size of `m+n` with `m` initialized elements and the rest zeroes. nums2 (List[int]): The second list with a size of `n` with `n` initialized elements. m (int): Number of initialized elements in nums1. n (int): Number of initialized elements in nums2. # Start filling the nums1 array from the end to avoid overwriting elements. p1 = m - 1 # Pointer for the last initialized element in nums1 p2 = n - 1 # Pointer for the last element in nums2 p = m + n - 1 # Pointer for the last position in nums1 # Iterate while p2 is within the bounds of nums2 while p2 >= 0: if p1 >= 0 and nums1[p1] > nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1"},{"question":"Alice loves creating unique patterns by modifying sequences of numbers. She starts with a simple sequence of integers and wants to transform it into another sequence by either incrementing or decrementing each element. She also wants to minimize the maximum number of operations (either increment or decrement) applied to any particular element in the sequence. Help Alice determine this minimum value. You are given an integer array A of length n. Alice wants to transform it into another integer array B of length n. For each element A_i, you can either increment it or decrement it any number of times to match the corresponding element B_i. Determine the minimum value of the maximum number of operations required for any single element. **Input** - The first line contains a single integer n (1 le n le 100,000) — the length of the sequences. - The second line contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^9) — the initial sequence. - The third line contains n integers B_1, B_2, ldots, B_n (1 le B_i le 10^9) — the target sequence. **Output** - Print a single integer — the minimum value of the maximum number of operations required for any single element to transform sequence A into sequence B. **Example** - Input: ``` 5 1 3 5 7 9 2 4 6 8 10 ``` - Output: ``` 1 ``` In this example, each element in array A can be either incremented or decremented by 1 to match the corresponding element in array B. Hence, the minimum value of the maximum number of operations required for any single element is 1.","solution":"def min_max_operations(n, A, B): Determines the minimum value of the maximum number of operations required for any single element to transform sequence A into sequence B. Parameters: n (int): The length of the sequences. A (List[int]): The initial sequence. B (List[int]): The target sequence. Returns: int: The minimum value of the maximum number of operations. max_operations = 0 for i in range(n): max_operations = max(max_operations, abs(A[i] - B[i])) return max_operations"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains a unique integer from 1 to n*m. Your task is to rearrange the integers in such a way that: 1. Each row of the grid is sorted in non-decreasing order. 2. Each column of the grid is sorted in non-decreasing order. In one operation, you can pick any two distinct cells of the grid and swap their contents. You are allowed to perform at most (n*m) swaps to achieve the goal. You don’t need to minimize the number of swaps. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 50) – the number of rows and columns in the grid. - The next n lines contain m integers each – the initial configuration of the grid. Output: - The first line should contain a single integer k (0 ≤ k ≤ n*m), representing the number of swaps performed. - Each of the next k lines should contain four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n; 1 ≤ y1, y2 ≤ m), representing that you swapped the contents of the cell at (x1, y1) with the cell at (x2, y2). Example: Input: 2 3 3 2 1 6 5 4 Output: 1 1 3 1 1 Explanation: - Initially, the grid is: 3 2 1 6 5 4 - After one swap: (1, 3) with (1, 1), the grid becomes: 1 2 3 6 5 4 Note: The goal is to make all rows and columns sorted non-decreasingly. The above example is illustrative and not an optimal representation of possible swaps; the resulting grid must be fully sorted as viewed both row-wise and column-wise.","solution":"def rearrange_grid(n, m, grid): Rearranges the grid such that each row and column is sorted in non-decreasing order. # Flatten the grid and sort it flattened_grid = sum(grid, []) sorted_grid = sorted(flattened_grid) # Assign sorted values to the grid while tracking swaps swaps = [] k = 0 for i in range(n): for j in range(m): if grid[i][j] != sorted_grid[i*m + j]: # Find the position of the correct value x, y = None, None for a in range(n): for b in range(m): if grid[a][b] == sorted_grid[i*m + j]: x, y = a, b break if x is not None: break # Swap values grid[i][j], grid[x][y] = grid[x][y], grid[i][j] swaps.append((i + 1, j + 1, x + 1, y + 1)) k += 1 return k, swaps"},{"question":"In a remote village, there is a special festival during which people like to form long chains by holding hands. Each person can hold hands with at most two other people. You are given an arrangement of people standing in a line. Each person is represented by a character in a string, where \'H\' represents a person who can hold hands with both their left and right neighbors, and \'X\' represents a person who is currently not participating and hence breaks the chain. The festival organizer wants to make the longest possible unbroken chain of people holding hands. You need to determine the length of this longest unbroken chain. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s of length n (1 ≤ n ≤ 100), composed only of characters \'H\' and \'X\'. The string represents the arrangement of people. For each test case, print one integer — the length of the longest unbroken chain of people holding hands. Example: Input: 4 HXH HHHHXHH HXHXH HHHH Output: 1 4 1 4 Explanation: In the first case, people are isolated by \'X\', so the longest chain length is 1. In the second case, the longest continuous chain of \'H\' has a length of 4. In the third case, each \'H\' stands alone, so the longest chain length is 1. In the fourth case, all \'H\' form a single chain of length 4.","solution":"def longest_unbroken_chain(t, cases): For each test case, return the length of the longest unbroken chain of \'H\' characters results = [] for s in cases: max_chain = 0 current_chain = 0 for char in s: if char == \'H\': current_chain += 1 max_chain = max(max_chain, current_chain) else: current_chain = 0 results.append(max_chain) return results"},{"question":"A group of friends decided to celebrate the New Year by creating a special light display. They have decided to arrange n light bulbs in a row, each of which can be either ON or OFF. However, they noticed that the pattern of the bulbs should follow a specific rule: any two adjacent bulbs should not be both ON. Given this requirement, they need to know how many valid patterns of arranging the bulbs exist. Write a program to calculate the number of valid patterns of arranging the n bulbs. The program should use a dynamic programming approach to ensure efficiency. The input consists of a single integer n (1 ≤ n ≤ 10^5), which represents the number of bulbs. The output should be a single integer, which is the number of valid patterns of arranging the n bulbs. For example, for n = 3, there are 5 valid patterns: `[OFF, OFF, OFF]`, `[OFF, OFF, ON]`, `[OFF, ON, OFF]`, `[ON, OFF, OFF]`, `[ON, OFF, ON]`. Similarly, for n = 4, there are 8 valid patterns: `[OFF, OFF, OFF, OFF]`, `[OFF, OFF, OFF, ON]`, `[OFF, OFF, ON, OFF]`, `[OFF, ON, OFF, OFF]`, `[ON, OFF, OFF, OFF]`, `[OFF, ON, OFF, ON]`, `[ON, OFF, OFF, ON]`, `[ON, OFF, ON, OFF]`.","solution":"def count_valid_patterns(n): Returns the number of valid patterns of arranging n bulbs such that no two adjacent bulbs are both ON. if n == 1: return 2 if n == 2: return 3 dp = [0] * (n + 1) dp[1] = 2 dp[2] = 3 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Vasya is a student in a university that has a peculiar configuration of rooms. The university has \'n\' rooms and there are several corridors connecting pairs of rooms. Vasya is in room \'1\' and he wants to reach room \'n\'. The problem is that the university has specific rules for moving from one room to another. Each corridor connecting rooms \'a\' and \'b\' has an associated direction and cost. The cost to move in the intended direction of the corridor is given as \'c\'. However, Vasya can choose to move against the direction of the corridor which incurs a different cost \'d\'. Vasya wants to minimize the total cost to reach room \'n\' from room \'1\'. You are given the number of rooms \'n\', the number of corridors \'m\', and the description of each corridor. Your task is to compute the minimum cost required for Vasya to travel from room \'1\' to room \'n\'. The first line contains two integers \'n\' and \'m\' (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) representing the number of rooms and the number of corridors respectively. Each of the next \'m\' lines describes a corridor with four integers \'a\', \'b\', \'c\', \'d\' (1 ≤ a, b ≤ n, 1 ≤ c, d ≤ 10^9). Here \'a\' and \'b\' are the rooms connected by the corridor, \'c\' is the cost to move from \'a\' to \'b\', and \'d\' is the cost to move from \'b\' to \'a\'. Print the minimum cost required for Vasya to travel from room \'1\' to room \'n\'. If there is no way for Vasya to reach room \'n\', print -1. # Example Input: ``` 5 6 1 2 5 10 1 3 10 5 2 4 2 3 3 4 3 2 4 5 1 1 3 5 8 8 ``` Output: ``` 11 ``` Explanation: The optimal path is 1 -> 2 -> 4 -> 5 with a total cost of 5 + 2 + 1 = 8. Although there is a direct connection from 3 to 5, taking the route through 4 is cheaper.","solution":"import heapq def find_min_cost(n, m, corridors): graph = {i: [] for i in range(1, n + 1)} for a, b, c, d in corridors: graph[a].append((b, c)) graph[b].append((a, d)) # Dijkstra\'s Algorithm pq = [(0, 1)] # (cost, node) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 while pq: current_cost, current_node = heapq.heappop(pq) if current_cost > dist[current_node]: continue for neighbor, travel_cost in graph[current_node]: new_cost = current_cost + travel_cost if new_cost < dist[neighbor]: dist[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return dist[n] if dist[n] != float(\'inf\') else -1 # Example usage: def example_usage(): n = 5 m = 6 corridors = [ (1, 2, 5, 10), (1, 3, 10, 5), (2, 4, 2, 3), (3, 4, 3, 2), (4, 5, 1, 1), (3, 5, 8, 8) ] print(find_min_cost(n, m, corridors)) # Output: 8 example_usage()"},{"question":"You are given an array of non-negative integers `nums` and an integer `x`. Your task is to find the maximum sum of a subarray with a length equal to `x` or less. A subarray is a contiguous part of the array. The sum of the subarray should be the maximum among all possible subarrays of length `x` or less. If there are multiple subarrays with the same maximum sum, you should return the sum of any one of them. The first line of the input contains two integers `n` (1 ≤ n ≤ 10^5) and `x` (1 ≤ x ≤ n), where `n` is the length of the array. The next line contains `n` integers, representing the array `nums` (0 ≤ nums[i] ≤ 10^6). Output the maximum sum of a subarray with a length equal to `x` or less. # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` 12 ``` Explanation In this example, the subarray [4, 5] has the maximum sum of 9 when length is 2, but when considering length 3, the subarray [3, 4, 5] has the sum 12 which is the maximum possible sum for `x` or less.","solution":"def max_subarray_sum(nums, x): Returns the maximum sum of a subarray with length up to x. Parameters: nums (list): A list of non-negative integers. x (int): The maximum length of the subarray. Returns: int: The maximum sum of the subarray with length up to x. n = len(nums) max_sum = float(\'-inf\') for k in range(1, x + 1): current_sum = sum(nums[:k]) max_sum = max(max_sum, current_sum) for i in range(n - k): current_sum = current_sum - nums[i] + nums[i + k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an undirected weighted graph and a subset of its nodes, you are required to find the shortest distance from a given source node to any of the nodes in the subset. You are given an undirected weighted graph with n vertices and m edges. Each edge is described by a triplet (u, v, w) meaning that there is an edge between vertices u and v with weight w. Additionally, you are given a set of special nodes and a source node s. Your task is to find the shortest distance from the source node s to any of the special nodes. The first line contains four integers n, m, k, and s (2 ≤ n, m ≤ 10^5, 1 ≤ k < n, 1 ≤ s ≤ n), which represent the number of vertices, the number of edges, the number of special nodes and the source node respectively. The second line contains k distinct integers, denoting the indices of the special nodes. Each of the following m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^5, u ≠ v), denoting there is an edge between vertices u and v with weight w. Output the shortest distance from the source node s to any of the special nodes. If there is no path from the source node to any of the special nodes, print -1. Example: Input: ``` 6 7 2 1 2 5 1 2 4 1 3 2 2 3 2 3 4 3 2 4 1 2 5 7 4 5 2 ``` Output: ``` 5 ``` Explanation: The shortest path from node 1 to the special nodes (2 and 5) is as follows: - 1 → 2 with a distance of 4. - 1 → 3 → 4 → 5 with a distance of 2 + 3 + 2 = 7 (not the shortest). The shortest distance is 4.","solution":"import heapq from collections import defaultdict def shortest_path_to_special_node(n, m, k, s, special_nodes, edges): Finds the shortest path from the source node s to any of the special nodes. Parameters: n (int): Number of vertices m (int): Number of edges k (int): Number of special nodes s (int): Source node special_nodes (list): List of special nodes edges (list of tuples): List of edges in the form (u, v, w) Returns: int: Shortest distance from the source node to any of the special nodes, or -1 if no path exists. graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Initializing the priority queue with the source node pq = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 while pq: curr_dist, u = heapq.heappop(pq) if u in special_nodes: return curr_dist for v, weight in graph[u]: new_dist = curr_dist + weight if new_dist < distances[v]: distances[v] = new_dist heapq.heappush(pq, (new_dist, v)) return -1"},{"question":"Alice enjoys sending secret messages to her friends. However, to ensure that only the intended recipient can read the message, she uses a simple encryption technique. Given a string s consisting of lowercase English letters and a key k (which is an integer), she shifts every character in the string forwards by k positions in the alphabet. When the end of the alphabet is reached, the shift continues from the beginning of the alphabet. For example, with k = 3, \\"xyz\\" would be encrypted as \\"abc\\". Your task is to write a function that decrypts Alice\'s message, shifting each character backwards by k positions. The input consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 100). The second line contains the integer k (1 ≤ k ≤ 25). Print the decrypted message. Example: Input: abc 3 Output: xyz","solution":"def decrypt_message(s, k): Decrypts a message by shifting characters backwards by k positions. Parameters: s (str): The encrypted message consisting of lowercase English letters. k (int): The number of positions each character was shifted forward during encryption. Returns: str: The decrypted message. decrypted_message = [] for char in s: # Calculate the new character by shifting backwards new_char = chr((ord(char) - ord(\'a\') - k) % 26 + ord(\'a\')) decrypted_message.append(new_char) return \'\'.join(decrypted_message)"},{"question":"Shaun loves geometry puzzles, and his latest challenge involves a coordinate plane with several points. Given an array of points with integer coordinates in a 2-D plane, Shaun wants to find the smallest rectangle that can contain all the given points such that the sides of the rectangle are parallel to the coordinate axes. You need to help Shaun by writing a program to determine the smallest area of such a rectangle. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of points. - The next n lines each contain two integers xi and yi (-10^9 ≤ xi, yi ≤ 10^9), representing the coordinates of the i-th point. Output: - A single integer representing the area of the smallest rectangle that can contain all the given points. Example: Input: 4 1 2 3 4 5 1 2 3 Output: 12 Explanation: For the given points, the smallest rectangle that can contain all points has a bottom-left corner at (1, 1) and a top-right corner at (5, 4), resulting in an area of 12.","solution":"def smallest_rectangle_area(points): Returns the area of the smallest rectangle that can contain all the given points. min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) length = max_x - min_x width = max_y - min_y return length * width # Example usage: # points = [(1, 2), (3, 4), (5, 1), (2, 3)] # print(smallest_rectangle_area(points)) # Output: 12"},{"question":"You are given a tree with n vertices labeled from 1 to n, rooted at vertex 1. Each edge of the tree has an integer weight associated with it. For any two nodes u and v in the tree, the distance between them is the sum of the weights of the edges on the unique path between u and v. You need to answer q queries of the form: given two nodes u and v, compute the distance between them. The first line contains two integers n and q (1 le n, q le 10^5) — the number of vertices in the tree and the number of queries. The next n-1 lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — indicating an edge between vertices u and v with weight w. The next q lines each contain two integers u and v (1 le u, v le n) — indicating the nodes for which you need to find the distance. Output q lines, each containing a single integer — the distance between nodes u and v for each query. # Example Input ``` 5 3 1 2 3 1 3 2 3 4 4 3 5 1 2 4 1 5 4 5 ``` Output ``` 9 3 5 ``` Explanation The tree is as follows: ``` 1 / 2 3 / 4 5 Edges: (1-2: 3), (1-3: 2), (3-4: 4), (3-5: 1) ``` - Distance from 2 to 4: 3 (1 rightarrow 2) + 2 (1 rightarrow 3) + 4 (3 rightarrow 4) = 9 - Distance from 1 to 5: 2 (1 rightarrow 3) + 1 (3 rightarrow 5) = 3 - Distance from 4 to 5: 4 (3 rightarrow 4) + 1 (3 rightarrow 5) = 5","solution":"from collections import defaultdict, deque def tree_distances(n, queries, edges): # Create an adjacency list to store the tree tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # Function to perform DFS and compute distances from the root (1) def dfs(node, parent, distance, dist): dist[node] = distance for neighbor, weight in tree[node]: if neighbor != parent: dfs(neighbor, node, distance + weight, dist) # Store distances from root dist_from_root = {} # Start DFS from the root (1) to calculate distances dfs(1, None, 0, dist_from_root) # Precompute LCA using Binary Lifting LOG = 17 up = [[-1] * LOG for _ in range(n + 1)] depth = [0] * (n + 1) def preprocess_lca(node, parent): up[node][0] = parent for i in range(1, LOG): if up[node][i-1] != -1: up[node][i] = up[up[node][i-1]][i-1] for neighbor, weight in tree[node]: if neighbor != parent: depth[neighbor] = depth[node] + 1 preprocess_lca(neighbor, node) preprocess_lca(1, -1) def lca(u, v): if depth[u] < depth[v]: u, v = v, u diff = depth[u] - depth[v] for i in range(LOG): if diff & (1 << i): u = up[u][i] if u == v: return u for i in range(LOG - 1, -1, -1): if up[u][i] != up[v][i]: u = up[u][i] v = up[v][i] return up[u][0] results = [] for u, v in queries: ancestor = lca(u, v) distance = dist_from_root[u] + dist_from_root[v] - 2 * dist_from_root[ancestor] results.append(distance) return results"},{"question":"Alex is fascinated by numbers and loves playing with various mathematical operations. Recently, Alex came across an interesting problem and needs your help to solve it. Alex has two arrays of integers, `A` and `B`, each containing `n` elements. He wants to create a new array `C` of length `n` which contains the minimum possible values for each index `i` such that: [ C_i = min(A_i, B_i) ] However, there\'s a twist. Alex wants to ensure that the absolute difference between the maximum and minimum values in the resulting array `C` is as small as possible. Your task is to help Alex find the array `C` and print the absolute difference between the maximum and minimum values in `C`. # Input The first line contains an integer `n` (1 le n le 10^5), the length of arrays `A` and `B`. The second line contains `n` integers representing the elements of array `A` (1 le A_i le 10^9). The third line contains `n` integers representing the elements of array `B` (1 le B_i le 10^9). # Output Print a single integer representing the absolute difference between the maximum and minimum values of the array `C`. # Example Input ``` 5 4 1 8 3 5 2 9 3 7 6 ``` Output ``` 5 ``` # Explanation In the given example, the resulting array `C` could be: [ C = [2, 1, 3, 3, 5] ] The maximum value in `C` is `5` and the minimum value is `1`. So the absolute difference is: [ |5 - 1| = 4 ]","solution":"def min_abs_difference(n, A, B): Computes the minimum absolute difference between the maximum and minimum values in the array C, where C_i = min(A_i, B_i). C = [min(A[i], B[i]) for i in range(n)] return max(C) - min(C)"},{"question":"Sherzod is a big fan of integer sequences and today he is experimenting with them. He has an integer array a consisting of n elements. Sherzod can perform the following operation multiple times: choose an integer x and remove all occurrences of x from the array a. He wants to complete this process when there are no more elements left in the array. Sherzod wonders what is the minimum number of operations to make an array empty. Can you help him figure that out? The first line contains an integer t (1 leq t leq 100), denoting the number of test cases in the input. For each test case, the first line contains an integer n (1 leq n leq 100), denoting the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100), denoting the elements of the array. For each test case, print the minimum number of operations required to make the array empty. **Example:** Input: ``` 2 3 1 2 2 5 4 4 4 3 3 ``` Output: ``` 2 2 ``` **Explanation:** In the first test case, Sherzod can choose the integer 1 to remove all its occurrences in one operation, and then choose 2 to remove all its occurrences in a second operation. So, two operations are needed. In the second test case, Sherzod can choose the integer 4 to remove all its occurrences in one operation, and then choose 3 to remove all its occurrences in a second operation. Thus, two operations are needed.","solution":"def min_operations_to_empty_array(test_cases): Given a list of test cases where each test case consists of an integer array, this function returns a list of the minimum number of operations needed to make each array empty. result = [] for case in test_cases: _, array = case unique_elements = set(array) result.append(len(unique_elements)) return result def parse_input(input_string): Parses the given input string into test cases. lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((n, array)) index += 2 return test_cases def format_output(results): Formats the list of results into the required output string. return \'n\'.join(map(str, results))"},{"question":"You are given a sequence of integers representing the stock prices of a particular company over a period of days. You need to calculate the maximum profit that can be achieved by performing a single buy and a single sell transaction. You must buy the stock before you can sell it. Each test case consists of a single line containing a sequence of integers. The first line contains one integer t (1 le t le 10000) - the number of test cases. Each test case consists of one line containing a sequence of integers separated by spaces where each integer represents the stock price on a given day. The length of the sequence can range from 2 to 100000. It is guaranteed that the total number of integers across all test cases does not exceed 1000000. Output the maximum profit that can be achieved for each test case. If no profit can be achieved, output 0 instead. For example, consider the following test cases: Input: 3 7 1 5 3 6 4 7 6 4 3 1 1 2 3 4 5 6 Output: 5 0 5 In these examples: - For the first sequence, you can make the maximum profit by buying on day 2 (price 1) and selling on day 5 (price 6), yielding a profit of 5. - For the second sequence, no transaction can provide any profit as prices continuously decrease, so the output is 0. - For the third sequence, you can make the maximum profit by buying on day 1 (price 1) and selling on day 6 (price 6), yielding a profit of 5.","solution":"def max_profit(prices): Calculate the maximum profit by performing a single buy and a single sell transaction. If no profit can be achieved, return 0. min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(test_cases): results = [] for prices in test_cases: prices = list(map(int, prices.split())) results.append(max_profit(prices)) return results"},{"question":"In a city, there are several one-way roads, each connecting two different intersections. These roads are designed in such a way that every intersection has at least one outgoing road. The city traffic authority plans to replace some of these one-way roads with two-way roads to minimize the travel time during peak hours. Given the city\'s road network and a desired number of two-way roads k, determine whether it is possible to replace exactly k one-way roads with two-way roads such that every intersection is still reachable from every other intersection. In other words, you must decide if it\'s possible to make the directed graph strongly connected by adding exactly k two-way roads. Your task is to write a program that determines if it is possible to achieve the goal for each test case. The first line contains an integer t (1 le t le 20) — the number of test cases. Then, t test cases follow. Each test case starts with two integers n and m (2 le n le 100, 1 le m le 5000) — the number of intersections and the number of one-way roads, respectively. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v) — representing a one-way road from intersection u to intersection v. Then, the last line of each test case contains an integer k (0 le k le m) — the desired number of one-way roads to be turned into two-way roads. For each test case, output \\"YES\\" if it is possible to make the directed graph strongly connected by adding exactly k two-way roads, otherwise output \\"NO\\". Each test case is followed by an empty line. Example: ``` Input 2 4 5 1 2 2 3 3 1 2 4 4 1 1 3 3 1 2 2 3 3 1 0 Output YES YES ```","solution":"def is_strongly_connected(n, edges): from collections import defaultdict, deque def bfs(start, graph): visited = [False] * n queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) visited[neighbor] = True count += 1 return count == n graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) if not bfs(0, graph): return False if not bfs(0, reverse_graph): return False return True def solve(test_cases): results = [] for n, m, edges, k in test_cases: if not is_strongly_connected(n, edges): results.append(\\"NO\\") continue if k == 0 or (n == 2 and k == 1): results.append(\\"YES\\") elif k <= m: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a social media platform where users can follow each other. You are given data describing which user follows which user. Each user can follow another user only once, and no user can follow themselves. The platform has a feed algorithm that shows posts from users someone follows directly, and also from users who are followed by those users (indirect following). The feed algorithm can be described as showing posts from all the users that are within two levels of following. For example, if user A follows user B, and user B follows user C, then user A will see posts from both user B and user C. However, if user C follows user D, user A will not see posts from user D because user D is at a third level of following. You need to determine the number of unique users whose posts a given user will see in their feed. The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), where n is the number of users and m is the number of following relationships. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that user u follows user v. The last line contains a single integer k (1 ≤ k ≤ n) representing the user for whom you need to determine the number of unique users in their feed. Output a single integer — the number of unique users in user k\'s feed. Example: Input: 5 4 1 2 2 3 3 4 4 5 1 Output: 2 Explanation: - User 1 follows user 2 - User 2 follows user 3 Thus, user 1 will see posts from user 2 and user 3.","solution":"from collections import defaultdict, deque def unique_users_in_feed(n, m, following_relations, k): Returns the number of unique users in the feed of user k. :param n: int : number of users :param m: int : number of following relationships :param following_relations: list of tuples : each tuple (u, v) means user u follows user v :param k: int : the user whose feed we need to determine :return: int : number of unique users in user k\'s feed # Build adjacency list indicating who follows whom followers = defaultdict(list) for u, v in following_relations: followers[u].append(v) # Track users within 2 levels of following from user k seen_users = set() queue = deque([(k, 0)]) # (current_user, current_level) while queue: current_user, current_level = queue.popleft() if current_level >= 2: continue for followed_user in followers[current_user]: if followed_user not in seen_users: seen_users.add(followed_user) queue.append((followed_user, current_level + 1)) # Remove user k itself from the seen_users list seen_users.discard(k) return len(seen_users)"},{"question":"You have been given an integer array `arr` of size `n` and a set of `q` queries. Each query consists of two indices `l` and `r` (0 ≤ l ≤ r < n). For each query, you need to determine the median of the subarray from index `l` to index `r` inclusive. If the subarray has an even number of elements, return the smaller of the two middle elements. Your task is to print the median value for each of the `q` queries. # Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^4) — the size of the array and the number of queries. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^5) — the elements of the array. - The following `q` lines each contain two integers `l` and `r` (0 ≤ l ≤ r < n) — the indices for each query. # Output For each query, print the median of the subarray from index `l` to index `r`. # Example Input ``` 5 3 1 3 4 2 5 1 3 0 4 2 4 ``` Output ``` 3 3 4 ``` Explanation Query 1: Subarray is `[3, 4, 2]`, sorted: `[2, 3, 4]`, median is `3`. Query 2: Subarray is `[1, 3, 4, 2, 5]`, sorted: `[1, 2, 3, 4, 5]`, median is `3`. Query 3: Subarray is `[4, 2, 5]`, sorted: `[2, 4, 5]`, median is `4`.","solution":"def find_median(n, q, arr, queries): def get_median(subarray): subarray.sort() mid = len(subarray) // 2 if len(subarray) % 2 == 0: return subarray[mid - 1] # return the smaller of the middle two elements else: return subarray[mid] results = [] for l, r in queries: subarray = arr[l:r+1] median = get_median(subarray) results.append(median) return results"},{"question":"A company has m employees, each identified by a unique ID from 1 to m. The company\'s office has k cubicles arranged in a line, numbered from 1 to k. Due to social distancing measures, there are constraints on which cubicles certain employees can use. You are given a list of reserved cubicles and a list of constraints for each employee specifying the cubicles they are not allowed to occupy. Your task is to assign each employee to exactly one cubicle such that no two employees share the same cubicle and that all constraints are respected. Output \\"Yes\\" if it is possible to assign cubicles to all employees according to the given constraints, otherwise output \\"No\\". The first line of the input contains two integers m and k (1 ≤ m ≤ 1000, 1 ≤ k ≤ 1000) — the number of employees and the number of cubicles. The second line contains an integer r (0 ≤ r ≤ k) — the number of reserved cubicles. The third line contains r distinct integers denoting the indices of reserved cubicles. Each of the next m lines describes the constraints for one employee. The i-th of these lines starts with an integer ci (0 ≤ ci ≤ k), which is followed by ci distinct integers denoting the cubicles that the i-th employee cannot be assigned to. Output \\"Yes\\" if it is possible to assign cubicles to all employees according to the given constraints, otherwise output \\"No\\".","solution":"def can_assign_cubicles(m, k, reserved, constraints): Determines if it\'s possible to assign each of m employees a unique cubicle out of k cubicles, respecting reserved cubicles and individual employee constraints. Parameters: - m: number of employees - k: number of cubicles - reserved: list of reserved cubicle indices - constraints: list of lists where each inner list contains cubicles an employee cannot use Returns: - \\"Yes\\" if all employees can be assigned a cubicle; otherwise \\"No\\" # Available cubicles available_cubicles = set(range(1, k + 1)) - set(reserved) # Employee and constraints data employees_constraints = [] for constraint in constraints: employees_constraints.append(set(constraint)) # Allocation map, initially all None allocation = [None] * m def can_allocate(employee_idx): if employee_idx == m: return True for cubicle in list(available_cubicles - employees_constraints[employee_idx]): allocation[employee_idx] = cubicle available_cubicles.remove(cubicle) if can_allocate(employee_idx + 1): return True available_cubicles.add(cubicle) allocation[employee_idx] = None return False if can_allocate(0): return \'Yes\' return \'No\'"},{"question":"You are given an array of integers where each element represents a height of a building. The goal is to find the maximum water that can be trapped between these buildings when it rains. The heights of the buildings are given in an array `heights` of length `n` where `n` is the number of buildings. The width of each building is 1. You need to calculate the total amount of trapped water across all the buildings. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of buildings. - The second line contains `n` space-separated integers `heights[i]` (0 ≤ heights[i] ≤ 10^4) — the heights of the buildings. # Output - Print a single integer, the total amount of trapped water. # Example Input ``` 6 0 1 2 1 2 0 ``` Output ``` 1 ``` # Note For the given example, the trapped rainwater structure looks as follows: ``` _ | | _ _ | | | | | | | | | | | |XXX| |XXX| | 0 1 2 1 2 0 ``` The amount of trapped water is 1 unit.","solution":"def trap_water(heights): if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"In a small town, there is a unique postal system where postmen sometimes need to share segments of their delivery routes to optimize their workload. Routes are defined by a series of points on a 2D grid, and the town wants to find if any two routes overlap — that is, if they share any common segments. Two routes are said to overlap if there exists at least one segment (a straight line between two consecutive points) that is common to both routes. The segments are defined by pairs of endpoints on a 2D grid where the coordinates of the points are integers. Your task is to determine if there is any overlap between the given routes. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of routes. - The next `n` blocks describe each route. Each block starts with an integer `m` (2 ≤ m ≤ 100,000), the number of points in the route, followed by `m` lines with two integers `x` and `y` (|x|, |y| ≤ 10^9) representing the coordinates of the points in the 2D plane in the order they are visited. Output: - Print \\"YES\\" if there is at least one common segment between any two different routes, otherwise print \\"NO\\". Example: Input: ``` 2 4 1 1 3 1 3 3 1 3 3 2 1 2 3 4 3 ``` Output: ``` YES ``` Note: In this example, the first route forms a square, and the second route intersects with it, thus having a common segment between (3, 1) and (3, 3).","solution":"def are_routes_overlapping(routes): This function takes as input a list of routes where each route is described by a list of points (tuples of x, y coordinates). It checks if there is any overlap of segments between any two routes. Returns \\"YES\\" if there is at least one overlapping segment; otherwise \\"NO\\". from collections import defaultdict segments_map = defaultdict(list) for route_index, route in enumerate(routes): m = len(route) for i in range(1, m): x1, y1 = route[i-1] x2, y2 = route[i] segment = (min((x1, y1), (x2, y2)), max((x1, y1), (x2, y2))) segments_map[segment].append(route_index) if len(segments_map[segment]) > 1: return \\"YES\\" return \\"NO\\" def parse_input(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) index = 1 routes = [] for _ in range(n): m = int(lines[index]) route = [] for j in range(m): x, y = map(int, lines[index + 1 + j].split()) route.append((x, y)) routes.append(route) index += m + 1 return routes"},{"question":"Given an array of integers, determine if there exists a subarray (contiguous subsequence) with a sum equal to zero. # Problem Statement You are given an integer array `arr` of length `n` (1 ≤ n ≤ 10^5) where each element of the array lies between -10^9 and 10^9. Write a program that determines if there exists a subarray within `arr` whose sum is equal to zero. # Input - The first line contains an integer `n` — the number of elements in the array. - The second line contains `n` space-separated integers, denoting the elements of the array `arr`. # Output - Print \\"YES\\" if there exists a subarray with a sum of zero, otherwise print \\"NO\\". # Examples Input ``` 5 4 -2 -1 1 2 ``` Output ``` YES ``` Input ``` 4 1 2 3 4 ``` Output ``` NO ``` # Note In the first example, the subarray `[-2, -1, 1, 2]` sums to zero. In the second example, there is no subarray that sums to zero. # Constraints - 1 ≤ n ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9","solution":"def subarray_sum_zero(arr): Determines if there exists a subarray with sum equal to zero. prefix_sum = 0 seen_sums = set() for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in seen_sums: return \\"YES\\" seen_sums.add(prefix_sum) return \\"NO\\""},{"question":"Robot factories were a staple of high-tech production on a distant planet. However, a systemic issue arose where network lag caused the synchronization between the assembly lines to fall out of sync. The robots in the factory need to communicate to ensure tasks are evenly distributed. Your job is to write a program to determine the minimum number of communications each robot must send to ensure even distribution of tasks. The robots can be represented as nodes on a graph, where each node is connected to one or multiple other nodes through edges. The goal is to determine the minimum number of edges that need to be traversed to check all possible pairs of robots can communicate with each other (directly or indirectly). The input contains: - An integer `n` (2 ≤ n ≤ 1,000,000) representing the number of robots (nodes). - An integer `m` (1 ≤ m ≤ 1,000,000) representing the number of communication lines (edges). - m pairs of integers `u` and `v` (1 ≤ u, v ≤ n) denoting that there is a communication line between robot `u` and robot `v`. Output: - A single integer representing the minimum number of communications required. If it\'s impossible for all robots to communicate, print \\"IMPOSSIBLE\\". Example input: ``` 4 4 1 2 2 3 3 1 4 2 ``` Example output: ``` 3 ``` Explanation: In the example, nodes 1, 2, and 3 form a connected component. Node 4 can communicate with this component through node 2. Therefore, only 3 communications are necessary to ensure all robots can communicate. The edge (3, 1) is unnecessary.","solution":"def count_communications(n, m, edges): from collections import defaultdict, deque if n == 0: return \\"IMPOSSIBLE\\" if n == 1: return 0 # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform BFS to count the number of connected components def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) components += 1 if components == 1: return n - 1 # Minimum edges in a connected graph with n nodes is n-1 else: return \\"IMPOSSIBLE\\" # Example usage n = 4 m = 4 edges = [(1, 2), (2, 3), (3, 1), (4, 2)] print(count_communications(n, m, edges)) # Expected output: 3"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. The weight of a path in the graph is the sum of the weights of the edges in the path. Your task is to find and print the maximum possible weight of any path in this graph. You are guaranteed that the graph is connected. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of nodes and edges in the graph. The following m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000, u ≠ v), describing an edge between node u and node v with weight w. Print one integer — the maximum weight of a path in the graph. Example: Input: 4 5 1 2 3 2 3 4 3 4 5 1 4 1 2 4 2 Output: 12","solution":"from heapq import heappush, heappop def prims_maximum_spanning_tree(n, edges): # Convert the graph to adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) vis = [False] * (n + 1) max_weight = 0 max_heap = [(-0, 1)] # Max heap initialized with the starting node while max_heap: weight, u = heappop(max_heap) if vis[u]: continue vis[u] = True max_weight -= weight for v, w in graph[u]: if not vis[v]: heappush(max_heap, (-w, v)) # Return the maximum weight of the spanning tree path return max_weight def maximum_path_weight(n, m, edge_list): return prims_maximum_spanning_tree(n, edge_list) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) edge_list = [] for i in range(m): u, v, w = int(data[3 * i + 2]), int(data[3 * i + 3]), int(data[3 * i + 4]) edge_list.append((u, v, w)) print(maximum_path_weight(n, m, edge_list))"},{"question":"An orphanage is organizing a sports day for the kids, and they have several games lined up. One of the games involves setting up a number of hurdles that each child must jump over to win points. The hurdles are placed at specific points along a straight line, and each hurdle has a different height. Kids can only jump over hurdles that are within their jumping capacity, which is the maximum height they can jump. Each child starts at position x=0 and can move to the right, jumping over hurdles as they encounter them. The children are not allowed to go back to a previously crossed hurdle, and they can only jump over hurdles that are at most their jump height. You need to find out how many points each child can score based on their jumping capacity, where the point for each hurdle is simply 1. **Input:** - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of hurdles and the number of children. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000,000), where hi is the height of the i-th hurdle. - The next q lines each contains a single integer j (1 ≤ j ≤ 1,000,000,000), which represents the jumping capacity of a child. **Output:** - For each child\'s jumping capacity, output the maximum number of hurdles they can jump over. **Example:** ``` Input: 5 3 1 2 3 4 5 2 3 5 Output: 2 3 5 ``` **Explanation:** - With a jumping capacity of 2, the child can jump over the first two hurdles (heights 1 and 2). - With a jumping capacity of 3, the child can jump over the first three hurdles (heights 1, 2, and 3). - With a jumping capacity of 5, the child can jump over all the hurdles (heights 1, 2, 3, 4, and 5).","solution":"def max_hurdles_jumped(n, q, hurdles, queries): Determines the maximum number of hurdles each child can jump over based on their jumping capacity. Parameters: - n : int : number of hurdles - q : int : number of children - hurdles : List[int] : heights of the hurdles - queries : List[int] : jumping capacities of the children Returns: - List[int] : the number of hurdles each child can jump over for each jumping capacity hurdles.sort() result = [] for capacity in queries: low, high = 0, n while low < high: mid = (low + high) // 2 if hurdles[mid] <= capacity: low = mid + 1 else: high = mid result.append(low) return result # Example usage n = 5 q = 3 hurdles = [1, 2, 3, 4, 5] queries = [2, 3, 5] print(max_hurdles_jumped(n, q, hurdles, queries)) # Output: [2, 3, 5]"},{"question":"Alyssa loves to play the game \\"Word Morph\\". In this game, she is given a starting word and a target word, both of which have the same length. The only allowed move in the game is to change exactly one letter from the current word to transform it into another valid word, where a valid word is one that can be found in a given dictionary of words. Alyssa wants to find the minimum number of moves required to transform the starting word into the target word, or determine if it\'s impossible to do so using the given dictionary. Your task is to write a function that calculates the minimum number of moves needed to transform the given starting word into the target word using the provided dictionary. The first line of input contains the starting word and the target word, each having the same length and consisting of lowercase English letters only. The second line contains an integer n (1 ≤ n ≤ 10^5), the number of words in the dictionary. The following n lines contain words in the dictionary, each consisting of lowercase English letters only and having the same length as the starting and target words. If it is possible to transform the starting word into the target word, print the minimum number of moves. Otherwise, print -1. Example: Input: ``` hit cog 6 hot dot dog lot log cog ``` Output: ``` 4 ``` Explanation: The sequence of transformations is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" with a total of 4 moves.","solution":"from collections import deque def is_one_letter_difference(word1, word2): Helper function to check if two words differ by exactly one letter. count = 0 for a, b in zip(word1, word2): if a != b: count += 1 if count > 1: return False return count == 1 def min_word_morph(start_word, target_word, words_dict): Returns the minimum number of moves required to transform the start_word into the target_word using the given words_dict. if start_word == target_word: return 0 words_dict = set(words_dict) if target_word not in words_dict: return -1 queue = deque([(start_word, 0)]) # (current_word, steps) visited = set([start_word]) while queue: current_word, steps = queue.popleft() for word in list(words_dict): if is_one_letter_difference(current_word, word): if word == target_word: return steps + 1 if word not in visited: visited.add(word) queue.append((word, steps + 1)) return -1"},{"question":"You have a circular river with circumference C. There are n bridges placed around the river at distinct positions. The i-th bridge is located at position b_i. You want to travel around the river, starting at any bridge, and return to the same bridge, using a set of bridges. Additionally, the total distance traveled must be at most d. Determine if it is possible to complete such a journey starting at any bridge. If possible, print \\"YES\\", otherwise print \\"NO\\". The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains two integers n and d (1 le n le 10^3, 1 le d le 10^6) — the number of bridges and the maximum distance you can travel. The second line contains n integers b_1, b_2, dots, b_n (0 le b_i < C), representing the positions of the bridges. Note that b_i are distinct integers and sorted in non-decreasing order. For each test case, print \\"YES\\" if it is possible to start at any bridge, travel a distance of at most d, and return to the starting bridge using other bridges. Otherwise, print \\"NO\\". In the first sample, there are 3 bridges, and it\'s possible to travel a full circle without exceeding the distance. In the second sample, the maximum distance is less than the distance between some bridges, making it impossible to travel the required route.","solution":"def can_travel_circularly(n, d, bridges): for i in range(n): dist = 0 for j in range(1, n): dist += bridges[(i + j) % n] - bridges[(i + j - 1) % n] if dist > d: return \\"NO\\" if dist + (bridges[(i + n) % n] + n * bridges[i]) - bridges[(i + n - 1) % n] <= d: return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for n, d, bridges in test_cases: results.append(can_travel_circularly(n, d, bridges)) return results"},{"question":"Ali and Bela are playing a game with two strings of equal length. Initially, both strings consist of lowercase English letters. The goal of the game is to make the strings identical by switching characters between the two strings. However, switching characters is only allowed if the characters being switched are different. You are tasked with finding the minimum number of switch operations required to make the two strings identical. If it is not possible to make the strings identical, return -1. Your input consists of two strings, `s1` and `s2`, both of length `n` (1 ≤ n ≤ 100000). Your output should be a single integer, the minimum number of switch operations required, or -1 if it is not possible to make the strings identical. **Example:** **Input:** ``` abc bca ``` **Output:** ``` 2 ``` **Explanation:** One possible sequence of switches is: 1. Switch `a` from `s1` with `b` from `s2`, resulting in `s1 = bbc` and `s2 = aca`. 2. Switch `b` from `s1` with `a` from `s2`, resulting in `s1 = abc` and `s2 = bca`. Now both strings are identical.","solution":"def min_switch_operations(s1, s2): Returns the minimum number of switch operations required to make the strings s1 and s2 identical, or -1 if it is not possible. if sorted(s1) != sorted(s2): return -1 swaps = 0 for i in range(len(s1)): if s1[i] != s2[i]: for j in range(i + 1, len(s1)): if s1[j] != s2[j] and s1[i] == s2[j] and s2[i] == s1[j]: s1 = s1[:i] + s1[j] + s1[i+1:j] + s1[i] + s1[j+1:] s2 = s2[:i] + s2[i] + s2[i+1:j] + s2[j] + s2[j+1:] swaps += 1 break else: # No exact match found, do a more complex swap for j in range(i + 1, len(s1)): if s1[j] != s2[j] and (s1[j] == s2[i] or s2[j] == s1[i]): s1 = s1[:i] + s1[j] + s1[i+1:j] + s1[i] + s1[j+1:] s2 = s2[:i] + s2[i] + s2[i+1:j] + s2[j] + s2[j+1:] swaps += 1 break return swaps"},{"question":"Santa Claus is getting ready for Christmas and needs to gather a team of reindeer to pull his sleigh. He has n reindeer, each with a specific pulling power. Santa wants to choose the strongest team of k reindeer such that no two selected reindeer have consecutive numbers. You are to help Santa select the team with the maximum total pulling power. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 * 105) — the number of reindeer and the number of reindeer Santa needs to choose. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 109) — the pulling power of each reindeer. Print a single integer — the maximum total pulling power of the selected team. Example: Input: 6 2 5 2 8 3 5 7 Output: 15","solution":"def max_pulling_power(n, k, power): Find the maximum total pulling power of the selected team of k reindeer such that no two selected reindeer have consecutive numbers. :param n: Integer, the number of reindeer :param k: Integer, the number of reindeer needed :param power: List of integers, the pulling power of each reindeer :return: Integer, the maximum total pulling power # Create a dp array to store the results of subproblems dp = [[0] * (k + 1) for _ in range(n + 1)] # Build the dp table from bottom up for i in range(1, n + 1): for j in range(1, k + 1): # Choose the current reindeer choose = power[i - 1] + (dp[i - 2][j - 1] if i >= 2 else 0) # Skip the current reindeer skip = dp[i - 1][j] # Take the maximum of both choices dp[i][j] = max(choose, skip) return dp[n][k] # Example usage: # n = 6, k = 2 # power = [5, 2, 8, 3, 5, 7] # result = max_pulling_power(n, k, power) # print(result) # Output: 15"},{"question":"The city of Codeville has a peculiar way of numbering its houses. Each house has a unique number, and these numbers are arranged in a sequence according to a special pattern. After years of being accustomed to this pattern, the inhabitants have started wondering if their house numbers form an arithmetic progression. You are given the numbers of three houses in Codeville, and you need to determine whether these numbers form an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers in which the difference of any two successive members is a constant. For instance, the sequence 3, 7, 11 is an arithmetic progression with a common difference of 4. Write a program that takes the numbers of three houses and determines if they form an arithmetic progression. If they do, print \\"YES\\", otherwise print \\"NO\\". The first and only line of input contains three integers h1, h2, and h3 (1 le h1, h2, h3 le 10^9). Output \\"YES\\" if the house numbers form an arithmetic progression, otherwise print \\"NO\\". For example: 1. Input: 3 7 11 Output: YES 2. Input: 1 2 4 Output: NO","solution":"def is_arithmetic_progression(h1, h2, h3): Determines if the given house numbers form an arithmetic progression. Parameters: h1 (int): The number of the first house. h2 (int): The number of the second house. h3 (int): The number of the third house. Returns: str: \\"YES\\" if the numbers form an arithmetic progression, otherwise \\"NO\\". # Sort the house numbers houses = sorted([h1, h2, h3]) # Check if the differences between the numbers are constant, indicating an AP if houses[1] - houses[0] == houses[2] - houses[1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Eve is participating in a treasure hunt. She has a list of coordinates that define a path conjoining the treasures. The path is a series of straight lines connecting these points without any intersections. Eve is standing at one of these points and wants to calculate the maximum number of treasure points she can visit through the path using at most k moves. You need to help Eve to determine the optimal path that visits the maximum number of distinct points. For simplicity, you can assume: - Eve can move either directly between any two adjacent points or simply skip a point by making a direct jump to the next one, counting as a move. - Eve will always start at point 1 and her journey will terminate once she has exhausted k moves or visited all points. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 500), the number of points and the maximum moves Eve can perform, respectively. The next n lines contain two space-separated integers x and y (-10^4 ≤ x, y ≤ 10^4) indicating the coordinates of the points in the path. Print one integer - the maximum number of distinct points Eve can visit using at most k moves. # Example Input ``` 5 3 0 0 1 2 2 4 3 6 4 8 ``` # Example Output ``` 4 ``` # Explanation Eve starts at the first point (0, 0). With 3 moves, she can directly jump to (1, 2), from there to (3, 6), and lastly to (4, 8). This way she visits 4 points in total.","solution":"def max_points_visited(n, k, points): Returns the maximum number of distinct points that can be visited using at most k moves. Parameters: n (int): The number of points. k (int): The maximum number of moves. points (list of tuples): The coordinates of the points. Returns: int: The maximum number of distinct points that can be visited. # Initialize variables visited_points = 1 # Starting at the first point moves_used = 0 # Iterate through the points for i in range(1, n): if moves_used < k: visited_points += 1 moves_used += 1 else: break return visited_points # Example usage n = 5 k = 3 points = [(0, 0), (1, 2), (2, 4), (3, 6), (4, 8)] print(max_points_visited(n, k, points)) # Output: 4"},{"question":"In a chess tournament, players gain points based on their performance in each round. You are given a matrix where each element represents the outcome of a match between two players. The score of a match between players i and j in the i-th row and j-th column is: - 1 if the player i wins the match. - 0 if the match is a draw. - -1 if the player i loses the match. Your task is to determine the total score for each player and identify the player with the highest total score. If there are multiple players with the same highest score, return the player with the smallest index (1-based index). The input consists of: - An integer n (2 leq n leq 100) representing the number of players. - An n times n matrix of integers where each element is 1, 0, or -1. The output should be: - An integer representing the index of the player with the highest total score. Example: Input: ``` 3 0 1 -1 -1 0 1 1 -1 0 ``` Output: ``` 1 ``` Explanation: - Player 1 wins against Player 2 and loses to Player 3, total score = 1 + (-1) = 0 - Player 2 loses to Player 1 and wins against Player 3, total score = (-1) + 1 = 0 - Player 3 wins against Player 1 and loses to Player 2, total score = 1 + (-1) = 0 Since all players have the same score of 0, the player with the smallest index (Player 1) is returned.","solution":"def find_highest_scorer(n, results): Returns the index (1-based) of the player with the highest total score. If there are multiple players with the same highest score, returns the player with the smallest index. scores = [0] * n # Calculate the total score for each player for i in range(n): for j in range(n): scores[i] += results[i][j] # Find the player with the highest score. If there\'s a tie, choose the player with the smallest index max_score = max(scores) for index, score in enumerate(scores): if score == max_score: return index + 1"},{"question":"You are given an array of integers representing the marks scored by students in a class. Your task is to find the maximum difference in marks between any two students such that the student scoring higher marks is positioned after the student scoring lower marks in the array. The maximum difference is defined as: text{max_difference} = max(a_j - a_i) text{for} text{all} i < j The first line of the input contains a single integer n (1 le n le 10^5) — the number of students. The second line of the input contains n integers a_1, a_2, ..., a_n (0 le a_i le 10^9), where a_i represents the marks of the i-th student. Print a single integer denoting the maximum difference in marks between any two students where the student scoring higher marks appears after the student scoring lower marks in the array. If no such pair exists, print 0. # Example Input: 5 1 2 6 4 5 Output: 5 Input: 4 7 9 5 6 Output: 2 Input: 7 5 3 2 4 1 6 2 Output: 5","solution":"def find_max_difference(n, marks): if n <= 1: return 0 max_diff = 0 min_mark = marks[0] for i in range(1, n): max_diff = max(max_diff, marks[i] - min_mark) min_mark = min(min_mark, marks[i]) return max_diff # Examples print(find_max_difference(5, [1, 2, 6, 4, 5])) # Output: 5 print(find_max_difference(4, [7, 9, 5, 6])) # Output: 2 print(find_max_difference(7, [5, 3, 2, 4, 1, 6, 2])) # Output: 5"},{"question":"Tom is setting up a new networking system for his company. He has been given a network with n computers each represented by a node, and m direct connections between pairs of computers each represented by an edge where each edge has an associated latency. Tom aims to optimize the network by determining how much latency can be avoided with certain configurations. Specifically, he wants to find the minimum possible latency for reaching all computers from a specific starting computer using a spanning tree. A spanning tree is a subset of the network where all nodes are connected without any cycles and the sum of the latencies is minimized. The first line contains two integers n and m (1 ≤ n, m ≤ 2 x 10^5) — the number of computers and the number of direct connections respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — indicating that there is a direct connection between computer u and computer v with a latency w. Tom wants to start from computer 1. Calculate the minimum possible total latency for a spanning tree that includes all n computers starting from computer 1. Print a single integer — the minimum total latency for the spanning tree. If there is no way to connect all computers using the given connections, print -1. Example: Input: 4 5 1 2 1 1 3 2 2 3 2 2 4 3 3 4 3 Output: 6 Explanation: The optimal spanning tree can be {1-2, 1-3, 2-4} with a total latency of 6.","solution":"import heapq def minimum_spanning_tree_latency(n, m, edges): Calculate the minimum total latency for a spanning tree including all n computers starting from computer 1. Args: n : int : number of computers m : int : number of direct connections edges : List[Tuple[int, int, int]] : list of connections in the form (u, v, w) Returns: int : minimum total latency for the spanning tree; -1 if it is not possible to connect all computers. # Create an adjacency list adjacency_list = [[] for _ in range(n + 1)] for u, v, w in edges: adjacency_list[u].append((w, v)) adjacency_list[v].append((w, u)) # Prim\'s algorithm to find the minimum spanning tree min_heap = [(0, 1)] # (weight, start_node) total_latency = 0 visited = set() while min_heap: weight, node = heapq.heappop(min_heap) if node in visited: continue visited.add(node) total_latency += weight for next_weight, next_node in adjacency_list[node]: if next_node not in visited: heapq.heappush(min_heap, (next_weight, next_node)) return total_latency if len(visited) == n else -1"},{"question":"A farmer has a rectangular plot of land that he wants to divide into several smaller plots. The land has a length of n meters and a width of m meters. The farmer wants to set up a grid system in such a way that each smaller plot is a perfect square of side length k meters. The squares can be placed without any rotation but must fill the area from the top-left corner without exceeding the boundaries of the larger rectangle. Given the dimensions of the land and the side length of the smaller plots, write a program that calculates the maximum number of smaller plots that the farmer can place on his land. # Input * The first line contains three integers n, m, and k (1 le n, m, k le 10^9) — the length and the width of the land and the side length of each smaller plot. # Output * Print a single integer — the maximum number of smaller plots of side length k meters that the farmer can place on the land. # Example Input ``` 8 6 2 ``` Output ``` 12 ``` Input ``` 5 4 3 ``` Output ``` 1 ``` # Note In the first example, the land is 8 by 6 meters and the smaller plots are 2 by 2 meters. The farmer can fit 4 plots along the length and 3 plots along the width, making a total of 4 * 3 = 12 plots. In the second example, the land is 5 by 4 meters and the smaller plots are 3 by 3 meters. The farmer can only fit one plot because two plots along any dimension would exceed the boundaries.","solution":"def max_smaller_plots(n, m, k): Calculates the maximum number of smaller plots (perfect squares) that can fit into the rectangular land. Parameters: n (int): The length of the land. m (int): The width of the land. k (int): The side length of each smaller plot. Returns: int: The maximum number of smaller plots. plots_along_length = n // k plots_along_width = m // k return plots_along_length * plots_along_width"},{"question":"You are given an array of integers with size n. We define a segment in the array as an interval [l, r] (1 ≤ l ≤ r ≤ n). The sum of a segment [l, r] is defined as the sum of the elements from index l to r, inclusive. You need to handle q queries, each query specifies an integer x. Your task is to find if there exists a segment [l, r] such that the sum of that segment is exactly x. If such a segment exists, output the indices l and r (1-based). If there are multiple valid segments, return the one with the shortest length. If there\'s still a tie, return the segment which appears earliest (smallest l). If no such segment is found, return -1. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) - the size of the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) representing the elements of the array. The next q lines contain q integers x (|x| ≤ 10^18), one in each line, representing the target sums to be checked. For each query, output two integers l and r if such a segment exists, otherwise, output -1. Example: Input: 5 3 1 2 3 4 5 5 15 7 Output: 2 3 1 5 3 4 In the first query, the segment [2, 3] (elements 2 and 3) sums to 5. In the second query, the segment [1, 5] (elements 1, 2, 3, 4, 5) sums to 15. In the third query, the segment [3, 4] (elements 3 and 4) sums to 7. Note: - You can assume each query will be processed independently.","solution":"def find_segment_with_sum(arr, queries): n = len(arr) results = [] # With the use of prefix sums, we can quickly compute the sum of any subarray. prefix_sums = {0: 0} # Dictionary to store (prefix_sum: ending_index) current_sum = 0 for i in range(n): current_sum += arr[i] prefix_sums[current_sum] = i + 1 for x in queries: found = False for l in range(n): current_sum = arr[l] if current_sum == x: results.append((l + 1, l + 1)) found = True break for r in range(l + 1, n): current_sum += arr[r] if current_sum == x: results.append((l + 1, r + 1)) found = True break if found: break if not found: results.append(-1) return results"},{"question":"In the early morning, Nils found a gift card from a famous tech store with a value of D dollars. He can use this gift card to purchase one or multiple items in the store. Each item in the store has a price pi. Nils wants to spend the gift card as effectively as possible, which means getting the maximum value of items that he can buy. Write a function that will help Nils determine the maximum value of items he can purchase without exceeding the value of the gift card. The first input line contains two integers n and D (1 ≤ n ≤ 100, 1 ≤ D ≤ 1000) — the number of items in the store and the value of the gift card, respectively. The second line contains n integers representing the prices of the items in the store. Your task is to print one integer — the maximum value of the items that Nils can buy with the gift card. In the first example, the answer is 9 because Nils can buy the items with prices 3 and 6 totaling 9. In the second example, the answer is 12 because Nils can buy the items with prices 5, 3, and 4 totaling 12. # Example **Input:** ``` 5 10 3 2 5 8 6 ``` **Output:** ``` 10 ``` **Input:** ``` 4 15 7 3 5 8 ``` **Output:** ``` 12 ```","solution":"def max_value(n, D, prices): dp = [0] * (D + 1) for price in prices: for d in range(D, price - 1, -1): dp[d] = max(dp[d], dp[d - price] + price) return dp[D]"},{"question":"Olaf is a ski-jumping enthusiast, and he loves analyzing the jumps from different contestants. A ski-jump consists of three segments: takeoff, flight, and landing. Given the heights of the ramp at various points, Olaf wants to find out the maximum height difference a contestant would encounter between any two points during their jump. The heights are given in an array, where each element represents the height at a specific point along the ramp. The height difference between two points is defined as the absolute difference between their heights. Write a function to calculate the maximum height difference a contestant can encounter. The input consists of two lines: - The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of points on the ramp. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) — the heights of the ramp at each point. Output a single integer, the maximum height difference between any two points on the ramp. For example: ``` Input: 5 1 3 2 5 4 Output: 4 Input: 6 10 10 10 10 10 10 Output: 0 ``` In the first test case, the maximum height difference is between the points with heights 1 and 5, which is |5-1| = 4. In the second test case, all points have the same height, so the maximum height difference is 0.","solution":"def max_height_difference(n, heights): Returns the maximum height difference between any two points on the ramp. :param n: number of points on the ramp :param heights: list of heights at each point :return: maximum height difference min_height = min(heights) max_height = max(heights) return max_height - min_height"},{"question":"You are given n piles of stones where the i-th pile has ai stones. You need to divide these piles into two groups such that the difference between the total number of stones in the first group and the total number of stones in the second group is minimized. Each pile must belong to exactly one of the two groups. The first line contains an integer n (1 ≤ n ≤ 100), which is the number of piles of stones. The second line contains n integers ai (1 ≤ ai ≤ 1000), which represent the number of stones in the i-th pile. Print a single integer representing the minimum possible difference between the sum of stones in the two groups. For example: ``` Input: 5 1 2 3 4 5 Output: 1 ``` Explanation: In this example, you can divide the piles of stones into two groups as follows: - Group 1: 1, 4, 5 (total 10) - Group 2: 2, 3 (total 5) The difference is |10 - 5| = 5. Another way to divide: - Group 1: 1, 2, 3, 5 (total 11) - Group 2: 4 (total 4) The difference is |11 - 4| = 7. The minimum difference can actually be achieved by another combination: - Group 1: 1, 2, 5 (total 8) - Group 2: 3, 4 (total 7) The difference is |8 - 7| = 1. Hence, the output is 1.","solution":"def min_difference(n, stones): total_sum = sum(stones) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): dp[i][j] = dp[i - 1][j] if j >= stones[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - stones[i - 1]] min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff"},{"question":"Given a string of parentheses, your task is to determine if it\'s possible to make the string balanced by reversing at most one substring. A string of parentheses is considered balanced if: 1. Each opening bracket \'(\' has a corresponding closing bracket \')\'. 2. The brackets are correctly nested. If the string is already balanced, the output should be \\"YES\\". If it\'s possible to balance the string by reversing at most one substring, the output should also be \\"YES\\". Otherwise, the output should be \\"NO\\". **Input Format:** - The first line of the input contains a single integer n (1 ≤ n ≤ 500,000) — the length of the string. - The second line contains a string s of length n consisting of \'(\' and \')\' characters. **Output Format:** - Output a single string, either \\"YES\\" or \\"NO\\". **Examples:** ``` Input: 6 )()(() Output: YES ``` ``` Input: 4 (()) Output: YES ``` ``` Input: 3 ((() Output: NO ``` **Explanation:** In the first example, we can reverse the substring from index 1 to index 4 (0-based index) to get a balanced string: `(()())`. In the second example, the string is already balanced. In the third example, it is not possible to balance the string by reversing any substring.","solution":"def can_be_balanced(n, s): Determines if the string can be balanced by reversing at most one substring. Parameters: n (int): The length of string s. s (str): A string of parentheses. Returns: str: \\"YES\\" if the string can be balanced, \\"NO\\" otherwise. def is_balanced(s): Helper function to check if the string is balanced. balance = 0 for char in s: if char == \'(\': balance += 1 else: balance -= 1 if balance < 0: return False return balance == 0 # Check if the string is already balanced if is_balanced(s): return \\"YES\\" # If not already balanced, let\'s try to see if reversing a part helps for i in range(n): for j in range(i, n): # Create a new string with the substring (i, j) reversed new_s = s[:i] + s[i:j+1][::-1] + s[j+1:] if is_balanced(new_s): return \\"YES\\" return \\"NO\\""},{"question":"You\'re engaged in controlling a network system where packets of data are transmitted between servers. Each link between two servers has a certain latency associated with it. Given a network topology and the importance of minimizing the communication delay, your task is to determine the minimum possible latency between a given source server and a target server. If there is no available path, return -1. The first line contains three integers: the number of servers n (2 ≤ n ≤ 100), the number of links m (1 ≤ m ≤ 10,000), and the source server s (1 ≤ s ≤ n). Each of the next m lines describes a link between two servers. The ith line contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000), where u and v are the servers connected by the link, and l is the latency of that link. Output a single integer which is the minimum latency from source server s to all other servers. If it is impossible to reach a server from the source, return -1 for that server. For example, consider the following network data as input: ``` 4 5 1 1 2 4 1 3 2 2 3 1 2 4 5 3 4 6 ``` The minimum latencies from server 1 to other servers are: Server 1 to Server 2: 3 Server 1 to Server 3: 2 Server 1 to Server 4: 8 Output: ``` 0 3 2 8 ``` If the input were: ``` 4 3 1 1 2 4 1 3 2 3 4 5 ``` Explanation: The link between servers 2 and 4 is missing, making server 4 unreachable from server 1. Output: ``` 0 4 2 -1 ```","solution":"import heapq def find_min_latency(n, m, s, links): Determines the minimum latency from the source server \'s\' to all other servers in the network. If a server is not reachable, returns -1 for that server. Parameters: n : int : Number of servers m : int : Number of links s : int : Source server (1-indexed) links : list of tuple : List of tuples where each tuple (u, v, l) represents a link Returns: list : List of minimum latencies from source server to all other servers # Convert 1-indexed server number to 0-indexed for internal processing s = s - 1 # Initialize graph as adjacency list graph = {i: [] for i in range(n)} for u, v, l in links: graph[u-1].append((v-1, l)) graph[v-1].append((u-1, l)) # Initialize distances array and priority queue dist = [float(\'inf\')] * n dist[s] = 0 pq = [(0, s)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: # Skip outdated entry in queue continue for v, length in graph[u]: new_dist = current_dist + length if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) # Replace infinite distances with -1 (unreachable) return [d if d != float(\'inf\') else -1 for d in dist]"},{"question":"In a small library, there are several shelves, each containing a number of books. The librarian wants to rearrange the books among the shelves such that the shelves are balanced. A balanced shelf means that the number of books on each shelf differs by at most one book from the other shelves after rearrangement. Given the initial number of books on each shelf, determine the minimum number of book moves needed to balance the shelves. A move consists of taking one book from a shelf that has more books and placing it on a shelf that has fewer books. # Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of shelves in the library. The second line contains n space-separated integers, where the i-th integer represents the number of books on the i-th shelf. Each integer is non-negative and less than or equal to 1000. # Output Output a single integer — the minimum number of book moves needed to balance the shelves. # Example Input 5 1 4 7 9 2 Output 6 Explanation Initially, the shelves have the following number of books: 1, 4, 7, 9, 2. After 6 moves, the number of books can be rearranged as 4, 4, 5, 5, 5, which is balanced since the number of books on any shelf differs by at most one book from the others.","solution":"def min_moves_to_balance_shelves(n, shelves): total_books = sum(shelves) average_books = total_books // n surplus_books = total_books % n moves = 0 for books in shelves: if books > average_books + (1 if surplus_books > 0 else 0): moves += books - (average_books + (1 if surplus_books > 0 else 0)) surplus_books -= 1 if surplus_books > 0 else 0 return moves"},{"question":"Given a list of n integers representing the scores in a game, find the maximum length of any subsequence such that the absolute difference between any two consecutive elements in this subsequence is at most k. The first line of input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of integers and the maximum allowed difference. The second line contains n integers a1, a2, ..., an (-10000 ≤ ai ≤ 10000) representing the scores. Print the maximum length of such a subsequence. Example: Input: 7 2 3 10 2 1 20 4 3 Output: 4 Explanation: A possible subsequence meeting the criteria is [3, 2, 1, 3] where the absolute difference between consecutive elements does not exceed 2.","solution":"def max_subseq_length_with_diff(arr, n, k): Returns the maximum length of any subsequence such that the absolute difference between any two consecutive elements in this subsequence is at most k. if not arr: return 0 # Create an array dp to store the maximum subsequence length ending at each position dp = [1] * n # Fill dp array using the relation between the elements for i in range(1, n): for j in range(i): if abs(arr[i] - arr[j]) <= k: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage # Input: 7 2 # 3 10 2 1 20 4 3 # Output: 4 n = 7 k = 2 arr = [3, 10, 2, 1, 20, 4, 3] print(max_subseq_length_with_diff(arr, n, k)) # Output should be 4"},{"question":"Sophia is passionate about creating perfect balanced binary search trees (BST) for her data structure project. Given an array of distinct integers, she wants to convert it into a balanced BST. A balanced BST is defined as a binary tree in which the height of the two subtrees of every node never differs by more than one. Sophia needs your help to construct this balanced BST from a given sorted array of distinct integers. After constructing the tree, she wants to determine the height of the entire tree. The height of a tree is the number of edges on the longest path from the root to a leaf. The input consists of a single integer n (1 ≤ n ≤ 10^5), the length of the array, followed by n distinct integers in a sorted order. Output the height of the balanced BST. For example, given the input: ``` 7 1 2 3 4 5 6 7 ``` The balanced BST would be: ``` 4 / 2 6 / / 1 3 5 7 ``` The height of this tree is 2. In another example: ``` 3 10 20 30 ``` The balanced BST would be: ``` 20 / 10 30 ``` The height of this tree is 1.","solution":"class TreeNode: Node of a binary search tree. def __init__(self, key): self.left = None self.right = None self.val = key def sorted_array_to_bst(arr): Function to convert sorted array to a balanced BST and return the root node. if not arr: return None mid = len(arr) // 2 root = TreeNode(arr[mid]) root.left = sorted_array_to_bst(arr[:mid]) root.right = sorted_array_to_bst(arr[mid+1:]) return root def height_of_bst(node): Function to calculate the height of a given BST. if node is None: return -1 left_height = height_of_bst(node.left) right_height = height_of_bst(node.right) return max(left_height, right_height) + 1 def bst_height_from_sorted_array(n, arr): if n == 0: return -1 root = sorted_array_to_bst(arr) return height_of_bst(root)"},{"question":"Alex is organizing a coding competition where each participant is required to solve m problems. Each problem has a predefined time limit, but participants can spend more than the time limit on any problem (resulting in penalties). The total time spent by a participant is the sum of the time spent on all problems. The performance of each participant is recorded in the format \\"name time_spent\\". At the end of the competition, the score of a participant is calculated as the total time spent plus the number of penalties incurred. A penalty is incurred if the time spent on a problem exceeds the given time limit for that problem. The task is to determine the participant with the lowest score (in case of a tie, the earlier participant in the input who achieved the lowest score will be the winner). The first line contains an integer m (1 ≤ m ≤ 10) - number of problems. The second line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 1000) - the time limits for each problem. The third line contains an integer n (1 ≤ n ≤ 100) - number of participants. Each of the next n lines contains a participant\'s name (a string of lower-case Latin letters of length from 1 to 32) followed by m integers which represent the time spent on each problem. Print the name of the participant with the lowest score. Example input: ``` 2 30 40 3 alice 35 50 bob 25 30 charlie 40 35 ``` Example output: ``` bob ```","solution":"def find_winner(m, time_limits, participants): Finds the participant with the lowest score. Score is calculated as total time spent plus penalties (time spent exceeding problem limits). In case of a tie, the participant listed earlier in the input wins. min_score = float(\'inf\') winner = \\"\\" for participant in participants: name = participant[0] times = participant[1:] total_time = sum(times) penalties = sum(times[i] - time_limits[i] for i in range(m) if times[i] > time_limits[i]) score = total_time + penalties if score < min_score: min_score = score winner = name return winner def parse_input(input_text): lines = input_text.strip().split(\'n\') m = int(lines[0]) time_limits = list(map(int, lines[1].split())) n = int(lines[2]) participants = [line.split() for line in lines[3:]] for i in range(n): participants[i][1:] = list(map(int, participants[i][1:])) return m, time_limits, participants"},{"question":"You are given an array of n integers and need to perform a series of operations on it. Each operation can either update the array by adding a specified integer to each element in a range or query the array to get the maximum value in a specified range. The operations are defined as follows: 1. 1 l r x - Add x to each element in the array from the l-th to the r-th position (both inclusive) 2. 2 l r - Query the array to find the maximum value in the range from the l-th to the r-th position (both inclusive) Write a program to process these operations on the given array. Input Format: - The first line contains two integers n (1 ≤ n ≤ 100000) and m (1 ≤ m ≤ 100000) representing the number of elements in the array and the number of operations respectively. - The second line contains n integers a_i (1 ≤ a_i ≤ 100000), the elements of the array. - The next m lines describe the operations. Each line starts with an integer representing the type of the operation. For type 1, it is followed by three integers l, r, x. For type 2, it is followed by two integers l, r. Output: For each operation of the second type, output the maximum value in the specified range. Example: Input: 5 4 1 2 3 4 5 1 2 4 1 2 1 5 1 3 5 2 2 2 4 Output: 5 5 Explanation: Initially, the array is [1, 2, 3, 4, 5]. - After the operation \'1 2 4 1\', the array becomes [1, 3, 4, 5, 5]. - The query \'2 1 5\' asks for the maximum value in the range [1, 5], which is 5. - After the operation \'1 3 5 2\', the array becomes [1, 3, 6, 7, 7]. - The query \'2 2 4\' asks for the maximum value in the range [2, 4], which is 7.","solution":"def process_operations(n, m, array, operations): results = [] for op in operations: if op[0] == 1: l, r, x = op[1], op[2], op[3] for i in range(l-1, r): array[i] += x elif op[0] == 2: l, r = op[1], op[2] results.append(max(array[l-1:r])) return results"},{"question":"You are given an array `a` containing `n` positive integers. Your task is to determine the length of the longest arithmetic subsequence. An arithmetic subsequence of an array is a subsequence that satisfies the condition that the difference between consecutive elements is the same. The first line of the input contains an integer `n` (1 ≤ n ≤ 2000), which is the length of the array. The second line contains `n` space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6). Output the length of the longest arithmetic subsequence in the array. # Example Input: ``` 6 3 6 9 12 15 18 ``` Output: ``` 6 ``` Input: ``` 5 1 7 10 13 14 ``` Output: ``` 3 ``` # Explanation In the first example, the whole array is an arithmetic subsequence with a common difference of 3, so the length is 6. In the second example, the longest arithmetic subsequence is [1, 7, 13] with a common difference of 3, so the length is 3. # Note To solve this problem efficiently, you may need to use dynamic programming with a way to store and update differences between pairs of elements.","solution":"def longest_arithmetic_subsequence(n, arr): if n == 1: return 1 dp = [{} for _ in range(n)] longest_length = 2 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest_length = max(longest_length, dp[i][diff]) return longest_length # Example input # n = 6 # a = [3, 6, 9, 12, 15, 18] # print(longest_arithmetic_subsequence(n, a)) # Output: 6"},{"question":"You are given a list of `n` integers. For each integer in the list, you can perform one of the following operations: 1. Decrement it by 1. 2. Increment it by 1. Your task is to make all integers in the list equal by performing the minimum number of operations. You need to write a program that calculates the minimum number of operations required to make all the integers in the list equal to the same value. The input consists of: - The first line contains an integer `n` (1 ≤ n ≤ 105) — the number of integers in the list. - The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the integers in the list. Output a single integer, the minimum number of operations needed. # Example: Input: ``` 4 1 2 3 4 ``` Output: ``` 4 ``` Explanation: To make all integers equal to 2, you can: - Increment 1 to 2 (1 operation) - Keep 2 as it is (0 operations) - Decrement 3 to 2 (1 operation) - Decrement 4 to 2 (2 operations) Total operations = 1 + 0 + 1 + 2 = 4.","solution":"def min_operations_to_equalize(nums): Returns the minimum number of operations required to make all integers in the list equal. nums.sort() median = nums[len(nums) // 2] return sum(abs(x - median) for x in nums) # Example usage: # n = 4 # nums = [1, 2, 3, 4] # print(min_operations_to_equalize(nums)) # Output: 4"},{"question":"In a distant kingdom, there is a popular game played with an array of integers. The game involves performing a series of operations on the array, where each operation can either \\"reverse\\" a subarray or \\"invert\\" each element of the subarray (i.e., replace each element `x` with `-x`). The goal is to transform the initial array into a target array using the minimal number of operations. Given an initial array and a target array of the same length, your task is to determine the minimal number of operations required to transform the initial array into the target array. Each operation can be one of the following: 1. Reverse a subarray. 2. Invert all elements of a subarray. The first line contains a single integer `n` (1 ≤ n ≤ 100) — the length of the arrays. The second line contains `n` integers — the elements of the initial array. The third line contains `n` integers — the elements of the target array. Print a single integer — the minimal number of operations required to transform the initial array into the target array. If it\'s impossible to achieve the target array from the initial array, print `-1`. **Example:** Input: ``` 5 1 2 3 4 5 5 4 3 2 1 ``` Output: ``` 1 ``` Input: ``` 3 1 2 3 -1 -2 -3 ``` Output: ``` 1 ``` Input: ``` 4 1 2 3 4 -1 -2 3 4 ``` Output: ``` 2 ``` Input: ``` 4 1 2 3 4 4 3 2 1 ``` Output: ``` 1 ```","solution":"def min_operations(n, initial, target): Calculate the minimum number of operations to transform the initial array into the target array. Args: n: int : length of the arrays initial: list : initial array target: list : target array Returns: int : minimal number of operations def can_transform_by_reversing(initial, target): return initial == target[::-1] def can_transform_by_inverting(initial, target): return initial == [-x for x in target] operations = 0 for i in range(n): if initial[i] != target[i]: break else: return operations # Arrays are already same if can_transform_by_reversing(initial, target): return 1 if can_transform_by_inverting(initial, target): return 1 for i in range(1, n+1): initial_sub, target_sub = initial[:i], target[:i] if (can_transform_by_reversing(initial_sub, target_sub) and initial_sub[::-1] + initial[i:] == target) or ( can_transform_by_inverting(initial_sub, target_sub) and [-x for x in initial_sub] + initial[i:] == target): return 2 return -1"},{"question":"In a futuristic land, there are n cities connected by n-1 bidirectional roads forming a tree structure. Each city is powered by a certain amount of energy, represented by an integer value. The energy distribution is such that when passing from one city to another, energy is lost based on the energy values of both cities. Given two connected cities u and v, the energy loss when traveling from u to v is calculated as the absolute difference of their energy values (|energy[u] - energy[v]|). The objective is to find the maximum energy loss encountered when traveling between any two cities in the land. The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of cities. The next line contains n integers e1, e2, ..., en (1 ≤ ei ≤ 1,000,000) representing the energy value of each city. Then follow n-1 lines, each containing a pair of integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the cities connected by an energy-consuming road. Print a single integer — the maximum energy loss encountered when traveling between any two cities in the land. __Example:__ Input: ``` 5 3 8 5 6 7 1 2 1 3 2 4 3 5 ``` Output: ``` 5 ``` Explanation: The maximum energy loss occurs either from city 1 (energy 3) to city 2 (energy 8) giving a loss of |3-8| = 5, or from city 2 (energy 8) to city 4 (energy 6) also giving a loss of |8-6| = 2, or from city 5 (energy 7) to another city. Considering all paths, the maximum loss is calculated to be 5.","solution":"def max_energy_loss(n, energy, edges): Returns the maximum energy loss when traveling between any two cities. :param n: Number of cities :param energy: List of energy values of each city :param edges: List of tuples representing the roads between cities :return: Maximum energy loss from collections import defaultdict # Convert to 0-index for easier list access energy = [0] + energy # Create the adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Initialize maximum energy loss as zero max_loss = 0 # Traverse all edges and calculate the energy loss for u, v in edges: loss = abs(energy[u] - energy[v]) if loss > max_loss: max_loss = loss return max_loss"},{"question":"A software development team is creating a new real-time multiplayer game. To ensure fair gameplay, they need to balance the number of players on each team dynamically. The game server receives a list of player scores and needs to decide how to split the players into two teams such that the absolute difference between the total scores of the two teams is minimized. Write a program that takes the list of player scores and outputs the minimum possible difference between the total scores of the two teams. The first line of the input contains a single integer n (1 leq n leq 100) — the number of players. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the scores of the players. Output a single integer — the minimum possible difference between the total scores of the two teams. Example: Input: ``` 4 1 2 3 4 ``` Output: ``` 0 ``` Explanation: - One optimal way to split the players is into two teams with scores [1, 4] and [2, 3]. Both teams\' total scores are 5, so the difference is 0. - Another way to split could be [1, 2, 3] and [4], with a score difference of 2, but it is not optimal.","solution":"def min_difference(n, scores): Returns the minimum possible difference between the total scores of two teams. total_sum = sum(scores) dp = [0] * (total_sum // 2 + 1) for score in scores: for j in range(total_sum // 2, score - 1, -1): dp[j] = max(dp[j], dp[j - score] + score) return abs(total_sum - 2 * dp[total_sum // 2]) # Example input n = 4 scores = [1, 2, 3, 4] print(min_difference(n, scores)) # Output: 0"},{"question":"You are given a grid with dimensions `m x n` consisting of zeros and ones. Your task is to find the size of the largest square containing only ones and return its area. # Input The input consists of several lines: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 300), which represent the number of rows and columns in the grid. - The next `m` lines each contain `n` integers (either 0 or 1), describing the grid. # Output Output a single integer, which is the area of the largest square containing only ones. # Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 4 ``` # Note In the example grid, the largest square containing only ones has a side length of 2, and thus the area is 2 * 2 = 4.","solution":"def maximal_square(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: # Only proceed if cell is \'1\' if i == 0 or j == 0: dp[i][j] = 1 # First row or first column else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side # Helper function to convert input to matrix format def process_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) matrix = [list(map(int, lines[i+1].split())) for i in range(m)] return matrix"},{"question":"John is organizing a tournament in which n players participate. Each player will compete against every other player exactly once. After the tournament, John records the scores achieved by each player. We know that if the score of player i is si (0 ≤ si ≤ 1000), then si in total matches played equals the number of matches that player i has won. Additionally, if playing between player i and player j, if both have the same score (si = sj), then the outcome of that match could have gone to either player. Given the scores of all players, John wants to know the number of possible results for the tournament, with the condition provided above. To summarize: - Each player plays against each other player exactly once. - The score si represents the number of matches that player i won. - If two players have the same score, the result of their match-up is ambiguous and can increase the number of possible outcomes. Write a function `count_possible_outcomes(n: int, scores: List[int]) -> int` that calculates the total number of possible results of the tournament. The first input line contains an integer n (2 ≤ n ≤ 100) – the number of players in the tournament. The second line contains n space-separated integers s1, s2, ..., sn – the scores of the players. Print a single integer, the number of possible outcomes. # Example - Input: ``` 3 1 2 1 ``` - Output: ``` 2 ``` - Input: ``` 4 2 3 3 3 ``` - Output: ``` 6 ``` Explanation: - In the first example, player 1 and player 3 have the same scores (1); hence, there are two different ways their match might have been won. - In the second example, players 2, 3, and 4 have the same score, creating multiple combinations of match outcomes among them, leading to six possible results.","solution":"from typing import List from math import factorial def count_possible_outcomes(n: int, scores: List[int]) -> int: from collections import Counter score_counts = Counter(scores) result = 1 for count in score_counts.values(): if count > 1: result *= factorial(count) return result"},{"question":"You are organizing a coding competition with several participants. Each participant will solve a number of problems, and each problem has a specified difficulty level. You are given the time in minutes each participant took to solve each problem, along with its difficulty level. The competition rules state that the total difficulty level of problems solved by each participant must be strictly increasing with the order in which they solved them. Write a function to determine if each participant has followed the competition rules. The function should take the following arguments: - An integer n (1 <= n <= 1000), the number of participants. - A list of n elements where each element is a list of tuples, with each tuple containing two integers ti and di (1 <= ti <= 10000, 1 <= di <= 10000), representing the time taken and the difficulty level of the ith problem solved by that participant. The tuples are in the order the participant solved the problems. The function should return a list of n elements where each element is \\"Yes\\" if the participant followed the rules and \\"No\\" otherwise. Input: - The first line contains an integer n. - The next n lines each contain a sequence of space-separated tuples (ti, di). Output: - A list of n strings, each being either \\"Yes\\" or \\"No\\". For example: Input: 3 (5, 1) (10, 2) (15, 3) (8, 3) (12, 2) (18, 5) (7, 1) (20, 3) (25, 4) Output: [\'Yes\', \'No\', \'Yes\'] In the first sample, the participant solved problems with difficulty levels 1, 2, 3 in strictly increasing order. In the second sample, the participant did not solve problems in a strictly increasing order of difficulty levels. In the third sample, the participant solved problems with difficulty levels 1, 3, 4, which is in strictly increasing order.","solution":"def check_participants(n, participants): results = [] for participant in participants: is_increasing = all(participant[i][1] < participant[i + 1][1] for i in range(len(participant) - 1)) results.append(\\"Yes\\" if is_increasing else \\"No\\") return results"},{"question":"You are given a binary string `s` of length `n`. Your task is to determine the minimum number of operations required to transform the string into a \\"beautiful\\" string. A string is considered \\"beautiful\\" if it does not contain the substring \\"010\\". In one operation, you can change any character of the string to any other character. Write a function that takes an integer `n` and a string `s`, and returns the minimum number of operations required to make the string beautiful. # Input - The first line of the input contains a single integer n (1 le n le 10^5), the length of the binary string. - The second line contains a binary string `s` of length `n`. # Output - Print a single integer, the minimum number of operations required to make the string \\"beautiful\\". # Example Input ``` 6 010010 ``` Output ``` 2 ``` Input ``` 5 11100 ``` Output ``` 0 ``` Explanation In the first example, `s` contains two substrings \\"010\\": - Changing the first \\"010\\" to \\"011\\" takes 1 operation. - Changing the second \\"010\\" to \\"011\\" takes 1 operation. Thus, the required minimum number of operations is 2. In the second example, `s` does not contain the substring \\"010\\", so no operations are needed and the output is 0.","solution":"def make_beautiful_string(n, s): Returns the minimum number of operations required to make the binary string s beautiful. A string is considered beautiful if it does not contain the substring \\"010\\". operations = 0 i = 0 while i <= n - 3: if s[i:i+3] == \'010\': operations += 1 i += 3 # Skip the next two characters to avoid overlapping changes else: i += 1 return operations"},{"question":"You are given an array of integers and q queries. Each query contains three integers l, r, k. Find the smallest number of elements in the subarray a[l..r] inclusive whose sum of absolute differences to k is minimized. The first line of input data contains two integers n and q (1 <= n, q <= 300,000) — the number of elements in the array and the number of queries respectively. The second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) — the array elements. Each of the next q lines contains three integers l, r, k (1 <= l <= r <= n, 1 <= k <= 10^9) — the description of the queries. Output the answer for each query on a new line. Example: Input: 5 3 1 5 2 3 4 1 3 3 2 5 2 1 5 4 Output: 1 2 1","solution":"def smallest_subarray_by_minimizing_sum_of_abs_diff(n, q, arr, queries): from bisect import bisect_left, bisect_right results = [] for l, r, k in queries: subarray = sorted(arr[l-1:r]) idx = bisect_right(subarray, k) if idx == 0: result = subarray[0] elif idx == len(subarray): result = subarray[-1] else: lower_diff = abs(subarray[idx-1] - k) upper_diff = abs(subarray[idx] - k) result = subarray[idx-1] if lower_diff <= upper_diff else subarray[idx] results.append(result) return results"},{"question":"Alex is playing a game with sequences of numbers. He has two sequences `A` and `B`, both containing `n` elements. He can perform the following operation any number of times (including zero): select one element in sequence `A` and one element in sequence `B`, and swap them. Alex\'s goal is to maximize the sum of elements in sequence `A` after performing the operations. The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) - the number of elements in each sequence. The second line contains `n` integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) - the elements of sequence `A`. The third line contains `n` integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^9) - the elements of sequence `B`. Print the maximum sum of elements in sequence `A` that Alex can achieve. For example, if the input is: ``` 3 1 3 2 5 2 2 ``` The output should be: ``` 10 ``` By swapping 1 from `A` with 5 from `B` and swapping 3 from `A` with 2 from `B`, we achieve a sequence `A` with elements `[5, 3, 2]`, which sums to 10.","solution":"def maximize_sum(n, A, B): This function maximizes the sum of elements in sequence A by swapping elements between A and B. :param n: integer, number of elements in each sequence A and B :param A: list of integers, elements of sequence A :param B: list of integers, elements of sequence B :return: integer, the maximum sum of elements in sequence A after optimal swaps # Sort A in ascending order and B in descending order A.sort() B.sort(reverse=True) # Iterate over each element and swap if the current element in B is greater than current element in A for i in range(n): if B[i] > A[i]: A[i], B[i] = B[i], A[i] else: break # No beneficial swaps possible beyond this point return sum(A)"},{"question":"Alice and Bob love playing games involving strings. Today, they are playing a game where they work with a string consisting of lowercase English letters. Their goal is to make the string a palindrome. The string has length `n` and they can perform one type of operation: changing any character of the string to any other lowercase English letter. Each change has a cost of 1. Write a program that computes the minimum cost needed to make the string a palindrome. The input consists of: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the string. - The second line contains a string `s` of length `n` consisting of lowercase English letters. Output a single integer — the minimum cost needed to make the string a palindrome. **Examples:** Input: ``` 5 abcca ``` Output: ``` 1 ``` Input: ``` 4 abcd ``` Output: ``` 2 ``` In the first example, you can change the last character \'a\' to \'b\' to get \\"abccb\\", which is a palindrome with a cost of 1. In the second example, you can change characters \'b\' and \'c\' to \'a\' and \'d\' respectively to get \\"abba\\" or \\"acca\\", each with a cost of 2.","solution":"def min_cost_to_palindrome(n, s): Computes the minimum cost needed to make the string a palindrome. Parameters: n (int): Length of the string s (str): Input string consisting of lowercase English letters Returns: int: Minimum cost to make the string a palindrome cost = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: cost += 1 return cost"},{"question":"A group of neighbors are planning a community garden with n plots arranged in a straight line, where each plot can either contain a flower or be empty. They want to grow flowers in such a way that the beauty score of the garden is maximized. The beauty score is calculated as the total number of flowers multiplied by the length of the longest consecutive segment of flower plots. Each neighbor has a specific flower planting plan consisting of a string of length n, where \'F\' represents a flower and \'E\' represents an empty plot. Given m flower planting plans, your task is to find the plan that yields the highest beauty score. If there are multiple plans with the same maximum beauty score, choose the lexicographically smallest plan. The first line of input will contain two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100), the number of plots and the number of planting plans, respectively. The next m lines each contain a string of length n, consisting of characters \'F\' and \'E\'. Output the lexicographically smallest plan that maximizes the beauty score. # Example **Input:** ``` 5 3 EFFFE FFFFE EEFEE ``` **Output:** ``` FFFFE ``` # Explanation For the first plan \\"EFFFE\\", the number of flowers is 4, and the longest consecutive segment of flower plots is 3, so the beauty score is 4 * 3 = 12. For the second plan \\"FFFFE\\", the number of flowers is 4, and the longest consecutive segment of flower plots is 4, so the beauty score is 4 * 4 = 16. For the third plan \\"EEFEE\\", the number of flowers is 2, and the longest consecutive segment of flower plots is 1, so the beauty score is 2 * 1 = 2. Therefore, the plan \\"FFFFE\\" has the highest beauty score, and it is lexicographically smaller than the other plans with the same beauty score.","solution":"def calculate_beauty(plan): Calculate the beauty score of a garden plan. :param plan: A string representing the garden plan. :return: An integer representing the beauty score. num_flowers = plan.count(\'F\') if num_flowers == 0: return 0 max_consecutive = 0 current_consecutive = 0 for plot in plan: if plot == \'F\': current_consecutive += 1 if current_consecutive > max_consecutive: max_consecutive = current_consecutive else: current_consecutive = 0 return num_flowers * max_consecutive def best_garden_plan(n, m, plans): Find the garden plan with the highest beauty score while being lexicographically smallest. :param n: Number of plots in each garden plan. :param m: Number of garden plans. :param plans: List of strings where each string is a garden plan. :return: The garden plan with the highest beauty score, and if there are multiple, the lexicographically smallest. best_plan = \\"\\" max_beauty = -1 for plan in plans: beauty_score = calculate_beauty(plan) if beauty_score > max_beauty or (beauty_score == max_beauty and (best_plan == \\"\\" or plan < best_plan)): best_plan = plan max_beauty = beauty_score return best_plan"},{"question":"You are given a grid with size n times m consisting of empty cells. Some cells are blocked, and it\'s not possible to walk through them. You are also given the coordinates of a start cell and a target cell. You can move from one cell to another if they are adjacent and unblocked, meaning you can move left, right, up, or down. Your goal is to find the number of distinct shortest paths from the start cell to the target cell. The first line contains two integers n and m (2 leq n, m leq 100) — the number of rows and columns in the grid. The next n lines each contain m characters, where “.” represents an empty cell and “#” represents a blocked cell. The next line contains two integers sx and sy (1 leq sx leq n, 1 leq sy leq m) — the row and column of the start cell. The next line contains two integers tx and ty (1 leq tx leq n, 1 leq ty leq m) — the row and column of the target cell. Output a single integer denoting the number of distinct shortest paths from the start cell to the target cell. If there is no path from the start cell to the target cell, output 0. # Example Input: ``` 4 4 .... .#.. ..#. .... 1 1 4 4 ``` Output: ``` 4 ```","solution":"from collections import deque, defaultdict def find_shortest_paths(n, m, grid, start, target): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' sx, sy = start tx, ty = target directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if not is_valid(sx, sy) or not is_valid(tx, ty): return 0 queue = deque([(sx, sy)]) distance = [[float(\'inf\')] * m for _ in range(n)] distance[sx][sy] = 0 paths = [[0] * m for _ in range(n)] paths[sx][sy] = 1 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if distance[nx][ny] > distance[x][y] + 1: distance[nx][ny] = distance[x][y] + 1 paths[nx][ny] = paths[x][y] queue.append((nx, ny)) elif distance[nx][ny] == distance[x][y] + 1: paths[nx][ny] += paths[x][y] return paths[tx][ty] # Example usage n, m = 4, 4 grid = [ \\"....\\", \\".#..\\", \\"..#.\\", \\"....\\" ] start = (0, 0) target = (3, 3) print(find_shortest_paths(n, m, grid, start, target)) # Output: 4"},{"question":"A small tech company has recently introduced a new time tracking system for its employees. Each employee logs their work hours for various tasks throughout the day. The company wants to calculate the total amount of time worked by each employee daily to ensure no one exceeds the permissible working hours limit. Write a program to help the company achieve this task. You are provided with a list of log entries for a single day. Each log entry consists of an employee\'s ID, the start time of a task (in minutes since the start of the day), and the duration of the task (in minutes). You need to calculate the total number of minutes worked by each employee. If an employee\'s total working time exceeds 480 minutes (8 hours), their total working time should be capped at 480 minutes. The first input line contains an integer n (1 ≤ n ≤ 1000) — the number of log entries. Each of the next n lines contains three space-separated integers: ei, si, di (1 ≤ ei ≤ 1000, 0 ≤ si < 1440, 1 ≤ di ≤ 1440) — the ID of the employee, the start time of the task, and the duration of the task, respectively. Print the total number of minutes worked by each employee, sorted by employee ID in ascending order. Each employee ID should be followed by the total minutes worked by that employee. If there are no log entries for an employee, do not include them in the output. Example input: 6 1 60 120 1 200 300 2 300 200 2 600 300 3 0 500 3 700 100 Example output: 1 420 2 480 3 480 In the example above: - Employee 1 worked 120 + 300 = 420 minutes (within limit). - Employee 2 worked 200 + 300 = 500 minutes (capped at 480). - Employee 3 worked 500 + 100 = 600 minutes (capped at 480).","solution":"def calculate_total_worked_time(logs): Calculates the total minutes worked by each employee from the given logs. Caps the total working time at 480 minutes for any employee. :param logs: List of tuples, each containing (employee ID, start time, duration) :return: Dictionary with employee ID as keys and total worked minutes as values from collections import defaultdict # Dictionary to store total worked minutes for each employee worked_time = defaultdict(int) # Process each log entry for emp_id, start, duration in logs: worked_time[emp_id] += duration # Cap the total worked time at 480 minutes for emp_id in worked_time: if worked_time[emp_id] > 480: worked_time[emp_id] = 480 # Return the dictionary sorted by employee ID return dict(sorted(worked_time.items()))"},{"question":"Given an array of integers nums and an integer k, find the number of unique pairs (i, j) such that nums[i] + nums[j] = k, and i < j. The array will not be sorted and may contain duplicate elements. However, each pair (i, j) should be unique and satisfy i < j. Since the number of unique pairs can be large, print it modulo 10^9 + 7. The first line of input contains two integers n and k (1 ≤ n ≤ 10^6, -10^9 ≤ k ≤ 10^9) — the length of the array and the target sum, respectively. The second line contains n integers, the elements of the array nums (|nums[i]| ≤ 10^9). Print one integer, the number of unique pairs (i, j) such that nums[i] + nums[j] = k, modulo 10^9 + 7. Example: Input: 5 6 1 5 3 3 2 Output: 2 Explanation: The pairs are (1, 5) and (3, 3). Therefore, the output is 2.","solution":"MOD = 10**9 + 7 def count_unique_pairs(nums, k): Returns the number of unique pairs (i, j) where nums[i] + nums[j] = k and i < j, modulo 10^9 + 7. seen = {} count = 0 for i, num in enumerate(nums): target = k - num if target in seen: count = (count + seen[target]) % MOD if num in seen: seen[num] += 1 else: seen[num] = 1 return count def parse_input(): Parses input from standard input. import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) nums = list(map(int, data[2:2+n])) return nums, k def main(): nums, k = parse_input() result = count_unique_pairs(nums, k) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a 2D grid consisting of cells with 0 or 1 in it. A cluster is a group of adjacent cells, all containing 1s, connected horizontally or vertically. Your task is to find the number of clusters and the size of the largest cluster in the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m characters (\'0\' or \'1\') representing the grid. Output two integers: the number of clusters and the size of the largest cluster. # Example Input: ``` 4 5 11000 11000 00100 00011 ``` Output: ``` 3 4 ``` In the example above, there are three clusters: 1. Size 4 (first two rows and first two columns). 2. Size 1 (third row, third column). 3. Size 2 (last row, last two columns).","solution":"def find_clusters_and_largest_size(grid): n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' size = 1 size += dfs(x-1, y) size += dfs(x+1, y) size += dfs(x, y-1) size += dfs(x, y+1) return size num_clusters = 0 largest_cluster_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': num_clusters += 1 cluster_size = dfs(i, j) largest_cluster_size = max(largest_cluster_size, cluster_size) return num_clusters, largest_cluster_size"},{"question":"Crodo is participating in the \\"Bot-Catcher\\" programming contest. Crodo has a grid of size n x n filled with numbers. The contest moderator decides to challenge Crodo with a new task: finding the maximum sum of the elements in a subgrid of any size within the given grid. The subgrid must contain at least one element. The grid is represented by n lines, where each line contains n integers. The task consists of writing a program that will compute the maximum sum of the elements in any subgrid. Input: - The first line contains a single integer n (1 ≤ n ≤ 500), the number of rows and columns in the grid. - Each of the next n lines contains n integers representing the elements of the grid. Each integer grid[i][j] (1 ≤ grid[i][j] ≤ 1000). Output: - Print a single integer, the maximum sum of the elements in any subgrid. Example: Input: 3 1 2 3 4 5 6 7 8 9 Output: 45 Explanation: The entire grid itself is the subgrid with the maximum sum in this case.","solution":"def max_subgrid_sum(grid): n = len(grid) # Generate prefix sum array prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] max_sum = float(\'-inf\') # Checking all subgrids for i1 in range(1, n + 1): for j1 in range(1, n + 1): for i2 in range(i1, n + 1): for j2 in range(j1, n + 1): current_sum = prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1] max_sum = max(max_sum, current_sum) return max_sum def parse_input(data): lines = data.strip().split(\\"n\\") n = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:n+1]] return grid"},{"question":"You are provided with a sequence of n positive integers and m queries. Each query is described by two integers: a target sum and a maximum number of elements that can be used to reach the sum. The goal is to determine if it is possible to form the target sum using at most the specified number of elements from the sequence. If possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the size of the sequence and the number of queries. The second line contains n integers ai (1 ≤ ai ≤ 1000) — the elements of the sequence. Each of the next m lines contains two integers si and ki (1 ≤ si ≤ 10000, 1 ≤ ki ≤ n) — the target sum and the maximum number of elements that can be used to reach this sum. For each query, print \\"YES\\" if it is possible to form the target sum using at most ki elements; otherwise, print \\"NO\\". Input: ``` n m a1 a2 ... an s1 k1 s2 k2 ... sm km ``` Output: ``` YES/NO for each query ```","solution":"import itertools def can_form_sum(n, m, sequence, queries): Determines if it is possible to form target sums using at most specified number of elements from the sequence. Parameters: n (int): Size of sequence. m (int): Number of queries. sequence (list of int): The elements of the sequence. queries (list of tuples): Each tuple contains a target sum and maximum number of elements. Returns: list of str: \'YES\' or \'NO\' for each query. results = [] for target_sum, max_elements in queries: possible = False for combination in itertools.chain.from_iterable( itertools.combinations(sequence, r) for r in range(1, max_elements + 1)): if sum(combination) == target_sum: possible = True break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"In a far-away country, there is a system of highways that connects various cities. Each highway has a toll fee, and the country wants to ensure efficient transportation by calculating the minimum possible cost to travel between cities. Given a list of highways and their toll fees, determine the minimum toll fee required to travel between specified pairs of cities. The first line of the input contains two integers, n and m (1 le n le 50, 0 le m le 2000) — the number of cities and the number of highways, respectively. Each of the next m lines contains three integers, a, b, and c (1 le a, b le n, 1 le c le 1000), indicating there is a highway between city a and city b with a toll fee of c. The next line contains an integer, q (1 le q le 100) — the number of queries. Each of the next q lines contains two integers, u and v, representing a query for the minimum toll fee required to travel from city u to city v. For each query, print one integer — the minimum toll fee to travel from city u to city v. If there is no path between the two cities, print -1. Example input: ``` 4 4 1 2 5 2 3 10 3 4 3 1 4 20 2 1 3 2 4 ``` Example output: ``` 15 13 ```","solution":"import heapq def minimum_toll_fee(n, m, highways, q, queries): # Initialize graph graph = {i: [] for i in range(1, n+1)} for a, b, c in highways: graph[a].append((c, b)) graph[b].append((c, a)) # Dijkstra\'s Algorithm to find the shortest path def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 results = [] for u, v in queries: results.append(dijkstra(u, v)) return results"},{"question":"Given a list of integers, rearrange the elements to form the lexicographically smallest possible concatenated number. In other words, concatenate the elements together in an order that produces the smallest possible numerical value when read left to right. For instance, if the list has the integers [34, 30, 9], one possible way to arrange them is \\"30349\\" which would be the lexicographically smallest concatenation of those numbers. The input begins with a single integer n (1 ≤ n ≤ 10^5), representing the number of integers in the list. The next line contains n space-separated positive integers ai (1 ≤ ai ≤ 10^9), representing the elements of the list. Output a single line containing the lexicographically smallest concatenated number possible with the given list of integers. Example: Input: 3 34 30 9 Output: 30349 In this example, by rearranging the numbers 34, 30, and 9 into \\"30349\\", we get the lexicographically smallest number possible.","solution":"from functools import cmp_to_key def smallest_concatenation(n, arr): def compare(x, y): # Custom comparator to decide the order based on lexicographic concatenation if x + y < y + x: return -1 elif x + y > y + x: return 1 else: return 0 # Convert all integers to strings for easy concatenation and manipulation str_arr = list(map(str, arr)) # Sort array using custom comparator str_arr.sort(key=cmp_to_key(compare)) # Join sorted array to form the smallest concatenated number result = \'\'.join(str_arr) return result"},{"question":"Alice wants to bake cookies, and she has a special set of n cookie cutters. Each cookie cutter has a specific shape and size. The challenge is that each type of cookie cutter can only cut out cookies of its specifically designated type, and each type of cookie has a difficulty level associated with cutting it out. Alice wants to cut out exactly k cookies in total, with a minimal total difficulty. For each type of cookie cutter, you are given the number of cookies it can cut in one use, the difficulty level associated with it, and the maximum number of times it can be used. Can you help Alice determine the minimal total difficulty she needs to bear to cut out exactly k cookies? If it is not possible to cut out exactly k cookies, output -1. The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of types of cookie cutters and the number of cookies Alice wants to cut, respectively. The next n lines each contain three integers c_i, d_i, and m_i (1 ≤ c_i ≤ 100, 1 ≤ d_i ≤ 1000, 1 ≤ m_i ≤ 100) — the number of cookies the i-th cutter can cut in one use, the difficulty level of using the i-th cutter, and the maximum number of times Alice can use the i-th cutter. Output the minimal total difficulty required to cut out exactly k cookies. If it is not possible to cut out k cookies with the given cutters, output -1. For example, if Alice has 3 types of cookie cutters and wants to cut out 10 cookies, the input might look like this: ``` 3 10 3 5 4 2 3 3 4 8 2 ``` In this case, the output would be: ``` 27 ``` Explanation: Alice can use the first cutter 2 times (cutting 3 cookies each time, total 6 cookies, difficulty 10), and the second cutter 2 times (cutting 2 cookies each time, total 4 cookies, difficulty 6), resulting in a total difficulty of 10 + 6 = 16 (minimal total difficulty). If the input were instead: ``` 2 8 3 5 2 4 8 1 ``` The output would be: ``` -1 ``` Explanation: Alice can\'t cut out exactly 8 cookies using the given cutters.","solution":"def minimal_difficulty(n, k, cutters): # Create a list to track the minimum difficulty to cut a certain number of cookies. dp = [float(\'inf\')] * (k + 1) dp[0] = 0 for c, d, m in cutters: for use in range(1, m + 1): for cookies in range(k, c - 1, -1): dp[cookies] = min(dp[cookies], dp[cookies - c] + d) return dp[k] if dp[k] != float(\'inf\') else -1 # Example usage: # n = 3, k = 10 # cutters = [ # (3, 5, 4), # 3 cookies per use, 5 difficulty per use, max 4 uses # (2, 3, 3), # 2 cookies per use, 3 difficulty per use, max 3 uses # (4, 8, 2) # 4 cookies per use, 8 difficulty per use, max 2 uses # ] # print(minimal_difficulty(3, 10, cutters)) # Expected: 16"},{"question":"A large corporation is hosting a series of team-building events. In each event, employees are paired into teams. The goal is to create the most efficient teams based on employee skill levels. You are given a list of skill levels of employees, and you need to pair them in such a way that the difference between the skills of paired employees is minimized. You need to determine the minimum possible total skill difference for the pairs. For each test case, you will be given an even number, n (the number of employees), followed by n integers representing the skill levels of each employee. You should output a single integer representing the minimum possible total skill difference for the optimal pairings. **Input:** - The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. - For each test case: - The first line contains a single integer n (2 ≤ n ≤ 1000 and n is even) — the number of employees. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the skill levels of the employees. **Output:** For each test case, output a single integer — the minimum possible total skill difference for the optimal pairings. **Example:** ``` Input: 2 4 1 3 5 9 6 1 2 3 4 5 6 Output: 6 3 ``` **Explanation:** For the first test case: - The optimal pairs are (1, 3) and (5, 9) with total skill difference (3-1) + (9-5) = 2 + 4 = 6. For the second test case: - The optimal pairs are (1, 2), (3, 4), and (5, 6) with total skill difference (2-1) + (4-3) + (6-5) = 1 + 1 + 1 = 3.","solution":"def minimize_total_skill_difference(t, test_cases): Return the minimum possible total skill difference for the optimal pairings. Parameters: t (int): Number of test cases test_cases (list): Each element is a tuple where the first element is n (number of employees), and the second element is a list of skill levels of those employees. Returns: list: A list of integers representing the minimum possible total skill difference for each test case. results = [] for n, skills in test_cases: skills.sort() total_difference = 0 for i in range(1, n, 2): total_difference += skills[i] - skills[i - 1] results.append(total_difference) return results"},{"question":"The Tallest Towers Tournament is a game where players build towers out of blocks. Each block has a height, and players can stack blocks one on top of another to build as tall a tower as possible. However, a block can only be placed on top of another block if its height is not greater than the height of the block below it. You are given an array of integers, where each integer represents the height of a block. Your task is to determine the height of the tallest tower that can be built using the given blocks. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of blocks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the blocks. Output a single integer — the height of the tallest tower that can be built. Example: Input: 5 2 3 3 2 1 Output: 5","solution":"def tallest_tower(n, heights): This function takes the number of blocks and a list of block heights, and returns the height of the tallest tower that can be built. # Sort the heights in non-decreasing order heights.sort(reverse=True) # The height of the tallest tower is simply the sum of the heights # since we are sorting them in descending order. return sum(heights) # Example usage: # Input: n = 5, heights = [2, 3, 3, 2, 1] # Output: 5"},{"question":"You are given an integer array `nums` of length `n`. Your task is to determine the \\"dominant\\" index of `nums`. The dominant index is defined as the index of the value that is at least twice as large as every other value in the array. If no such index exists, return `-1`. For example, given the array `nums = [3, 6, 1, 0]`, the dominant index is `1` because `6` is at least twice as large as every other value in the array. If the input was `nums = [1, 2, 3, 4]`, there is no dominant index, so you should return `-1`. The first line contains an integer `n` (1 leq n leq 10^5), which represents the size of the array. The second line contains `n` space-separated integers `nums[i]` (0 leq nums[i] leq 10^9) representing the elements of the array. Print a single integer — the dominant index of the array or `-1` if no dominant index exists. # Input ``` 4 3 6 1 0 ``` # Output ``` 1 ```","solution":"def dominant_index(nums): Returns the index of the dominant element in the list. If no such index exists, it returns -1. if len(nums) == 1: return 0 max_val = max(nums) max_index = nums.index(max_val) for num in nums: if num != max_val and max_val < 2 * num: return -1 return max_index # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(dominant_index(nums))"},{"question":"You are given a binary tree with `n` nodes. Each node of the binary tree has a unique value from `1` to `n`. Your task is to determine the value of the kth ancestor of a given node in the binary tree. The kth ancestor of a node `v` in a binary tree is the k-th node in the path from `v` to the root (where the root has depth 0). If the k-th ancestor does not exist, return `-1`. The binary tree is represented by a `parent` array where `parent[i]` is the parent of node `i+1` (for `1 <= i < n`) and `parent[0]` is `-1` since the root node does not have a parent. The queries are given as pairs `(v, k)` where you have to find the k-th ancestor of node `v`. # Input The first line contains an integer `n` (`1 ≤ n ≤ 100,000`) — the number of nodes in the binary tree. The second line contains `n` integers where the `i-th` integer is `parent[i]` — denoting the parent of `i+1`. The third line contains an integer `q` (`1 ≤ q ≤ 100,000`) — the number of queries. Each of the next `q` lines contains two integers `v` and `k` (`1 ≤ v ≤ n, 0 ≤ k ≤ n`) — the node `v` and the integer `k`. # Output For each query, print a single integer — the value of the k-th ancestor of `v` or `-1` if it does not exist. # Example Input ``` 5 -1 1 1 3 3 3 5 1 5 2 2 1 ``` Output ``` 3 1 1 ``` # Explanation The given binary tree can be visualized as: ``` 1 / 2 3 / 4 5 ``` - The 1st ancestor of node 5 is 3. - The 2nd ancestor of node 5 is 1. - The 1st ancestor of node 2 is 1.","solution":"def kth_ancestor(n, parent, queries): Returns a list of the kth ancestor for each query. Args: n: Number of nodes in the binary tree. parent: List of integers where parent[i] denotes the parent of node i+1. queries: List of tuples where each tuple contains (v, k). Returns: List of integers where each integer is the value of the kth ancestor of node v. # Result list to hold answers for each query result = [] # Create a cache to store already found kth ancestors cache = {} # Helper function to find kth ancestor def find_kth_ancestor(v, k): if k == 0: return v if v == -1: return -1 if (v, k) in cache: return cache[(v, k)] # Recursively find the ancestor ancestor = find_kth_ancestor(parent[v - 1], k - 1) cache[(v, k)] = ancestor return ancestor # Process each query for v, k in queries: result.append(find_kth_ancestor(v, k)) return result"},{"question":"You are given an array of integers a with length n where the i^{th} integer represents the height of a bar. You need to find the largest rectangle that can be formed by consecutive bars where the rectangle’s height is the minimum bar height in that range and its width is the number of bars. Formally, you need to find the largest area rectangle such that it is possible to choose integers l and r subject to 1 leq l leq r leq n, and the area of the rectangle defined by these positions is maximized. The first line contains a single integer n (1 leq n leq 100,000). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Output the largest possible area of a rectangle that can be formed. **Example:** Input: ``` 7 2 1 4 5 1 3 3 ``` Output: ``` 8 ``` Explanation: The largest rectangle has a height of 4 and a width of 2, forming a rectangle with an area of 4 times 2 = 8.","solution":"def largest_rectangle_area(heights): Function to calculate the largest rectangular area in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of integers and two kinds of operations that you can perform on it. The operations and the input structure are described as follows: 1. The first line of the input contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of elements in the array and the number of operations, respectively. 2. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array. Each of the next m lines contains an operation that can be one of the following types: - \\"1 l r x\\": This operation adds the integer x (0 ≤ x ≤ 10^9) to each element of the array from index l to index r (1 ≤ l ≤ r ≤ n). - \\"2 k\\": This operation asks for the value of the k-th element of the array (1 ≤ k ≤ n). For each operation of the second type, print the value of the k-th element of the array after all previous operations have been applied. You need to efficiently handle both types of operations while ensuring that your solution can manage the input limits efficiently. **Example:** Input: ``` 5 5 1 2 3 4 5 1 1 3 2 2 4 2 2 1 2 5 1 2 3 2 5 ``` Output: ``` 4 4 6 6 ``` **Explanation:** Initial array: ``` [1, 2, 3, 4, 5] ``` After the first operation (add 2 to elements from index 1 to 3): ``` [3, 4, 5, 4, 5] ``` The result of the first query (get element at index 4) is: ``` 4 ``` The result of the second query (get element at index 2) is: ``` 4 ``` After the third operation (add 1 to elements from index 2 to 5): ``` [3, 5, 6, 5, 6] ``` The result of the fourth query (get element at index 3) is: ``` 6 ``` The result of the fifth query (get element at index 5) is: ``` 6 ```","solution":"def process_operations(n, m, array, operations): Processes a list of operations on an array as described in the problem statement. Parameters: n (int): Number of elements in the array. m (int): Number of operations array (list of int): Initial array of integers. operations (list of list of int): List of operations. Returns: list of int: Results of all \\"2 k\\" operations. results = [] increment = [0] * (n + 1) for op in operations: if op[0] == 1: # Adding x to range [l-1, r-1] l, r, x = op[1], op[2], op[3] increment[l-1] += x if r < n: increment[r] -= x elif op[0] == 2: # Retrieving k-th element k = op[1] - 1 value = array[k] for j in range(k + 1): value += increment[j] results.append(value) return results"},{"question":"A famous billionaire has decided to host a grand banquet in which he wants to invite n guests. There are m tables in the banquet hall, and each table can seat up to 2 guests. The tables are arranged circularly around the hall and are numbered from 1 to m clockwise. The billionaire wants to create a seating arrangement such that no table has a single guest sitting alone. Therefore, every table must either have zero guests or exactly two guests. Due to this requirement, an even number of guests must be invited. You are to determine a possible seating arrangement for these guests such that every table has either zero or two guests, or determine if it is impossible to create such an arrangement given the number of guests and tables. The first line contains two integers n and m (1 ≤ n ≤ 2 * 10^5, 1 ≤ m ≤ 10^5) — the number of guests and the number of tables. Print a single line containing \\"Possible\\" followed by m integers, where the i-th integer is the number of guests at the (i)-th table (either 0 or 2) if there exists a valid seating arrangement. If it is impossible to seat the guests as described, print \\"Impossible\\". Example 1: Input: 6 3 Output: Possible 2 2 2 Example 2: Input: 5 4 Output: Impossible Example 3: Input: 8 5 Output: Possible 2 2 2 0 2 In the first example, 6 guests can be seated at 3 tables with exactly 2 guests at each table. In the second example, it is impossible to seat 5 guests such that each table has 0 or 2 guests. In the third example, 8 guests can be seated at 5 tables with an arrangement such that each table has exactly 0 or 2 guests.","solution":"def seating_arrangement(n, m): Determine the seating arrangement for the guests such that each table has either 0 or 2 guests. Parameters: n (int): The number of guests. m (int): The number of tables. Returns: str: \\"Possible\\" followed by m integers representing the seating arrangement or \\"Impossible\\" if it cannot be arranged. # Check if the number of guests is even and if the number of tables is sufficient if n % 2 != 0 or n > 2 * m: return \\"Impossible\\" # Create the initial seating arrangement seats = [0] * m for i in range(n // 2): seats[i] = 2 return \\"Possible \\" + \\" \\".join(map(str, seats))"},{"question":"Given a list of integers, your task is to find the maximum possible sum of its subarray with the length at least L and at most R. A subarray is a contiguous segment of the array. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^4) — the elements of the array. The third line contains two integers L and R (1 ≤ L ≤ R ≤ n) — the minimum and maximum length of the subarray to be considered. Output a single integer — the maximum possible sum of a subarray whose length is at least L and at most R. # Example Input ``` 6 1 -2 3 4 -1 2 2 4 ``` Output ``` 8 ``` Explanation: The subarray [3, 4, -1, 2] has length 4 and sum 8, which is the maximum sum among all subarrays of lengths between 2 and 4.","solution":"def max_subarray_sum_with_length_range(array, L, R): Returns the maximum possible sum of a subarray whose length is at least L and at most R. Parameters: array (list): List of integers representing the array. L (int): Minimum length of the subarray. R (int): Maximum length of the subarray. Returns: int: Maximum possible sum of a subarray with the length within the given range. n = len(array) # Array to store the maximum subarray sum of length at most i max_sum_ending_at = [-float(\'inf\')] * (n + 1) current_sum = 0 # Precompute max_sum_ending_at array for length in range(1, n + 1): if length <= R: current_sum += array[length - 1] if length >= L: max_sum_ending_at[length] = current_sum if length > R: break # Fill the array for max_sum_ending_at for i in range(n): current_sum = 0 for length in range(1, R + 1): if i + length > n: break current_sum += array[i + length - 1] if length >= L: max_sum_ending_at[length] = max(max_sum_ending_at[length], current_sum) # Find the maximum value in the max_sum_ending_at array for lengths between L and R max_subarray_sum = -float(\'inf\') for length in range(L, R + 1): max_subarray_sum = max(max_subarray_sum, max_sum_ending_at[length]) return max_subarray_sum"},{"question":"Anna is a competitive coder who likes to generate interesting sequences of numbers. She invents a new sequence called the \\"Palindrome Prefix Product\\" (PPP) which is defined as follows: 1. Take the first `i` characters of the string `s` and convert them into a number. 2. Calculate the product of all numeric values obtained by converting each prefix. 3. Check if the product is a palindrome. Given a string `s` consisting of only digit characters, help Anna determine if the product of all possible numeric values obtained by converting each prefix of `s` is a palindrome or not. A palindromic number is a number that remains the same when its digits are reversed. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - Each of the following `t` lines contains a string `s` (1 ≤ |s| ≤ 1000), which consists of only digit characters. # Output For each test case, print \\"YES\\" if the product of all numeric values obtained by converting each prefix of `s` is a palindrome, otherwise print \\"NO\\". # Example Input: ``` 2 123 121 ``` Output: ``` NO YES ``` # Explanation - For the first test case, the prefixes are \\"1\\", \\"12\\", and \\"123\\", their numeric values are 1, 12, and 123, respectively, and the product 1 * 12 * 123 = 1476, which is not a palindrome. - For the second test case, the prefixes are \\"1\\", \\"12\\", and \\"121\\", their numeric values are 1, 12, and 121, respectively, and the product 1 * 12 * 121 = 1452, which is a palindrome.","solution":"def is_palindrome(number): Check if a given number is a palindrome. return str(number) == str(number)[::-1] def palindrome_prefix_product(test_cases): Given a list of strings representing test cases, for each string, check if the product of all numeric values obtained by converting each prefix of the string is a palindrome. results = [] for s in test_cases: product = 1 for i in range(1, len(s) + 1): prefix_num = int(s[:i]) product *= prefix_num if is_palindrome(product): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is a botanist who is studying the growth patterns of a certain type of plant. She wants to analyze the maximum growth over a given period. The growth of the plant is recorded daily and stored in an array of integers where each element represents the growth on a particular day. Alice wants to find the maximum sum of growth over any contiguous subarray of the given array. Given an array of integers representing the daily growth measurements, find the maximum possible sum of any contiguous subarray. The first line of input contains a single integer n (1 ≤ n ≤ 105), the length of the array. The second line contains n integers a1, a2, ..., an (-104 ≤ ai ≤ 104) — the growth measurements for each day. Output a single integer — the maximum sum of a contiguous subarray of the given array. **Example:** Input: ``` 5 1 -2 3 4 -1 ``` Output: ``` 7 ``` Explanation: The maximum sum of a contiguous subarray is achieved by summing the subarray [3, 4], which results in 7.","solution":"def max_contiguous_sum(arr): This function finds the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Example usage: # Uncomment the lines below to run the function # array = [1, -2, 3, 4, -1] # print(max_contiguous_sum(array)) # Output should be 7"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, output \\"YES\\", otherwise output \\"NO\\". The only line of the input contains a string s (1 ≤ |s| ≤ 100). Output \\"YES\\" if it is possible to rearrange the string such that no two adjacent characters are the same, and \\"NO\\" otherwise. Example: Input: aab Output: YES Input: aaab Output: NO","solution":"from collections import Counter def can_rearrange_string(s): Determines if a string can be rearranged such that no two adjacent characters are the same. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged, otherwise \\"NO\\". char_count = Counter(s) max_count = max(char_count.values()) if max_count > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"A group of friends is planning to celebrate their birthday at a candy store. Each friend has a favorite type of candy, and they want to make sure they get the same number of candies of their favorite type as their age. The store has n different types of candy, and each type of candy has a specific amount in stock. You need to determine if it\'s possible to satisfy each friend by providing the required number of candies. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of candy types and the number of friends. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the number of candies available for each type. The third line contains m integers a1, a2, ..., am (1 ≤ ai ≤ 100) — the favorite type of candy for each friend. The fourth line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 100) — the ages of each friend. Print \\"YES\\" if it\'s possible to satisfy each friend, otherwise print \\"NO\\". Example: Input 3 2 5 8 6 1 2 3 4 Output YES Input 3 3 5 8 6 1 2 3 4 3 7 Output NO","solution":"def can_satisfy_friends(n, m, candy_count, friends_favorites, friends_ages): Determines if it\'s possible to satisfy each friend by providing the required number of candies. # Create a dictionary to keep track of candy stock based on type candy_stock = {} for i in range(n): candy_stock[i+1] = candy_count[i] # candy types are 1-indexed # Check if each friend\'s requirement can be satisfied for i in range(m): favorite_type = friends_favorites[i] required_candies = friends_ages[i] if candy_stock[favorite_type] >= required_candies: candy_stock[favorite_type] -= required_candies else: return \\"NO\\" return \\"YES\\""},{"question":"A railway network consists of n cities connected by bidirectional railways. The railways have different lengths, and you need to find a way to construct a new railway network where all cities are directly or indirectly connected, and the total length of the railways used is minimized. This new railway network should use only railways from the current network. Given the list of cities and the existing railways, find the total length of the railways in the minimized railway network and print each railway that is part of this minimized network. The first line of input contains two integers n (2 leq n leq 1000) and m (1 leq m leq 10000) – the number of cities and the number of railways, respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, u ne v, 1 leq w leq 10000) – the cities connected by the railway and the length of the railway. Output the total length of the railways in the minimized network. Each of the next n-1 lines should contain two integers representing the cities connected by each railway in the minimized network. If there are multiple minimized networks with the same total length, you may output any one of them. Input example: ``` 4 5 1 2 3 2 3 5 3 4 4 1 4 2 2 4 6 ``` Output example: ``` 9 1 4 1 2 3 4 ``` Note that in the given input example, cities 1, 2, 3, and 4 can be connected in a way that the total railway length is minimized, with a total length of 9 (using the railways with lengths 2, 3, and 4).","solution":"def find_minimized_railway_network(n, m, railways): Given n cities and m railways, find the minimized railway network using Kruskal\'s algorithm. Returns total length of minimized network and edges used in it. Parameters: n (int): Number of cities m (int): Number of railways railways (list): List of tuples representing the railways (u, v, weight) Returns: (total_length, minimized_network): tuple, total length and list of tuples representing minimized network # Function to find the root of a node in Disjoint Set (Union Find) def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Function to perform union of two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort all the railways in ascending order of their weights railways = sorted(railways, key=lambda item: item[2]) parent = [] rank = [] # Initialize disjoint sets for node in range(n): parent.append(node) rank.append(0) minimized_network = [] total_length = 0 e = 0 i = 0 while e < n - 1: # Pick the smallest edge u, v, w = railways[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge does not cause a cycle if x != y: e += 1 minimized_network.append((u, v)) total_length += w union(parent, rank, x, y) return total_length, minimized_network"},{"question":"Given a string, S, which represents a combination of lowercase Latin letters and two specific characters, \'*\' and \'?\'. The character \'*\' can be replaced by any sequence of lowercase Latin letters (including an empty sequence), and the character \'?\' can be replaced by any single lowercase Latin letter. Your task is to compute the number of distinct strings that can be generated by replacing all the \'*\' and \'?\' characters in the string S accordingly. # Input The input consists of a single line containing the string S (1 leq |S| leq 100). The string S contains only lowercase Latin letters, \'*\' and \'?\'. # Output Output a single integer — the number of distinct strings that can be generated. # Example **Input:** ``` a?c ``` **Output:** ``` 26 ``` **Input:** ``` a*b ``` **Output:** ``` 2^26 ``` # Notes For the string \\"a?c\\", the \'?\' can be replaced by any single character from \'a\' to \'z\', resulting in 26 possible strings: \\"aac\\", \\"abc\\", ..., \\"azc\\". For the string \\"a*b\\", the \'*\' can be replaced by any sequence (including the empty sequence), so the number of ways to replace \'*\' equals (2^{26}) (considering the powerset of the set of lowercase Latin letters).","solution":"def count_distinct_strings(S): Returns the number of distinct strings that can be generated by replacing all the \'*\' and \'?\' characters in the string S. count = 1 for char in S: if char == \'?\': count *= 26 elif char == \'*\': count *= 2 ** 26 return count"},{"question":"John has created a website that contains a section for submitting email addresses. Unfortunately, the section was not protected properly, and users could submit email addresses that were incorrectly formatted. Could you help John by writing a function to validate whether a given string is a valid email address? An email address is considered valid if it meets the following criteria: 1. It contains exactly one \\"@\\" symbol. 2. The local part (the part before \\"@\\") and the domain part (the part after \\"@\\") must both be non-empty. 3. The domain part must contain at least one \\".\\" symbol after the \\"@\\". 4. The segments of the domain part that are separated by the \\".\\" must each be non-empty and must consist only of lowercase English letters. The input consists of a single line containing the string s (1 ≤ |s| ≤ 100), which potentially represents the email address. Output \\"YES\\" if the string is a valid email address based on the described rules. Otherwise, output \\"NO\\". # Example Input ``` john.doe@example.com ``` Output ``` YES ``` Input ``` john.doe@.com ``` Output ``` NO ``` Input ``` @domain.com ``` Output ``` NO ```","solution":"def is_valid_email(s): Validates the given string s as a valid email address. Args: s (str): A string potentially representing an email address. Returns: str: \\"YES\\" if the email address is valid, otherwise \\"NO\\". try: local, domain = s.split(\'@\') except ValueError: return \\"NO\\" if not local or not domain: return \\"NO\\" if \'.\' not in domain: return \\"NO\\" domain_parts = domain.split(\'.\') if any(not part.islower() or not part for part in domain_parts): return \\"NO\\" return \\"YES\\""},{"question":"Ada Lovelace is working on a new encryption algorithm for sensitive data transfer. The algorithm relies on transforming a string `S` of length `n` into another string `T` of length `m` by possibly deleting some characters from `S`. However, the transformed string `T` must be a palindromic string, which reads the same backward as forward. Ada wants to find out the length of the longest palindromic subsequence that can be obtained from the string `S`. The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) — the length of the string `S`. The second line contains the string `S`, consisting of lowercase English letters. Print one integer — the length of the longest palindromic subsequence that can be obtained from string `S`. Example: Input: 7 agbdba Output: 5 In the first sample, the longest palindromic subsequence is \\"abdba\\", which has length 5.","solution":"def longest_palindromic_subsequence_length(S): Returns the length of the longest palindromic subsequence in string S. n = len(S) # Create a 2D table to store the results of subproblems dp = [[0]*n for _ in range(n)] # A single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is length of the substring. for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of the longest palindromic subsequence is dp[0][n-1] return dp[0][n-1]"},{"question":"Omar has recently discovered a sequence called \\"Splendid Sequence\\". A Splendid Sequence of length n is a sequence of integers where each integer is either a 0 or a 1. Omar wants to know how many different Splendid Sequences of length n are there that do not contain two consecutive 1\'s. Help Omar with this task. The result can be quite large, so you should provide the answer modulo 998244353. # Input - A single integer n (1 le n le 10^6). # Output - Print a single integer, the number of valid Splendid Sequences of length n modulo 998244353. # Example Input: ``` 3 ``` Output: ``` 5 ``` # Explanation For n = 3, the valid sequences are: - 000 - 001 - 010 - 100 - 101","solution":"MOD = 998244353 def count_splendid_sequences(n): if n == 1: return 2 # \\"0\\" and \\"1\\" # Let dp[i] be the number of splendid sequences of length i # dp[i] = number of sequences ending with \\"0\\" + number of sequences ending with \\"1\\" dp = [0] * (n + 1) # Base cases dp[1] = 2 # \\"0\\" and \\"1\\" if n > 1: dp[2] = 3 # \\"00\\", \\"01\\", and \\"10\\" # Fill the dp array using the recurrence relation for i in range(3, n + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n]"},{"question":"You are given an array of integers of size `n`. You need to perform `q` queries on this array. The types of queries are: 1. `1 l r k`: For this query, you need to return the number of elements in the subarray from index `l` to `r` (inclusive) that are divisible by `k`. 2. `2 l r`: For this query, you need to reverse the subarray from index `l` to `r` (inclusive). The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 2 × 10^5) — the size of the array and the number of queries. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^6) — the elements of the array. The next `q` lines contain the queries. Each query is of one of the two types mentioned above. For the first query type, `1 l r k` (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 10^6), and for the second query type, `2 l r` (1 ≤ l ≤ r ≤ n). Output the result of each query of the first type in a new line. Example: Input: ``` 5 3 5 4 3 2 1 1 1 5 2 2 1 5 1 1 5 2 ``` Output: ``` 2 3 ``` In this example, the array initially is `[5, 4, 3, 2, 1]`. The first query asks for the number of elements divisible by `2` between indices `1` and `5`, which are `4` and `2`, so the answer is `2`. The second query reverses the subarray from `1` to `5`, resulting in `[1, 2, 3, 4, 5]`. The third query asks again for the number of elements divisible by `2` between indices `1` and `5`, which now are `2` and `4`, so the answer is `2`.","solution":"def process_queries(n, q, arr, queries): results = [] for query in queries: if query[0] == 1: l, r, k = query[1] - 1, query[2] - 1, query[3] count = sum(1 for i in range(l, r + 1) if arr[i] % k == 0) results.append(count) elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 arr[l:r + 1] = arr[l:r + 1][::-1] return results"},{"question":"Leo loves reading about statistics and numbers. He recently came across a fascinating concept of a **range sum** and decided to experiment with it using his favorite sequences. A sequence of integers can have multiple sub-sequences, where a sub-sequence is derived by removing some or no elements from the original sequence without changing the order of the remaining elements. Given an array of integers, Leo wants to find the range sum of a sub-sequence that maximizes this range sum. The range sum of a sub-sequence is defined as the difference between the maximum and minimum elements of the sub-sequence. Can you help Leo find the maximum possible range sum for any sub-sequence of the given array? # Input - The first line contains an integer `n` (1 ≤ `n` ≤ 10^5) — the length of the array. - The second line contains `n` space-separated integers `a1, a2, ..., an` ( -10^9 ≤ `ai` ≤ 10^9) — the elements of the array. # Output - Output a single integer — the maximum possible range sum of any sub-sequence of the array. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 4 ``` # Explanation In the example: - The array is `[1, 2, 3, 4, 5]`. - The maximum and minimum elements of the array are 5 and 1 respectively. - The range sum is `5 - 1 = 4`, which is the maximum possible range sum of any sub-sequence of this array. Solve the problem considering that the size of the input and output could be very large, ensure that the solution is efficient and performs optimally even for larger constraints.","solution":"def max_range_sum(n, arr): Returns the maximum possible range sum of any sub-sequence of the given array. The range sum of a sub-sequence is defined as the difference between the maximum and minimum elements of the sub-sequence. max_element = max(arr) min_element = min(arr) return max_element - min_element"},{"question":"The town of Coderville is planning a series of events in its newly renovated central park. The mayor wants to ensure that none of the events overlap in order to maximize attendance and enjoyment for all residents. Each event has a specific start and end time, and the mayor needs your help to schedule them. You are given a list of events, where each event is represented by a tuple containing its name (a string of 1 to 10 lowercase Latin letters), start time, and end time. Both the start time and end time are integers representing hours of the day (0 to 23). No two events sharing the same name have overlapping times. You need to write a program that prints the non-overlapping events with the highest total duration that can be scheduled in a single day. # Input The first line contains an integer n (1 ≤ n ≤ 1000) which indicates the number of events. Each of the following n lines contains the name of an event, followed by its start and end times. # Output Print the number of events that are part of the optimal schedule in the first line. For each event in the optimal schedule, print the event name, start time, and end time separated by a space, on a new line. The order of events in the output does not matter. # Example Input ```plaintext 5 concert 5 8 parade 9 11 conference 8 10 workshop 10 12 fireworks 20 23 ``` Output ```plaintext 4 concert 5 8 parade 9 11 workshop 10 12 fireworks 20 23 ``` # Note In the example above, the events \\"concert\\", \\"parade\\", \\"workshop\\", and \\"fireworks\\" can be scheduled without any overlap, maximizing the total scheduled time as no time conflicts occur among them. The event \\"conference\\" cannot be included as it overlaps with \\"parade\\" and \\"workshop\\", and its inclusion would reduce the total number of non-overlapping events.","solution":"def schedule_events(events): Returns the optimal set of non-overlapping events that maximize the total duration. # Sort events by end time to try to fit the maximum number of events events.sort(key=lambda x: x[2]) selected_events = [] last_end_time = -1 for event in events: name, start, end = event if start >= last_end_time: selected_events.append(event) last_end_time = end return selected_events def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0].strip()) events = [] for i in range(1, n + 1): parts = data[i].strip().split() name = parts[0] start = int(parts[1]) end = int(parts[2]) events.append((name, start, end)) optimal_schedule = schedule_events(events) print(len(optimal_schedule)) for event in optimal_schedule: name, start, end = event print(name, start, end) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of n integers, your task is to determine the maximum possible product of a non-empty subsequence of the array such that the product is divisible by a given integer d. A subsequence is obtained by deleting some (or none) of the elements without changing the order of the remaining elements. The first line of the input contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 10^9) — the number of elements in the array and the given integer. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output the maximum product of any non-empty subsequence of the array that is divisible by d. If no such subsequence exists, print -1. Example: Input: 5 2 3 6 2 8 7 Output: 336 In the example provided: - The subsequence [6, 2, 8] has a product 96 which is divisible by 2. - The subsequence [3, 6, 2, 8, 7] has a product 2016 which is also divisible by 2. - The maximum product among all such subsequences is 2016. Thus, the answer is 336 (Correcting example output).","solution":"from itertools import combinations def max_product_divisible_by_d(n, d, array): max_product = -1 for i in range(1, n + 1): for subseq in combinations(array, i): product = 1 for num in subseq: product *= num if product % d == 0: max_product = max(max_product, product) return max_product"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the length of the longest substring that contains at most two distinct characters. The first line contains an integer q (1 le q le 10,000) — the number of queries. Each of the next q lines contains a string s (1 le |s| le 100,000) — the string for which you need to find the length of the longest substring with at most two distinct characters. The sum of lengths of all strings over all queries does not exceed 1,000,000. For each query, output a single integer — the length of the longest substring with at most two distinct characters. **Example:** Input: ``` 3 eceba ccaabbb abcabcabc ``` Output: ``` 3 5 2 ``` **Explanation:** 1. In the string \\"eceba\\", the longest substring with at most 2 distinct characters is \\"ece\\", which has length 3. 2. In the string \\"ccaabbb\\", the longest substring with at most 2 distinct characters is \\"aabbb\\", which has length 5. 3. In the string \\"abcabcabc\\", no substring longer than 2 can have at most 2 distinct characters, so the answer is 2.","solution":"def longest_substr_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len def process_queries(queries): results = [] for s in queries: results.append(longest_substr_two_distinct(s)) return results"},{"question":"A programmer needs to implement a simple blockchain. A blockchain consists of a sequential chain of blocks. Each block contains: - An index (a sequential number starting from 0 for the genesis block) - A timestamp (the time when the block was created) - Data (any arbitrary data) - The previous hash (a string representing the hash of the previous block) The genesis block is the first block in the blockchain and does not have a previous hash. Each subsequent block points to the hash of the previous block. For simplicity, we use a dummy hash for the previous block for the genesis block. Implement the following functions: 1. `create_genesis_block()`: This function creates the genesis block. The genesis block should have an index of 0, a timestamp, dummy data (like \\"Genesis Block\\"), and a dummy hash (like \\"0\\"). 2. `create_block(previous_block, data)`: This function creates a new block given the previous block and the new block\'s data. The new block should have an incremented index, a timestamp, the given data, and the hash of the previous block. Assume the hash is simply the string representation of the previous block\'s index. 3. `is_chain_valid(blockchain)`: This function checks if the blockchain is valid. A blockchain is valid if the index of each block is one greater than the previous block\'s index and the previous hash of each block matches the hash of the previous block. The first line contains a list of strings representing the data for new blocks separated by spaces. Output \\"VALID\\" if the blockchain created with the given data is valid, otherwise output \\"INVALID\\". For example, given the input: \\"Block1 Block2 Block3\\" The output should be \\"VALID\\". Below is the function signature: ```python import time class Block: def __init__(self, index, timestamp, data, previous_hash): self.index = index self.timestamp = timestamp self.data = data self.previous_hash = previous_hash def create_genesis_block(): pass def create_block(previous_block, data): pass def is_chain_valid(blockchain): pass if __name__ == \\"__main__\\": data_list = input().split() blockchain = [create_genesis_block()] for data in data_list: blockchain.append(create_block(blockchain[-1], data)) if is_chain_valid(blockchain): print(\\"VALID\\") else: print(\\"INVALID\\") ```","solution":"import time class Block: def __init__(self, index, timestamp, data, previous_hash): self.index = index self.timestamp = timestamp self.data = data self.previous_hash = previous_hash def create_genesis_block(): Creates the genesis block. return Block(0, int(time.time()), \\"Genesis Block\\", \\"0\\") def create_block(previous_block, data): Creates a new block given the previous block and the new block\'s data. index = previous_block.index + 1 timestamp = int(time.time()) previous_hash = str(previous_block.index) # Dummy hash as string representation of previous block\'s index return Block(index, timestamp, data, previous_hash) def is_chain_valid(blockchain): Checks if the blockchain is valid. A blockchain is valid if the index of each block is one greater than the previous block\'s index and the previous hash of each block matches the hash of the previous block. for i in range(1, len(blockchain)): current_block = blockchain[i] previous_block = blockchain[i - 1] if current_block.index != previous_block.index + 1: return False if current_block.previous_hash != str(previous_block.index): return False return True if __name__ == \\"__main__\\": data_list = input().split() blockchain = [create_genesis_block()] for data in data_list: blockchain.append(create_block(blockchain[-1], data)) if is_chain_valid(blockchain): print(\\"VALID\\") else: print(\\"INVALID\\")"},{"question":"An airline company wants to manage flight schedules for their fleet. Each plane must have at least k minutes between consecutive flights to allow for turnaround and other necessary procedures. Given a list of flight times during a day, you are to determine whether it\'s feasible to schedule all these flights such that no two flights handled by the same plane violate the k-minute gap requirement. The first line of input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) — the number of flights and the minimum required gap in minutes between consecutive flights of the same plane. The second line contains n integers t1, t2, ..., tn (0 ≤ ti < 1440) — the start times of the flights in minutes from the start of the day (e.g., 0 stands for 00:00, 1439 for 23:59). The values are given in non-decreasing order. Output \\"Yes\\" if it is possible to schedule all flights such that the gap between any two consecutive flights handled by the same plane is at least k minutes. Otherwise, output \\"No\\". For example, given the flights [60, 180, 300] and k = 120, the output is \\"Yes\\" because each flight can be scheduled with at least 120 minutes apart on a single plane. In another case, given the flights [60, 180, 250] and k = 120, the output is \\"No\\" because the first and second flights can be scheduled on a single plane, but the gap between the second and third flight is less than 120 minutes, which violates the requirement.","solution":"def can_schedule_flights(n, k, times): Checks if it is possible to schedule all flights such that the gap between any two consecutive flights handled by the same plane is at least k minutes. Parameters: n (int): Number of flights. k (int): Minimum required gap in minutes between consecutive flights. times (list of int): Start times of the flights in minutes from the start of the day. Returns: str: \\"Yes\\" if it is possible to schedule all flights with at least k minutes apart, otherwise \\"No\\". for i in range(1, n): if times[i] - times[i-1] < k: return \\"No\\" return \\"Yes\\""},{"question":"Polycarp has a favorite board game that he often plays with his friends. The game board is represented by a grid of size n x n, where n is an odd integer (1 ≤ n ≤ 100). Each cell of the grid contains either a number from 1 to 9 or a dot (\' . \') which means the cell is initially empty. One day, Polycarp decided to modify the game slightly. He selected two cells and swapped their contents. However, after performing the swap, he forgot which cells he selected. Polycarp now wants to restore the game board to its original state. He needs to figure out which two cells were swapped and then swap them back. You are given the modified state of the grid. Determine the coordinates of the two swapped cells (i1, j1) and (i2, j2) such that swapping these two cells will restore the board to a valid game state. A grid is in a valid game state if: 1. Each row contains exactly n numbers and (n-1)/2 dots. 2. Each column contains exactly n numbers and (n-1)/2 dots. Exceptionally, the row coordinates (i1, i2) and the column coordinates (j1, j2) can individually contain an extra dot if they undergo the swap process. # Input - The first line contains a single integer n (1 ≤ n ≤ 100), the size of the grid. - The following n lines contain the grid with n characters each (either a digit from \'1\' to \'9\' or a dot). # Output - Print two integers pairs (i1, j1), (i2, j2) indicating the coordinates of the swapped cells (1 ≤ i1, i2, j1, j2 ≤ n). If there are multiple solutions, print any of them. # Example Input ``` 3 1 2 3 4 . 6 7 8 . ``` Output ``` 2 2 3 3 ``` Explanation: Swapping the cells (2, 2) and (3, 3) will restore the board to the original state.","solution":"def find_swapped_cells(n, grid): row_counts = [0] * n col_counts = [0] * n dot_positions = [] for i in range(n): for j in range(n): if grid[i][j] == \'.\': dot_positions.append((i, j)) row_counts[i] += 1 col_counts[j] += 1 for i in range(n): row_counts[i] -= (n - 1) // 2 col_counts[j] -= (n - 1) // 2 i1 = j1 = i2 = j2 = -1 for i, j in dot_positions: if row_counts[i] == 1 and col_counts[j] == -1: i1, j1 = i, j elif row_counts[i] == -1 and col_counts[j] == 1: i2, j2 = i, j if i1 == -1: i1, j1 = dot_positions[0] i2, j2 = dot_positions[1] return (i1+1, j1+1), (i2+1, j2+1)"},{"question":"A warehouse manager needs to optimize the retrieval process for items stored in a set of bins. The warehouse is represented as a grid of size n times m, where each cell represents a bin that can either contain an item (denoted by 1) or be empty (denoted by 0). To streamline the retrieval process, the manager wants to find the minimum number of steps required to collect all items. A step is defined as moving from one bin to an adjacent bin horizontally or vertically. The manager starts from any bin and can move to collect items. Given the grid configuration, write an algorithm to determine the minimum number of steps required to collect all items. If there are no items in the grid, the result should be zero. # Input format: - The first line contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. - The next n lines contain m integers each, representing the grid configuration, where each integer is either 0 or 1. # Output format: - Print one integer — the minimum number of steps required to collect all items. If there are no items, print zero. # Example: Input: 4 4 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 Output: 8 Explanation: One possible way to collect all items is: - Start at (1, 2) -> move to (2, 1) -> move to (2, 4) -> move to (3, 3). - Total steps = 1 (from (1, 2) to (2, 1)) + 3 (from (2, 1) to (2, 4)) + 2 (from (2, 4) to (3, 3)) = 8 steps. Note: The exact path may vary, but the minimum steps required will be the same.","solution":"from collections import deque def min_steps_to_collect_all_items(grid): Returns the minimum number of steps required to collect all items in the grid. Each cell in the grid may contain 1 (item) or 0 (empty). n = len(grid) m = len(grid[0]) items = [] # Collect all positions of items for i in range(n): for j in range(m): if grid[i][j] == 1: items.append((i, j)) if not items: return 0 # Function to calculate manhattan distance def manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) # Breadth-first search (BFS) function to find the minimum cost to collect all items starting from a given starting point def bfs(start): visited = set() queue = deque([(start, 0)]) # (current position, current distance) visited.add(start) total_steps = 0 items_collected = 0 while queue: current, dist = queue.popleft() if grid[current[0]][current[1]] == 1: total_steps += dist items_collected += 1 if items_collected == len(items): return total_steps dist = 0 # Reset distance for collecting next item for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = current[0] + dx, current[1] + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return float(\'inf\') # In case not all items can be collected # Get the minimum steps required starting from each item position min_steps = float(\'inf\') for item in items: min_steps = min(min_steps, bfs(item)) return min_steps # Example use case if __name__ == \\"__main__\\": n, m = 4, 4 grid = [ [0, 1, 0, 0], [1, 0, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0] ] print(min_steps_to_collect_all_items(grid)) # Output: 8"},{"question":"Tom is hosting a party and wants to prepare enough chairs for his guests. He has a total of `n` guests coming, but the number of guests who will show up at the same time may vary during the party. The number of chairs required at any given moment is always equal to the maximum number of guests present at that moment. Tom has a record of guest arrivals and departures. He wants to know the maximum number of guests present at the party at any moment to ensure he prepares enough chairs. The first line contains the integer `n` (1 ≤ n ≤ 1000), the number of guests coming to the party. Each of the next `n` lines contains two integers `a_i` and `d_i` (0 ≤ a_i < d_i ≤ 1000), representing the arrival time and departure time of the i-th guest, respectively. Print a single integer — the maximum number of guests present at the party at any given moment. **Example:** Input: ``` 5 1 5 2 6 3 8 5 7 6 10 ``` Output: ``` 4 ``` In this example, the maximum number of guests present at the party at the same time is 4. This occurs between time 5 and time 6.","solution":"def max_guests(n, intervals): Returns the maximum number of guests present at the party at any given moment. Parameters: n (int): The number of guests coming to the party. intervals (list of tuples): Each tuple contains two integers representing the arrival and departure time of a guest. Returns: int: The maximum number of guests present at the party at any given moment. events = [] for a, d in intervals: events.append((a, \'arrival\')) events.append((d, \'departure\')) events.sort() max_guests_present = 0 current_guests_present = 0 for time, event in events: if event == \'arrival\': current_guests_present += 1 max_guests_present = max(max_guests_present, current_guests_present) elif event == \'departure\': current_guests_present -= 1 return max_guests_present"},{"question":"You are given a 2D grid of size n x m representing a map where each cell can be either land (denoted by \'L\') or water (denoted by \'W\'). You are tasked with determining the size of the largest island formed by connecting adjacent lands horizontally or vertically. Write a Python function `largest_island(grid: List[List[str]]) -> int` that takes the grid as its input and returns the size of the largest island. # Input - An integer n (1 ≤ n ≤ 200) denoting the number of rows. - An integer m (1 ≤ m ≤ 200) denoting the number of columns. - A 2D list `grid` of size n x m consisting of characters \'L\' for land and \'W\' for water. # Output - Return an integer, the size of the largest island in the grid. If there are no islands, return 0. # Example ```python grid = [ [\'L\', \'L\', \'W\'], [\'L\', \'W\', \'L\'], [\'W\', \'L\', \'L\'] ] print(largest_island(grid)) # Output: 3 ``` # Note - In the example, there are two islands, one of size 3 and another of size 2. - You need to explore all four possible directions (up, down, left, right) when checking for connected lands.","solution":"from typing import List def largest_island(grid: List[List[str]]) -> int: def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'W\': return 0 grid[x][y] = \'W\' # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size n = len(grid) m = len(grid[0]) max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"The city council has decided to build a new water pipeline network for a small town consisting of N houses and M planned pipelines. The goal is to provide water to every house utilizing the minimum possible number of pipelines while ensuring that water can be distributed to each house starting from the water source located at house 1. Each planned pipeline connects exactly two houses. Occasionally, some information about the pipelines may be inaccurate, and your task includes determining if it is possible to modify the misinformation in up to one pipeline so that the network becomes fully connected. If the network can be made to connect all houses with the provided pipelines (or by correcting at most one pipeline), output \\"YES\\", otherwise output \\"NO\\". Each house is identified by an integer from 1 to N. **Input:** The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 2000) — the number of houses and the number of planned pipelines, respectively. Each of the next M lines contains two integers ai and bi (1 ≤ ai, bi ≤ N) indicating a planned pipeline between house ai and house bi. **Output:** Print \\"YES\\" if it is possible to connect all houses with the provided pipelines (or by correcting at most one pipeline), otherwise print \\"NO\\". **Example:** ``` Input: 4 2 1 2 3 4 Output: NO Input: 5 4 1 2 2 3 3 4 5 4 Output: YES ``` It is guaranteed that the graph has no self-loops or multiple edges.","solution":"def can_connect_all_houses(N, M, pipelines): from collections import defaultdict, deque def bfs_to_check_all_connected(graph): visited = [False] * (N + 1) queue = deque([1]) visited[1] = True count = 1 while queue: house = queue.popleft() for neighbor in graph[house]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count == N if N == 1: return \\"YES\\" graph = defaultdict(list) for a, b in pipelines: graph[a].append(b) graph[b].append(a) if bfs_to_check_all_connected(graph): return \\"YES\\" for a, b in pipelines: graph[a].remove(b) graph[b].remove(a) if bfs_to_check_all_connected(graph): return \\"YES\\" graph[a].append(b) graph[b].append(a) return \\"NO\\" # Test with sample inputs print(can_connect_all_houses(4, 2, [(1, 2), (3, 4)])) # Expected: NO print(can_connect_all_houses(5, 4, [(1, 2), (2, 3), (3, 4), (5, 4)])) # Expected: YES"},{"question":"In Ancient Byteland, there exist several mystical trees. Each mystical tree has exactly ( n ) nodes and ( n-1 ) edges and is undirected. The nodes are numbered from ( 1 ) to ( n ). A tree is special if and only if for every pair of nodes ( u ) and ( v ) the distance between them (the number of edges in the path connecting them) is even. You are given ( t ) test cases. For each test case, you need to determine if the given tree is special, and if it is, you also need to build and print the tree. The input consists of several test cases. The first line contains a single integer ( t ) — the number of test cases. Each test case consists of an integer ( n ). You need to consider the following constraints: - ( 1 leq t leq 10 ) - ( 1 leq n leq 100 ) If it\'s possible to create such a tree, print \\"YES\\" and then ( n-1 ) lines, each containing two space-separated integers ( u ) and ( v ) which denotes there is an edge between nodes ( u ) and ( v ). If it\'s not possible, print \\"NO\\". For example: ``` 2 3 4 ``` Your output should be: ``` NO YES 1 2 2 3 3 4 ```","solution":"def is_special_tree(n): Determine if a tree with n nodes is special and return its edges if it is. A tree is special if and only if for every pair of nodes u and v the distance between them is even. Args: n (int): The number of nodes in the tree. Returns: tuple: (\\"YES\\", edges) if the tree is special, otherwise (\\"NO\\", []). edges is a list of tuples representing the edges of the tree. if n % 2 == 1: return (\\"NO\\", []) else: edges = [] for i in range(1, n): edges.append((i, i + 1)) return (\\"YES\\", edges) def solve(test_cases): results = [] for n in test_cases: result = is_special_tree(n) if result[0] == \\"NO\\": results.append(\\"NO\\") else: results.append(\\"YES\\") for edge in result[1]: results.append(f\\"{edge[0]} {edge[1]}\\") return results"},{"question":"You are given an array of n positive integers. Your task is to determine if there is a subarray with a sum equal to a given value S. A subarray is a contiguous part of an array. The first line of input contains two integers n and S (1 leq n leq 10^5, 1 leq S leq 10^9). The second line contains n positive integers a_1, a_2, ..., a_n (1 leq a_i leq 10^5). If such a subarray exists, print \\"YES\\" and the starting and ending indices (1-based) of the subarray. If there are multiple solutions, you can print any. Otherwise, print \\"NO\\". # Example Input: ``` 5 12 1 2 3 7 5 ``` Output: ``` YES 2 4 ``` In the example above, the subarray starting from index 2 to index 4 (1-based) has a sum equal to S = 12.","solution":"def find_subarray_with_sum(n, S, arr): Finds subarray with sum equals to S. Parameters: n (int): size of the array. S (int): required sum. arr (list): list of positive integers. Returns: tuple: a tuple containing \\"YES\\" and the 1-based starting and ending indices of the subarray if such a subarray exists, otherwise \\"NO\\". current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > S and start <= end: current_sum -= arr[start] start += 1 if current_sum == S: return \\"YES\\", start + 1, end + 1 return \\"NO\\","},{"question":"Four knights are participating in a jousting tournament. Each knight competes in one-on-one jousts against each of the other three knights. Every time a knight wins a joust, they gain a point. All the results from the jousts are recorded, and each knight\'s total points are calculated. Your task is to determine the ranking of the knights based on the points they have accumulated. The knight with the highest points should be ranked first, the next highest points second, and so on. If two knights have the same points, they should be ranked according to their original order in the input. The first line contains four integers k1, k2, k3, k4 (0 ≤ ki ≤ 3 for each i, 1 ≤ i ≤ 4), representing the total points for each knight. The output should be four integers representing the ranks of the knights based on their total points, with 1 being the highest rank (i.e., the knight with the most points). For example, if the input is: 3 1 2 0 The output should be: 1 3 2 4 In this case: - The first knight has 3 points and is ranked 1st. - The second knight has 1 point and is ranked 3rd. - The third knight has 2 points and is ranked 2nd. - The fourth knight has 0 points and is ranked 4th.","solution":"def knight_rankings(points): Returns the ranking of knights based on the points accumulated. :param points: A list of four integers representing the points of the knights. :return: A list of four integers representing the ranks of the knights. # Create a list with tuples (index, points) indexed_points = [(index, point) for index, point in enumerate(points)] # Sort the list by points in descending order. If points are the same, keep original order indexed_points.sort(key=lambda x: (-x[1], x[0])) # Generate rank based on sorted order ranks = [0] * 4 for rank, (index, point) in enumerate(indexed_points, 1): ranks[index] = rank return ranks"},{"question":"You are tasked with developing an efficient algorithm that determines the number of distinct ways to partition an integer n into a sum of positive integers where the order of integers does not matter. For example, given n = 5, the distinct partitions are: - 5 - 4 + 1 - 3 + 2 - 3 + 1 + 1 - 2 + 2 + 1 - 2 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 Thus, there are 7 distinct partitions for n = 5. Write a program that takes an integer n as input and outputs the number of distinct partitions of n. # Input The input consists of a single integer n (1 ≤ n ≤ 500). # Output Output a single integer representing the number of distinct partitions of n. # Example Input: ``` 5 ``` Output: ``` 7 ```","solution":"def number_of_partitions(n): Returns the number of distinct partitions of the integer n. # Create a memoization array to store the number of partitions for each number from 0 to n dp = [1] + [0] * n # Iterate over each number from 1 to n for num in range(1, n + 1): # Update the partition count for each number from num to n for i in range(num, n + 1): dp[i] += dp[i - num] return dp[n]"},{"question":"The Great Alchemist is experimenting with different ingredients to create a magical potion. He has an array of n distinct ingredients, each represented by an integer. He can only use certain combinations of ingredients, defined by a list of valid pairs of ingredients that can be mixed to create a potion. Each pair is represented by their indices in the array. The objective is to determine the maximum number of unique potions that can be created using these combinations. Given the number of ingredients, the number of valid pairs, and the valid pairs themselves, produce the maximum possible number of unique potions. The first line contains two integers n and m (1 leq n leq 100, 0 leq m leq frac{n cdot (n-1)}{2}) — the number of ingredients and the number of valid pairs. The second line contains n distinct integers representing the ingredients. The following m lines each contains two integers a_i and b_i (1 leq a_i, b_i leq n, a_i neq b_i) — the indices of ingredients that can be mixed to create a potion. It is guaranteed that all pairs are unique. Print a single integer — the maximum number of unique potions that can be created. In the first example, the ingredients are [1, 2, 3] and the valid pairs are (1, 2) and (2, 3). The maximum number of unique potions is 2. In the second example, the ingredients are [10, 20, 30, 40] and the valid pairs are (1, 2), (2, 3), (3, 4). The maximum number of unique potions is 3.","solution":"def max_unique_potions(n, m, ingredients, pairs): Determines the maximum number of unique potions that can be created using the given pairs. :param n: Number of ingredients :param m: Number of valid pairs :param ingredients: List of ingredient integers :param pairs: List of tuples representing valid pairs of ingredients :return: Maximum number of unique potions from collections import defaultdict, deque if m == 0: return 0 # Create adjacency list for the graph adj_list = defaultdict(list) for a, b in pairs: adj_list[a].append(b) adj_list[b].append(a) # Function to perform BFS and count the nodes in a connected component def bfs(start, visited): queue = deque([start]) visited.add(start) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count visited = set() max_potions = 0 # Go through all nodes and apply BFS if the node is not visited for i in range(1, n + 1): if i not in visited: # Count the size of the connected component component_size = bfs(i, visited) max_potions += component_size - 1 # Maximum potions is (size of component - 1) return max_potions"},{"question":"Alice is planning a competitive programming event and wants to create customized T-shirts for the participants. She wants to ensure that the size distribution of the T-shirts matches the exact needs of the participants. She gathers information about the required T-shirt sizes from the participants and receives a list containing the T-shirt sizes required by each participant. She also has a stock of T-shirts available in different sizes. Your task is to help Alice determine whether she can meet the exact T-shirt size requirements of all the participants. Write a program to check whether she can distribute the T-shirts according to the requirements. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of participants. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the required T-shirt sizes of the participants. The third line contains an integer m (1 ≤ m ≤ 1000) — the number of T-shirts available. The fourth line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 100) — the T-shirt sizes available in stock. Print \\"YES\\" if Alice can meet the exact T-shirt size requirements, otherwise print \\"NO\\". In the first example, Alice has three participants with T-shirt size requirements [2, 3, 1] and she has T-shirts in sizes [1, 2, 3]. This is enough to match the participants\' requirements exactly. Thus, the answer is \\"YES\\". In the second example, Alice has four participants with T-shirt size requirements [4, 5, 5, 6] and she has T-shirts in sizes [5, 5, 6]. This is not enough to match all the participants\' requirements. Thus, the answer is \\"NO\\".","solution":"def can_meet_requirements(n, participant_sizes, m, stock_sizes): Determines whether the exact T-shirt size requirements can be met. Args: n: int - number of participants participant_sizes: list of int - required T-shirt sizes for participants m: int - number of T-shirts available stock_sizes: list of int - sizes of T-shirts available in stock Returns: str: \\"YES\\" if exact requirements can be met, otherwise \\"NO\\" from collections import Counter participant_counter = Counter(participant_sizes) stock_counter = Counter(stock_sizes) for size in participant_counter: if participant_counter[size] > stock_counter[size]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an integer array `arr` of length `n`. Your task is to divide this array into two non-empty subarrays `A` and `B` such that the absolute difference of the sum of elements in these subarrays is minimized. A subarray is defined as a contiguous subsequence of the array. Output the minimum possible absolute difference between the sums of the two subarrays. # Input: The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^4). # Output: Print a single integer — the minimum possible absolute difference between the sums of the two subarrays. # Example: Input: ``` 5 3 1 2 4 3 ``` Output: ``` 1 ``` Explanation: By splitting the array into subarrays `[3, 1, 2]` and `[4, 3]`, the sum of elements in each subarray is `6` and `7`, respectively. The absolute difference is `|6 - 7| = 1`, which is the minimum achievable.","solution":"def min_abs_diff(arr): Finds the minimum possible absolute difference between the sums of the two non-empty subarrays. total_sum = sum(arr) prefix_sum = 0 min_diff = float(\'inf\') # Loop through the array, considering each element as the end of the left subarray for i in range(len(arr) - 1): prefix_sum += arr[i] left_sum = prefix_sum right_sum = total_sum - left_sum current_diff = abs(left_sum - right_sum) if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You are working at a fruit distribution company. Your task is to manage the orders from various clients. Each client requests a specific number of fruits and they have to be delivered in the sequence they arrive. You have two types of fruits, apples and oranges, each having a specific cost per fruit. You have to determine the minimum cost required to fulfill the client\'s orders. Each order must be fulfilled without re-ordering the fruits. You are given the cost of one apple and one orange, the number of apples and oranges available, and a list of client orders where each order is an integer indicating the type of fruit requested (1 for apple and 2 for orange). For each order, you need to fulfill it with the fruit requested. If it is not possible to fulfill all orders due to insufficient inventory, your program should indicate that it is impossible. Input: The first line contains a single integer T (1 ≤ T ≤ 100) representing the number of test cases. Each test case consists of five lines: The first line contains two integers A and B (0 ≤ A, B ≤ 10^6) — the number of apples and oranges available, respectively. The second line contains two integers cA and cB (1 ≤ cA, cB ≤ 1000) — the cost of one apple and one orange, respectively. The third line contains an integer n (1 ≤ n ≤ 10^6) — the number of client orders. The fourth line contains n integers, each being 1 (apple) or 2 (orange) — indicating the order requests. Output: For each test case, print a single integer — the minimum cost to fulfill the client\'s orders, or print \\"Impossible\\" if it is not possible to fulfill the orders due to insufficient inventory. Example: Input: 3 5 3 2 3 4 1 2 1 2 3 3 5 2 2 2 2 7 1 1 2 2 1 1 2 5 5 10 20 2 1 2 Output: 10 Impossible 30 Explanation of Example: 1. For the first test case, the orders are for 2 apples and 2 oranges, and there are sufficient fruits to fulfill these orders at the minimum cost of 10. 2. For the second test case, it is impossible to fulfill the client\'s orders since there are not enough apples and oranges available. 3. For the third test case, it is straightforward to fulfill the order with the given number of apples and oranges, with a minimum cost of 30.","solution":"def min_cost_fruit_distribution(T, test_cases): results = [] for i in range(T): A, B = test_cases[i][\'A\'], test_cases[i][\'B\'] cA, cB = test_cases[i][\'cA\'], test_cases[i][\'cB\'] n = test_cases[i][\'n\'] orders = test_cases[i][\'orders\'] cost = 0 is_possible = True for order in orders: if order == 1: # Apple if A > 0: cost += cA A -= 1 else: is_possible = False break elif order == 2: # Orange if B > 0: cost += cB B -= 1 else: is_possible = False break if is_possible: results.append(cost) else: results.append(\\"Impossible\\") return results"},{"question":"Lesha has a garden with a rectangular grid of size n × m, where each cell in the grid can either hold a plant or be empty. Lesha wants to create a straight path through the garden, either horizontal or vertical, that does not cross any empty cell, and which contains exactly k plants. Given the grid of the garden and the integer k, determine if such a path exists. If it does, provide the coordinates of the starting and ending cells of the path. If there are multiple such paths, you may output any one of them. A path is defined by two cells (r1, c1) and (r2, c2) such that: - For a horizontal path: r1 = r2 and c1 ≤ c2 - For a vertical path: c1 = c2 and r1 ≤ r2 - Every cell in this path contains a plant. # Input The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n, m)), representing the dimensions of the garden and the exact number of plants required in the path. The next n lines contain m characters each, describing the garden grid. Each character is either \'.\' (empty) or \'P\' (plant). # Output - If there is no such path, print a single integer -1. - Otherwise, print four integers r1, c1, r2, and c2, representing the coordinates of the starting and ending cells of the path. # Example Input ``` 5 5 3 ..... .PPPP ..... .PPPP ..... ``` Output ``` 2 2 2 4 ``` Input ``` 5 5 4 ..... .PPP. ..... ..P.. ..... ``` Output ``` -1 ```","solution":"def find_path(n, m, k, grid): def find_horizontal_path(n, m, k, grid): for r in range(n): for c in range(m - k + 1): if all(grid[r][c + i] == \'P\' for i in range(k)): return r+1, c+1, r+1, c+k return None def find_vertical_path(n, m, k, grid): for c in range(m): for r in range(n - k + 1): if all(grid[r + i][c] == \'P\' for i in range(k)): return r+1, c+1, r+k, c+1 return None horizontal_path = find_horizontal_path(n, m, k, grid) if horizontal_path: return horizontal_path vertical_path = find_vertical_path(n, m, k, grid) if vertical_path: return vertical_path return -1 # Example usage: n = 5 m = 5 k = 3 grid = [ \\".....\\", \\".PPPP\\", \\".....\\", \\".PPPP\\", \\".....\\" ] # This should print (2, 2, 2, 4) or any other valid path with 3 plants print(find_path(n, m, k, grid))"},{"question":"Sana is planning to organize a small competition among her friends. The competition involves solving puzzles, and she has n puzzles to distribute among her friends. To make the competition fair, Sana wants to ensure that the number of solved puzzles for each friend is as balanced as possible. Sana wants to know the minimum possible difference between the maximum and minimum number of puzzles solved by any friend. For each of her friends to be able to participate, Sana must give at least one puzzle to each friend. Moreover, each friend should receive a contiguous sequence of puzzles to solve. You are given an array p of length n (1 ≤ n ≤ 1000), where pi represents the difficulty of the i-th puzzle. Help Sana distribute the puzzles in the described manner such that the difference between the maximum and minimum number of puzzles solved by any friend is minimized. The first line of the input contains two integers n and m (1 ≤ m ≤ n) — the number of puzzles and the number of friends respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000), where the i-th integer is the difficulty of the i-th puzzle. Output a single integer — the minimum possible difference between the maximum and minimum number of puzzles solved by any friend, after distributing the puzzles according to the rules. For example, if Sana has 6 puzzles with difficulties [10, 20, 30, 40, 50, 60] and she wants to distribute them among 3 friends, the optimal way is: * Friend 1: Puzzles with difficulties [10, 20] * Friend 2: Puzzles with difficulties [30, 40] * Friend 3: Puzzles with difficulties [50, 60] The difference between the maximum and minimum number of puzzles solved by any friend in this case is 0, which is the optimal solution.","solution":"def min_puzzle_difference(n, m, puzzles): Returns the minimum possible difference between the maximum and minimum number of puzzles solved by any friend. Parameters: n (int): Number of puzzles. m (int): Number of friends. puzzles (list): List of integers representing the difficulty of each puzzle. Returns: int: The minimum possible difference between the maximum and minimum number of puzzles solved by any friend. puzzles.sort() min_diff = float(\'inf\') for i in range(n - m + 1): min_diff = min(min_diff, puzzles[i + m - 1] - puzzles[i]) return min_diff"},{"question":"In a fantasy board game, there are two resources: gold and crystals. Each turn, a player collects a certain amount of gold, and they can convert some of this gold into crystals. A specific conversion rate is enforced: for every k units of gold, the player receives one crystal. Players can make multiple conversions in a turn as long as they have enough gold. You are given the number of turns n, the gold collected in each turn, and the conversion rate k. Determine the total number of crystals a player can accumulate after n turns. The first line of input contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 100). The second line contains n integers, the amount of gold collected in each turn g_i (0 ≤ g_i ≤ 1000). Output one integer — the total number of crystals the player can accumulate. # Example Input: 4 5 2 10 5 20 Output: 7 Explanation: - Turn 1: Collect 2 gold, not enough for a conversion. - Turn 2: Collect 10 gold, convert 10 gold into 2 crystals. - Turn 3: Collect 5 gold, convert 5 gold into 1 crystal. - Turn 4: Collect 20 gold, convert 20 gold into 4 crystals. - Total crystals: 2 + 1 + 4 = 7","solution":"def total_crystals(n, k, gold): total_crystals = 0 for g in gold: total_crystals += g // k return total_crystals # Example usage: # n = 4 # k = 5 # gold = [2, 10, 5, 20] # print(total_crystals(n, k, gold)) # Output: 7"},{"question":"Email server administrators often need to monitor email traffic for several reasons including troubleshooting unexpected issues or optimizing server performance. You are given a dataset of emails sent from one server over a certain period and need to perform various tasks on this data. Each email is represented by a tuple with three elements: sender\'s email address, recipient\'s email address, and the timestamp when the email was sent. Your task is to design a program that accomplishes the following: 1. Determine the email address that sent the most emails. 2. Find the email address that received the most emails. 3. Identify the sender-recipient pair that appears most frequently (i.e., one email address that sends the most emails to a specific email address). The input consists of: - An integer n (1 ≤ n ≤ 100,000) representing the number of emails. - n lines of data, each containing three elements: a sender\'s email address, a recipient\'s email address, and a timestamp. The output should be: 1. The email address that sent the most emails. 2. The email address that received the most emails. 3. The sender-recipient pair that appears most frequently. If there are multiple solutions for any of the above tasks, print any one of them. Example: Input: 5 alice@example.com bob@example.com 2023-08-01T10:00:00Z carol@example.com dave@example.com 2023-08-01T10:05:00Z alice@example.com dave@example.com 2023-08-01T10:10:00Z bob@example.com carol@example.com 2023-08-01T10:15:00Z alice@example.com dave@example.com 2023-08-01T10:20:00Z Output: alice@example.com dave@example.com alice@example.com dave@example.com","solution":"from collections import defaultdict, Counter def process_emails(n, emails): sent_count = defaultdict(int) received_count = defaultdict(int) pair_count = defaultdict(int) for email in emails: sender, recipient, timestamp = email sent_count[sender] += 1 received_count[recipient] += 1 pair_count[(sender, recipient)] += 1 max_sender = max(sent_count, key=sent_count.get) max_recipient = max(received_count, key=received_count.get) max_pair = max(pair_count, key=pair_count.get) return max_sender, max_recipient, max_pair # Example usage n = 5 emails = [ (\\"alice@example.com\\", \\"bob@example.com\\", \\"2023-08-01T10:00:00Z\\"), (\\"carol@example.com\\", \\"dave@example.com\\", \\"2023-08-01T10:05:00Z\\"), (\\"alice@example.com\\", \\"dave@example.com\\", \\"2023-08-01T10:10:00Z\\"), (\\"bob@example.com\\", \\"carol@example.com\\", \\"2023-08-01T10:15:00Z\\"), (\\"alice@example.com\\", \\"dave@example.com\\", \\"2023-08-01T10:20:00Z\\") ] result = process_emails(n, emails) print(result)"},{"question":"Nina is training to become a competitive programmer and likes solving problems involving bitwise operations. She recently came across a problem where she needs to calculate the XOR of all the elements in a given array. Given an array of integers, find the resultant value after XOR operation is applied to all elements of the array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of elements in the array. - The second line contains `n` integers a1, a2, ..., an (0 ≤ ai ≤ 106) — the elements of the array. # Output - Output a single integer — the result of applying XOR operation to all elements of the array. # Example **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 4 ``` **Explanation:** The XOR operation is applied as follows: - `1 XOR 2` = 3 - `3 XOR 3` = 0 - `0 XOR 4` = 4 So, the final result after applying XOR to all elements is 4. **Note:** XOR (^) operation, also known as exclusive OR, is a binary operation that takes two bits and returns 1 if exactly one of the bits is 1, and returns 0 otherwise. In other words, it returns 0 if the bits are the same and 1 if the bits are different.","solution":"def xor_of_array(arr): Computes the XOR of all elements in the array. result = 0 for num in arr: result ^= num return result"},{"question":"In a faraway kingdom, there is a magical garden with a peculiar watering system. The garden is represented as a 1-dimensional strip consisting of `n` plants, each of which requires a specific amount of water to thrive. The watering system has a fixed water hose that can water exactly one plant at a time. However, there is an additional feature: the system can perform a burst move in which it can water any contiguous sub-segment of plants in a single move, provided all the plants in that sub-segment need the same amount of water. Your task is to determine the minimum number of moves required to water the entire garden using the hose and the burst move feature optimally. The first line contains the number `n` (1 ≤ n ≤ 1000), which represents the number of plants. The second line contains `n` integers, where the `i-th` integer represents the amount of water needed by the `i-th` plant. Print the minimum number of moves required to water all the plants. # Examples **Input:** ``` 5 1 1 2 2 1 ``` **Output:** ``` 3 ``` *Explanation:* You can water the first two plants in one burst move, the next two plants in another burst move, and the last plant in a single move. **Input:** ``` 6 3 3 3 1 2 2 ``` **Output:** ``` 3 ``` *Explanation:* You can water the first three plants in one burst move, the fourth plant with one move, and the last two plants in another burst move.","solution":"def min_moves_watering_garden(n, water_amounts): if n == 0: return 0 moves = 1 # at least one move to water the first plant for i in range(1, n): if water_amounts[i] != water_amounts[i - 1]: moves += 1 return moves"},{"question":"You are given an array of integers `arr` and a positive integer `k`. Your task is to compute the maximum sum of `k` consecutive elements in the array. For example, given `arr = [1, 2, 5, 2, 8, 1, 5]` and `k = 2`, the maximum sum of `2` consecutive elements is `10` (from elements `5` and `5`). You should implement a function `max_sum_of_k_consecutive_elements(arr, k)` that takes in `arr` and `k` and returns the maximum sum. The function should have the following signature: ```python def max_sum_of_k_consecutive_elements(arr: List[int], k: int) -> int: ``` # Input: - A list of integers `arr` where `1 <= len(arr) <= 10^6` and `-10^4 <= arr[i] <= 10^4`. - A positive integer `k` where `1 <= k <= len(arr)`. # Output: - An integer representing the maximum sum of any `k` consecutive elements in the array. # Example: ```python arr = [1, 2, 5, 2, 8, 1, 5] k = 2 max_sum_of_k_consecutive_elements(arr, k) # Output: 10 arr = [4, 2, 1, 7, 8, 1, 2, 8, 1, 0] k = 3 max_sum_of_k_consecutive_elements(arr, k) # Output: 16 ``` # Constraints: - You may assume the array contains at least `k` elements. # Note: - Aim for an O(n) solution where you compute the sum in a single pass through the array.","solution":"from typing import List def max_sum_of_k_consecutive_elements(arr: List[int], k: int) -> int: # Compute the initial sum of the first `k` elements max_sum = current_sum = sum(arr[:k]) # Slide the window over the rest of the array for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an integer n, you are to determine the maximum number of distinct prime factors of any integer m such that 1 ≤ m ≤ n. An integer\'s prime factors are the prime numbers that divide it exactly, without leaving a remainder. For example, the prime factors of 18 are 2 and 3, and the prime factors of 30 are 2, 3, and 5. Write a function that takes an integer n (1 ≤ n ≤ 10^6) as input and returns the maximum number of distinct prime factors of any integer m such that 1 ≤ m ≤ n. Input: - A single integer n (1 ≤ n ≤ 10^6). Output: - A single integer: the maximum number of distinct prime factors of any integer m such that 1 ≤ m ≤ n. Example Input 30 Output 3 Explanation The number 30 has the prime factors 2, 3, and 5, which is the maximum number of distinct prime factors for any integer up to 30.","solution":"def max_distinct_prime_factors(n): def generate_primes(limit): Simple Sieve of Eratosthenes to list prime numbers up to limit is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, limit + 1) if is_prime[p]] primes = generate_primes(n) product = 1 prime_count = 0 for prime in primes: if product * prime > n: break product *= prime prime_count += 1 return prime_count"},{"question":"Alice recently found a peculiar code-editor game that challenges players to transform a string into another string using a specific set of operations. The operations allowed are: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. Alice is intrigued by the concept and wants to write a program to determine the minimum number of operations required to transform one string into another. Let\'s help Alice by writing this program. The input format is as follows: - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - For each test case: - The first line contains a string s1 (1 ≤ |s1| ≤ 1000). - The second line contains a string s2 (1 ≤ |s2| ≤ 1000). For each test case, output a single integer on a new line — the minimum number of operations required to transform s1 into s2. # Example Input ``` 3 horse ros intention execution abc abc ``` # Example Output ``` 3 5 0 ``` # Notes - In the first test case, \\"horse\\" can be transformed into \\"ros\\" with three operations: replace \'h\' with \'r\', delete \'o\', delete \'e\'. - In the second test case, \\"intention\\" can be transformed into \\"execution\\" with five operations: replace \'i\' with \'e\', replace \'n\' with \'x\', replace \'t\' with \'c\', insert \'u\', insert \'t\'. - In the third test case, \\"abc\\" is already equal to \\"abc\\", so no operations are needed. You can safely assume that all entered strings contain only lowercase English letters.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2 using insertions, deletions, or replacements. len1, len2 = len(s1), len(s2) # Initialize a DP table to store results of subproblems dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] # Fill dp[][] from bottom right for i in range(len1 + 1): for j in range(len2 + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are same, ignore last char and recur for remaining string elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last character are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[len1][len2] def transform_strings(test_cases): Given a list of test cases containing pairs of strings, returns a list of integers that represent the minimum number of operations required to transform the first string into the second string for each pair. results = [] for s1, s2 in test_cases: results.append(min_operations(s1, s2)) return results"},{"question":"A city has gathered data on the daily pollution levels over a given period of days. The pollution levels are provided as a list of integers, where each integer represents the pollution level on a particular day. The government enforces a policy where if the pollution level exceeds a certain threshold on a given day, factories must shut down operations immediately, and they cannot resume until the pollution level drops below the threshold for at least 3 consecutive days. Your task is to write a program to determine the minimal number of days that it would take for factories to resume operations after they are forced to shut down due to exceeding the pollution threshold. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of days for which pollution data is provided. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the pollution levels for each day. The third line contains a single integer t (1 ≤ t ≤ 10^6) — the pollution threshold. Print a single integer representing the minimal number of days required for factories to resume their operations after the first shut down or -1 if the pollution never drops below the threshold for 3 consecutive days. # Example Input: ``` 10 5 7 15 25 10 8 5 4 7 5 10 ``` Output: ``` 8 ``` Explanation: The pollution exceeds the threshold on day 4 (25 > 10), so factories shut down. Pollution drops below the threshold starting day 7 (5 < 10, 4 < 10, 7 < 10), and continues for 3 days consecutively, hence they can resume operations on day 8. In case the input had no such 3 consecutive days where pollution level is below the threshold (for example, the last three values were above the threshold or no three consecutive days were below the threshold after an exceedance), the correct output would be -1.","solution":"def minimal_days_to_resume_operations(n, pollution_levels, threshold): Returns the minimal number of days to resume operations after exceeding the pollution threshold. exceed_index = -1 for i in range(n): if pollution_levels[i] > threshold: exceed_index = i break if exceed_index == -1: return -1 below_threshold_days = 0 for i in range(exceed_index + 1, n): if pollution_levels[i] < threshold: below_threshold_days += 1 if below_threshold_days == 3: return i + 1 else: below_threshold_days = 0 return -1 # Example use case n = 10 pollution_levels = [5, 7, 15, 25, 10, 8, 5, 4, 7, 5] threshold = 10 print(minimal_days_to_resume_operations(n, pollution_levels, threshold)) # Output should be 8"},{"question":"You are given an array of integers. Each element in the array represents the number of minutes a student takes to complete a specific task. The task times are not sorted and may vary significantly. Your goal is to divide the students into two groups such that the difference between the total task time for each group is minimized. Write a program to determine the minimum possible absolute difference between the total task times of the two groups. The first line contains an integer n (1 le n le 1000) — the number of students. The second line contains n integers t_1, t_2, ldots, t_n (1 le t_i le 10000) — the task times for each student. Output a single integer — the minimum possible absolute difference between the total task times of the two groups. **Example:** Input ``` 5 1 3 4 3 2 ``` Output ``` 1 ``` Input ``` 4 10 20 30 40 ``` Output ``` 0 ``` In the first example, the optimal division of task times is [1, 3, 3] and [4, 2], resulting in total times of 7 and 6, and their difference is 1. In the second example, the optimal division is [10, 30] and [20, 40], resulting in total times of 40 and 40, and their difference is 0.","solution":"def find_min_difference(task_times): total_sum = sum(task_times) n = len(task_times) half_sum = total_sum // 2 dp = [[False] * (half_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, half_sum + 1): if task_times[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - task_times[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(half_sum, -1, -1): if dp[n][j]: min_difference = total_sum - 2 * j break return min_difference def minimum_possible_difference(n, task_times): return find_min_difference(task_times)"},{"question":"Wendy works at a flower shop and has several vases. Each vase can hold a certain number of flowers, and Wendy wants to fill the vases in such a way that the total value of flowers in the vases is maximized. Wendy has n flowers, each with a value. She has m vases, each with a capacity. She cannot put more flowers in a vase than its capacity allows. Moreover, Wendy can choose which flowers to put in the vases to maximize the total value. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of flowers and the number of vases, respectively. The second line contains n integers vi (1 ≤ vi ≤ 1000) — the values of the flowers. The third line contains m integers ci (1 ≤ ci ≤ 1000) — the capacities of the vases. Print the maximum total value of the flowers that Wendy can put into the vases. For example: If the input is: 5 3 4 7 2 8 6 2 2 3 The output should be: 21 In this example, Wendy can put flowers with values 8 and 6 into the third vase, flowers with value 4 into the first vase, and flower with value 7 into the second vase. This gives her a total value of 21.","solution":"def maximize_flower_value(n, m, flower_values, vase_capacities): Calculate the maximum total value of flowers that can be put into the vases. Parameters: n (int): The number of flowers. m (int): The number of vases. flower_values (list of int): The values of the flowers. vase_capacities (list of int): The capacities of the vases. Returns: int: The maximum total value of flowers in the vases. # Sort flower values in descending order flower_values_sorted = sorted(flower_values, reverse=True) # Sort vase capacities in descending order vase_capacities_sorted = sorted(vase_capacities, reverse=True) total_value = 0 # Fill vases with the highest valued flowers respecting the capacities for i in range(min(n, m)): total_value += flower_values_sorted[i] * min(vase_capacities_sorted[i], 1) return total_value"},{"question":"The king of a faraway land bought a new castle, which consists of a number of rooms connected by two-way doors. The king wants to place guards in the rooms such that every room has at least one guard assigned to it. However, not all rooms need assigned guards, as some rooms can be reached by the guards passing through connecting doors. You are given a description of the castle\'s layout in the form of an undirected graph where nodes represent rooms and edges represent doors between rooms. Your task is to determine the minimum number of guards needed to ensure every room is monitored. The input consists of multiple test cases. Each test case begins with two integers, `n` and `m` (1 leq n leq 10^5, 0 leq m leq 10^5), representing the number of rooms and the number of doors, respectively. The next `m` lines each contain two integers `u` and `v` (1 leq u, v leq n, u neq v), indicating a door between room `u` and room `v`. To end the input, a line containing `0 0` will be provided. For each test case, output a single integer: the minimum number of guards required for that castle. Example: Input: ``` 5 4 1 2 2 3 3 4 4 5 3 2 1 2 2 3 0 0 ``` Output: ``` 1 2 ``` Explanation: In the first test case, all rooms are connected, forming a single component. You can place a single guard in any room, and they can reach all other rooms through the doors. In the second test case, you need at least 2 guards to monitor all rooms, as they form two separate components. Note: Consider that the castle can be disconnected and contain more than one connected component. Each disconnected component needs at least one guard.","solution":"def minimum_guards(test_cases): def dfs(node, graph, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) results = [] for (n, m, edges) in test_cases: if n == 0: break graph = {i: [] for i in range(1, n+1)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() guards_count = 0 for i in range(1, n+1): if i not in visited: visited.add(i) dfs(i, graph, visited) guards_count += 1 results.append(guards_count) return results # Example usage: test_cases = [ (5, 4, [(1, 2), (2, 3), (3, 4), (4, 5)]), (3, 2, [(1, 2), (2, 3)]), (0, 0, []) # This represents the end of input and should be filtered ] print(minimum_guards(test_cases)) # Output should be: [1, 2]"},{"question":"A group of friends has decided to organize a relay race. The race track is set up in the form of a simple undirected unweighted graph, where the vertices represent the checkpoints and the edges represent the paths between them. Each friend can run along the paths of the graph. The friends need to reach a given checkpoint C altogether as a team. Initially, all friends are located at different vertices of the graph, but each one will start running to reach checkpoint C. Since each friend runs at the same constant speed, they can only reach checkpoint C if there is a path from their starting point to C. Given the description of the graph and the starting positions of each friend, determine if it is possible for all friends to gather at checkpoint C. The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 100) — the number of vertices, edges, and friends respectively. The next m lines contain two integers u and v each (1 ≤ u, v ≤ n) indicating that there is an undirected edge between vertices u and v. The following k lines contain an integer representing the starting position of each friend. The last line contains an integer C (1 ≤ C ≤ n) — the checkpoint they all need to reach. Output \\"YES\\" if all friends can gather at checkpoint C, otherwise print \\"NO\\". **Example:** ``` Input: 5 5 3 1 2 2 3 3 4 4 5 1 5 1 3 5 4 Output: YES Input: 5 4 2 1 2 1 3 2 4 3 4 4 1 5 Output: NO ```","solution":"from collections import deque def can_meet_at_checkpoint(n, m, k, edges, start_positions, checkpoint): def bfs(start, graph, n): visited = set() queue = deque([start]) while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) queue.extend([neighbor for neighbor in graph[vertex] if neighbor not in visited]) return visited # Create the graph graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # Check if all starting positions can reach the checkpoint reachable_from_checkpoint = bfs(checkpoint, graph, n) for pos in start_positions: if pos not in reachable_from_checkpoint: return \\"NO\\" return \\"YES\\""},{"question":"There is an ancient kingdom where the roads form a tree structure. The kingdom has n cities connected by n-1 roads, such that there is exactly one path between any pair of cities. Each road is bidirectional and connects two distinct cities. The roads were built such that you can travel from any city to any other city through the roads. Due to an ancient tradition, the two endpoints of each road have a certain importance value associated with them. Your task is to find the maximum importance value of any path between two distinct cities in the kingdom. The importance value of a path is defined as the sum of the importance values of all distinct cities on that path (including the endpoints). The first line contains a single integer n (2 ≤ n ≤ 100) — the number of cities. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 100) — the importance values of the cities. Each of the next n-1 lines contains two space-separated integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the endpoints of each road. Output a single integer — the maximum importance value of any path between two distinct cities. **Example:** Input: ``` 5 7 2 5 3 1 1 2 1 3 2 4 2 5 ``` Output: ``` 18 ``` In this example, the importance value of the path from city 4 to city 3 is 18 (importance values: 5 + 2 + 7 + 3).","solution":"def max_importance_value_path(n, importance_values, roads): from collections import deque # Create adjacency list adjacency_list = [[] for _ in range(n)] for u, v in roads: adjacency_list[u - 1].append(v - 1) adjacency_list[v - 1].append(u - 1) # Function to perform BFS from a starting city and return the furthest city and its distance def bfs(start): visited = [False] * n queue = deque([(start, 0)]) # (current city, current distance) visited[start] = True furthest_city = start max_distance = 0 while queue: current_city, current_distance = queue.popleft() for neighbor in adjacency_list[current_city]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_distance + 1)) if current_distance + 1 > max_distance: max_distance = current_distance + 1 furthest_city = neighbor return furthest_city, max_distance # First BFS to find one endpoint of the longest path endpoint1, _ = bfs(0) # Second BFS from the found endpoint to find the other endpoint of the longest path endpoint2, max_distance = bfs(endpoint1) # BFS again from the start to calculate the total importance value of the path to furthest point def bfs_importance(start): visited = [False] * n queue = deque([start]) visited[start] = True total_importance = 0 while queue: current_city = queue.popleft() total_importance += importance_values[current_city] for neighbor in adjacency_list[current_city]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return total_importance # Calculate the importance value of the path between endpoint1 and endpoint2 total_importance_value = bfs_importance(endpoint1) return total_importance_value # Example to demonstrate the function n = 5 importance_values = [7, 2, 5, 3, 1] roads = [(1, 2), (1, 3), (2, 4), (2, 5)] print(max_importance_value_path(n, importance_values, roads)) # Output should be 18"},{"question":"A cargo ship has to transport containers from one location to another. The ship is limited in the weight it can carry on each trip. Given the weights of the containers, determine the minimum number of trips required to transport all containers. You are given an array of integers where each integer represents the weight of a container, and a single integer representing the maximum weight the ship can carry on one trip. You need to find the minimum number of trips the ship must make to transport all the containers. The first input line contains an integer n (1 ≤ n ≤ 100), the number of containers. The second input line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^4), the weights of the containers. The third input line contains a single integer W (1 ≤ W ≤ 10^5), the maximum weight the ship can carry per trip. Output a single integer - the minimum number of trips required to transport all the containers. # Example **Input:** ``` 5 4 8 6 7 3 10 ``` **Output:** ``` 4 ``` **Explanation:** To transport all containers with a maximum capacity of 10 per trip: - Trip 1: Transport containers with weights {4, 3} (remaining containers: {8, 6, 7}) - Trip 2: Transport container with weight {8} (remaining containers: {6, 7}) - Trip 3: Transport container with weight {6} (remaining container: {7}) - Trip 4: Transport container with weight {7} Thus, a total of 4 trips are required to transport all containers.","solution":"def minimum_trips(n, weights, max_weight): Given the number of containers, their individual weights, and the maximum weight the ship can carry, determine the minimum number of trips required to transport all containers. weights.sort(reverse=True) trips = 0 i = 0 while i < n: current_weight = 0 j = i while j < n and current_weight + weights[j] <= max_weight: current_weight += weights[j] j += 1 i = j trips += 1 return trips"},{"question":"A large rectangular orchard is divided into a grid of cells, where each cell represents a portion of land that can either be barren or fertile. The orchard is irrigated using water canals that run alongside the rows and columns of the grid. Water can only flow into a cell if it is fertile and has a direct path from a canal. However, if a fertile cell is surrounded by barren cells (even diagonally), it won\'t receive water. Given a grid representing the orchard, determine the number of fertile cells that can be irrigated by the water canals. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters, where \'.\' represents a barren cell and \'#\' represents a fertile cell. Output a single integer — the number of fertile cells that can be irrigated. Consider the following example: ``` Input: 5 6 .#..#. ..#. #..# ..#..# .#.#.. Output: 9 ``` In this example, there are 9 fertile cells that have a direct path from the water canals.","solution":"def count_irrigated_cells(n, m, grid): Returns the number of fertile cells that can be irrigated by the water canals. n: int - number of rows m: int - number of columns grid: list of strings - the grid representation of the orchard \'.\' represents a barren cell \'#\' represents a fertile cell def is_in_bounds(row, col): return 0 <= row < n and 0 <= col < m def dfs(row, col): if not is_in_bounds(row, col) or grid[row][col] != \'#\' or visited[row][col]: return visited[row][col] = True irrigated_cells.append((row, col)) for drow, dcol in directions: dfs(row + drow, col + dcol) # Directions for 4-connectedness (up, right, down, left) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] irrigated_cells = [] # Start DFS from the boundaries for i in range(n): for j in [0, m - 1]: # Check left and right boundaries if grid[i][j] == \'#\' and not visited[i][j]: dfs(i, j) for j in range(m): for i in [0, n - 1]: # Check top and bottom boundaries if grid[i][j] == \'#\' and not visited[i][j]: dfs(i, j) return len(irrigated_cells)"},{"question":"Given an array of positive integers `arr` and an integer `k`, determine if there exist two unique indices `i` and `j` such that the absolute difference between `arr[i]` and `arr[j]` is exactly `k`. Return \\"YES\\" if such indices exist, otherwise return \\"NO\\". The first line contains two integers `n` and `k` (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) denoting the size of the array and the target difference respectively. The second line contains `n` positive integers denoting the elements of the array (1 ≤ arr[i] ≤ 109). Input: ``` n k arr1 arr2 arr3 ... arrn ``` Output: ``` YES or NO ``` Example: Input: ``` 6 3 1 5 3 4 2 9 ``` Output: ``` YES ``` Explanation: There are multiple such pairs (e.g., (1, 4), (3, 6)) where the absolute difference is 3.","solution":"def has_pair_with_difference(arr, k): Given a list of positive integers arr and an integer k, determines if there exist two unique indices i and j such that the absolute difference between arr[i] and arr[j] is exactly k. Returns \\"YES\\" if such indices exist, otherwise \\"NO\\". seen = set() for number in arr: if (number + k) in seen or (number - k) in seen: return \'YES\' seen.add(number) return \'NO\'"},{"question":"You are given an array of integers. Your task is to process a series of operations to modify the array and answer queries regarding the sum of elements in a specified subarray. There are two types of operations: 1. Update Operation: Change the value of an element at a specific index. 2. Query Operation: Calculate the sum of elements in a specified subarray. The operations are given in the following format: - `1 x y`: Update the value at index `x` to `y`. - `2 l r`: Calculate and output the sum of the elements from index `l` to index `r` (inclusive). The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of operations, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the initial values of the array. Each of the next `q` lines contains an operation in one of the above formats. Output the result for each query operation in the order they appear in the input. Example: ``` Input: 5 3 1 2 3 4 5 2 1 3 1 2 10 2 2 5 Output: 6 22 ``` Explanation for the example: - The initial array is `[1, 2, 3, 4, 5]`. - The first query asks for the sum from index 1 to 3, which is `1 + 2 + 3 = 6`. - The update operation changes the value at index 2 to 10, so the array becomes `[1, 10, 3, 4, 5]`. - The second query asks for the sum from index 2 to 5, which is `10 + 3 + 4 + 5 = 22`.","solution":"def process_operations(n, q, array, operations): Processes a series of update and query operations on the array and returns the results of query operations. :param n: Number of elements in the array :param q: Number of operations :param array: Initial values of the array :param operations: List of operations to be performed on the array :return: List of results of the query operations results = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: # Update operation index = int(parts[1]) - 1 # Convert to zero-based index value = int(parts[2]) array[index] = value elif op_type == 2: # Query operation l = int(parts[1]) - 1 # Convert to zero-based index r = int(parts[2]) - 1 # Convert to zero-based index results.append(sum(array[l:r+1])) return results"},{"question":"John is working on organizing a bookshelf that can fit exactly n books. Each book belongs to a certain genre, and there\'s a total of g different genres. John wants to arrange the books on the shelf in such a way that no two adjacent books belong to the same genre, if possible. Write a function that takes the number of books in each genre and determines if it is possible to arrange them according to John\'s requirement. If it is possible, you should return any valid arrangement of the books. If it is not possible, return \\"Not possible\\". The first line contains two integers n (1 leq n leq 10^5) and g (1 leq g leq 100) — the number of books and genres, respectively. The second line contains g integers where the i-th integer represents the number of books of the i-th genre. If it\'s possible to arrange the books as required, print \\"Possible\\" followed by any valid arrangement of the books (using genre numbers starting from 1 up to g). Otherwise, print \\"Not possible\\". Example input: ``` 5 3 2 2 1 ``` Example output: ``` Possible 1 2 1 3 2 ``` Example input: ``` 4 1 4 ``` Example output: ``` Not possible ```","solution":"def arrange_books(n, g, counts): Determines if it is possible to arrange the books such that no two adjacent books belong to the same genre. # Step 1: Find the genre with the maximum count max_count = max(counts) # Condition to check if it is not possible to arrange books if max_count > (n + 1) // 2: return \\"Not possible\\" # Step 2: Create a max heap for more efficient distribution of books import heapq max_heap = [] for i in range(g): if counts[i] > 0: heapq.heappush(max_heap, (-counts[i], i + 1)) # (negative count, genre) result = [0] * n index = 0 # Step 3: Arrange the books by distributing the genre with the largest count first while max_heap: count, genre = heapq.heappop(max_heap) count = -count # convert back to positive # Place the current genre in every other slot starting from the current index for _ in range(count): if index >= n: index = 1 result[index] = genre index += 2 counts[genre - 1] -= count return \\"Possiblen\\" + \' \'.join(map(str, result)) # Input parsing function def main(): n, g = map(int, input().split()) counts = list(map(int, input().split())) print(arrange_books(n, g, counts))"},{"question":"Polycarp is a bibliophile and has a collection of books stacked on his shelf. Each book has a thickness of 1 unit. Polycarp wants to organize his shelf by grouping books into segments where the thickness of each segment is a contiguous block of books from the shelf. However, Polycarp doesn\'t want any segment to have books of the same color. He wants to know the maximum number of books he can include in a single segment such that no two books in that segment have the same color. You are given the number of books, n, and the colors of the books represented by integers in an array. Your task is to find the maximum number of books that can be included in a segment without violating the condition. The first line of the input contains an integer n (1 le n le 2 times 10^5) representing the number of books. The second line contains n integers representing the colors of the books. Output a single integer, the maximum number of books that can be included in a valid segment. For example: - Input: ``` 7 1 2 3 1 2 4 2 ``` - Output: ``` 4 ``` Explanation: In this example, the maximum segment could be from the 2nd book to the 5th book (colors: [2, 3, 1, 2]) or from the 3rd book to the 6th book (colors: [3, 1, 2, 4]). Thus, the maximum number of books in a valid segment is 4.","solution":"def max_books_without_same_color(n, colors): max_len = 0 color_map = {} left = 0 for right in range(n): if colors[right] in color_map: left = max(left, color_map[colors[right]] + 1) color_map[colors[right]] = right max_len = max(max_len, right - left + 1) return max_len"},{"question":"Eve is preparing for the annual fruit picking competition. She has a list of trees, each bearing a certain number of fruits. The competition rules allow Eve to pick fruits from any contiguous segment of trees, provided she doesn\'t pick from more than two types of trees in that segment. Eve wants to pick the maximum number of fruits she can while obeying the rules. Help her find out the maximum number in this scenario. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the total number of trees. The second line contains n integers, where the i-th integer denotes the number of fruits on the i-th tree (1 ≤ ai ≤ 1000). Output a single integer — the maximum number of fruits that Eve can pick while following the rules. **Examples:** **Input:** ``` 6 1 2 2 1 2 3 ``` **Output:** ``` 5 ``` **Explanation:** In the first example, one of the optimal ways for Eve is to pick fruits from trees indexed 1 to 4 (1, 2, 2, 1). The total number of fruits is 1 + 2 + 2 + 1 = 6. If she picks trees 2 to 5 (2, 2, 1, 2), the total number of fruits is 2 + 2 + 1 + 2 = 7. Therefore, the answer is 7.","solution":"def max_fruits(n, fruits): from collections import defaultdict if n == 0: return 0 max_fruits = 0 fruit_count = defaultdict(int) left = 0 for right in range(n): fruit_count[fruits[right]] += 1 while len(fruit_count) > 2: fruit_count[fruits[left]] -= 1 if fruit_count[fruits[left]] == 0: del fruit_count[fruits[left]] left += 1 max_fruits = max(max_fruits, sum(fruit_count.values())) return max_fruits"},{"question":"William is a young computer science enthusiast who enjoys exploring data structures, particularly binary trees. He recently came up with a challenge for his friends involving binary trees. The challenge is to determine the number of unique binary search trees (BST) that can be generated using distinct integers from 1 to n. A BST is a binary tree in which for every node, the values in its left subtree are less than the node\'s value, and the values in its right subtree are greater than the node\'s value. Given a single integer n, your task is to determine the number of unique BSTs that can be created using values from 1 to n. The first line contains an integer n (1 ≤ n ≤ 19). Output a single integer, the number of unique BSTs that can be constructed with values from 1 to n. Example 1: Input: 3 Output: 5 Example 2: Input: 4 Output: 14 Note: For example, when n = 3, the possible BSTs are: 1. Root(1) - Right(2) - Right(3) 2. Root(1) - Right(3) - Left(2) 3. Root(2) - Left(1) - Right(3) 4. Root(3) - Left(1) - Right(2) 5. Root(3) - Left(2) - Left.Left(1)","solution":"def num_trees(n): Returns the number of unique Binary Search Trees that can be generated using distinct integers from 1 to n. if n == 0: return 1 count = [0] * (n + 1) count[0], count[1] = 1, 1 for i in range(2, n + 1): for j in range(1, i + 1): count[i] += count[j - 1] * count[i - j] return count[n]"}]'),A={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},z={class:"card-container"},N={key:0,class:"empty-state"},F=["disabled"],P={key:0},C={key:1};function R(s,e,h,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",z,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",N,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",P,"See more"))],8,F)):l("",!0)])}const D=d(A,[["render",R],["__scopeId","data-v-ed0d6657"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/35.md","filePath":"quotes/35.md"}'),B={name:"quotes/35.md"},H=Object.assign(B,{setup(s){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{G as __pageData,H as default};
